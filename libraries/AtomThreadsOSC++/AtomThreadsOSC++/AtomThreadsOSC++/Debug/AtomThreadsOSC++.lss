
AtomThreadsOSC++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000455c  000045f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000455c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000031b  00800150  00800150  00004640  2**0
                  ALLOC
  3 .stab         00003624  00000000  00000000  00004640  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dfb  00000000  00000000  00007c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000008d8  00000000  00000000  00008a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000815c  00000000  00000000  00009338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000219c  00000000  00000000  00011494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032bb  00000000  00000000  00013630  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001828  00000000  00000000  000168ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019a5  00000000  00000000  00018114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000793f  00000000  00000000  00019ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006a8  00000000  00000000  000213f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__vector_1>
       8:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_2>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__vector_7>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <__vector_11>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 40 08 	jmp	0x1080	; 0x1080 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_18>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <digital_pin_to_timer_PGM>:
      68:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      78:	00 00 00 00                                         ....

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <_ZL21tone_pin_to_timer_PGM>:
      c2:	02 00                                               ..

000000c4 <__ctors_start>:
      c4:	39 02       	muls	r19, r25

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	ec e5       	ldi	r30, 0x5C	; 92
      da:	f5 e4       	ldi	r31, 0x45	; 69
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a0 35       	cpi	r26, 0x50	; 80
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	14 e0       	ldi	r17, 0x04	; 4
      ea:	a0 e5       	ldi	r26, 0x50	; 80
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	ab 36       	cpi	r26, 0x6B	; 107
      f4:	b1 07       	cpc	r27, r17
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c6 ec       	ldi	r28, 0xC6	; 198
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	22 97       	sbiw	r28, 0x02	; 2
     102:	fe 01       	movw	r30, r28
     104:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__tablejump__>
     108:	c4 3c       	cpi	r28, 0xC4	; 196
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 ac 12 	call	0x2558	; 0x2558 <main>
     112:	0c 94 ac 22 	jmp	0x4558	; 0x4558 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__vector_default>

0000011a <archContextSwitch>:
     */

    /**
     * Save registers R2-R17, R28-R29.
     */
    push r2
     11a:	2f 92       	push	r2
    push r3
     11c:	3f 92       	push	r3
    push r4
     11e:	4f 92       	push	r4
    push r5
     120:	5f 92       	push	r5
    push r6
     122:	6f 92       	push	r6
    push r7
     124:	7f 92       	push	r7
    push r8
     126:	8f 92       	push	r8
    push r9
     128:	9f 92       	push	r9
    push r10
     12a:	af 92       	push	r10
    push r11
     12c:	bf 92       	push	r11
    push r12
     12e:	cf 92       	push	r12
    push r13
     130:	df 92       	push	r13
    push r14
     132:	ef 92       	push	r14
    push r15
     134:	ff 92       	push	r15
    push r16
     136:	0f 93       	push	r16
    push r17
     138:	1f 93       	push	r17
    push r28
     13a:	cf 93       	push	r28
    push r29
     13c:	df 93       	push	r29
     * the old TCB is still untouched in R25-R24. We have saved R16/R17
     * and R28/R29 so we can use them for our own purposes now. We must be
     * careful not to use R23-R22, however, as these still contain the
     * other parameter, new_tcb_ptr.
     */
    in  r16,_SFR_IO_ADDR(SPL)  /* Get the current SP into general regs */
     13e:	0d b7       	in	r16, 0x3d	; 61
    in  r17,_SFR_IO_ADDR(SPH)  /* R16/R17 which are now free to use. */
     140:	1e b7       	in	r17, 0x3e	; 62

    mov r28,r24         /* Move old_tcb_ptr param into the Y-regs so we */
     142:	c8 2f       	mov	r28, r24
    mov r29,r25         /* can access the TCB via a pointer. */
     144:	d9 2f       	mov	r29, r25

    st  Y,r16           /* Store SPH/SPL to old_tcb_ptr->tcb_save_ptr which */
     146:	08 83       	st	Y, r16
    std Y+1,r17         /* is conveniently the first member of the TCB. */
     148:	19 83       	std	Y+1, r17	; 0x01
     * Get the new thread's stack pointer off the TCB (new_tcb_ptr).
     * new_tcb_ptr is still stored in the parameter registers, R23-R22.
     * We are free to use any other registers, however, as we haven't
     * yet popped any of the new thread's context off its stack.
     */
    mov r28,r22         /* Move new_tcb_ptr into the Y-regs so we */
     14a:	c6 2f       	mov	r28, r22
    mov r29,r23         /* can access the TCB via a pointer. */
     14c:	d7 2f       	mov	r29, r23

    ld r16,Y            /* Load new_tcb_ptr->sp_save_ptr into R16/R17. */
     14e:	08 81       	ld	r16, Y
    ldd r17,Y+1         /* It is conveniently the first member of the TCB. */
     150:	19 81       	ldd	r17, Y+1	; 0x01

    out _SFR_IO_ADDR(SPL),r16  /* Set our stack pointer to the new thread's */
     152:	0d bf       	out	0x3d, r16	; 61
    out _SFR_IO_ADDR(SPH),r17  /* stack pointer, from its TCB. */
     154:	1e bf       	out	0x3e, r17	; 62
#endif

    /**
     * Restore registers R2-R17, R28-R29.
     */
    pop r29
     156:	df 91       	pop	r29
    pop r28
     158:	cf 91       	pop	r28
    pop r17
     15a:	1f 91       	pop	r17
    pop r16
     15c:	0f 91       	pop	r16
    pop r15
     15e:	ff 90       	pop	r15
    pop r14
     160:	ef 90       	pop	r14
    pop r13
     162:	df 90       	pop	r13
    pop r12
     164:	cf 90       	pop	r12
    pop r11
     166:	bf 90       	pop	r11
    pop r10
     168:	af 90       	pop	r10
    pop r9
     16a:	9f 90       	pop	r9
    pop r8
     16c:	8f 90       	pop	r8
    pop r7
     16e:	7f 90       	pop	r7
    pop r6
     170:	6f 90       	pop	r6
    pop r5
     172:	5f 90       	pop	r5
    pop r4
     174:	4f 90       	pop	r4
    pop r3
     176:	3f 90       	pop	r3
    pop r2
     178:	2f 90       	pop	r2
     * calls, interrupts will remain disabled through the regular RET
     * calls, and we will reenable interrupts in the CRITICAL_END() call
     * when we unlock interrupts.
     */

    ret
     17a:	08 95       	ret

0000017c <archFirstThreadRestore>:
     * Get the new thread's stack pointer off the TCB (new_tcb_ptr).
     * new_tcb_ptr is stored in the parameter registers, R25-R24.
     * We are free to use any other registers, however, as we haven't
     * yet popped any of the new thread's context off its stack.
     */
    mov r28,r24         /* Move new_tcb_ptr into the Y-regs so we */
     17c:	c8 2f       	mov	r28, r24
    mov r29,r25         /* can access the TCB via a pointer. */
     17e:	d9 2f       	mov	r29, r25

    ld r16,Y            /* Load new_tcb_ptr->sp_save_ptr into R16/R17. */
     180:	08 81       	ld	r16, Y
    ldd r17,Y+1         /* It is conveniently the first member of the TCB. */
     182:	19 81       	ldd	r17, Y+1	; 0x01

    out _SFR_IO_ADDR(SPL),r16  /* Set our stack pointer to the new thread's */
     184:	0d bf       	out	0x3d, r16	; 61
    out _SFR_IO_ADDR(SPH),r17  /* stack pointer, from its TCB. */
     186:	1e bf       	out	0x3e, r17	; 62
#endif

    /**
     * Restore registers R2-R17, R28-R29.
     */
    pop r29
     188:	df 91       	pop	r29
    pop r28
     18a:	cf 91       	pop	r28
    pop r17
     18c:	1f 91       	pop	r17
    pop r16
     18e:	0f 91       	pop	r16
    pop r15
     190:	ff 90       	pop	r15
    pop r14
     192:	ef 90       	pop	r14
    pop r13
     194:	df 90       	pop	r13
    pop r12
     196:	cf 90       	pop	r12
    pop r11
     198:	bf 90       	pop	r11
    pop r10
     19a:	af 90       	pop	r10
    pop r9
     19c:	9f 90       	pop	r9
    pop r8
     19e:	8f 90       	pop	r8
    pop r7
     1a0:	7f 90       	pop	r7
    pop r6
     1a2:	6f 90       	pop	r6
    pop r5
     1a4:	5f 90       	pop	r5
    pop r4
     1a6:	4f 90       	pop	r4
    pop r3
     1a8:	3f 90       	pop	r3
    pop r2
     1aa:	2f 90       	pop	r2
     * but it is also safe at this point to have two separate
     * instructions:
     *   sei    // enable interrupts
     *   ret    // return to new thread entry point
     */
    reti
     1ac:	18 95       	reti

000001ae <_ZN14HardwareSerial9availableEv>:
  cbi(*_ucsrb, _rxcie);  
}

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
     1ae:	fc 01       	movw	r30, r24
     1b0:	22 81       	ldd	r18, Z+2	; 0x02
     1b2:	33 81       	ldd	r19, Z+3	; 0x03
     1b4:	f9 01       	movw	r30, r18
     1b6:	e0 58       	subi	r30, 0x80	; 128
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	80 81       	ld	r24, Z
     1bc:	91 81       	ldd	r25, Z+1	; 0x01
     1be:	2e 57       	subi	r18, 0x7E	; 126
     1c0:	3f 4f       	sbci	r19, 0xFF	; 255
     1c2:	f9 01       	movw	r30, r18
     1c4:	20 81       	ld	r18, Z
     1c6:	31 81       	ldd	r19, Z+1	; 0x01
     1c8:	82 1b       	sub	r24, r18
     1ca:	93 0b       	sbc	r25, r19
     1cc:	8f 77       	andi	r24, 0x7F	; 127
     1ce:	90 70       	andi	r25, 0x00	; 0
}
     1d0:	08 95       	ret

000001d2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     1d2:	fc 01       	movw	r30, r24
     1d4:	82 81       	ldd	r24, Z+2	; 0x02
     1d6:	93 81       	ldd	r25, Z+3	; 0x03
     1d8:	fc 01       	movw	r30, r24
     1da:	ee 57       	subi	r30, 0x7E	; 126
     1dc:	ff 4f       	sbci	r31, 0xFF	; 255
     1de:	20 81       	ld	r18, Z
     1e0:	31 81       	ldd	r19, Z+1	; 0x01
     1e2:	fc 01       	movw	r30, r24
     1e4:	e0 58       	subi	r30, 0x80	; 128
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	40 81       	ld	r20, Z
     1ea:	51 81       	ldd	r21, Z+1	; 0x01
     1ec:	42 17       	cp	r20, r18
     1ee:	53 07       	cpc	r21, r19
     1f0:	31 f0       	breq	.+12     	; 0x1fe <_ZN14HardwareSerial4peekEv+0x2c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     1f2:	82 0f       	add	r24, r18
     1f4:	93 1f       	adc	r25, r19
     1f6:	fc 01       	movw	r30, r24
     1f8:	80 81       	ld	r24, Z
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
     200:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     202:	08 95       	ret

00000204 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     204:	fc 01       	movw	r30, r24
     206:	82 81       	ldd	r24, Z+2	; 0x02
     208:	93 81       	ldd	r25, Z+3	; 0x03
     20a:	dc 01       	movw	r26, r24
     20c:	ae 57       	subi	r26, 0x7E	; 126
     20e:	bf 4f       	sbci	r27, 0xFF	; 255
     210:	4d 91       	ld	r20, X+
     212:	5c 91       	ld	r21, X
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	fc 01       	movw	r30, r24
     218:	e0 58       	subi	r30, 0x80	; 128
     21a:	ff 4f       	sbci	r31, 0xFF	; 255
     21c:	20 81       	ld	r18, Z
     21e:	31 81       	ldd	r19, Z+1	; 0x01
     220:	24 17       	cp	r18, r20
     222:	35 07       	cpc	r19, r21
     224:	69 f0       	breq	.+26     	; 0x240 <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     226:	84 0f       	add	r24, r20
     228:	95 1f       	adc	r25, r21
     22a:	fc 01       	movw	r30, r24
     22c:	80 81       	ld	r24, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
     22e:	4f 5f       	subi	r20, 0xFF	; 255
     230:	5f 4f       	sbci	r21, 0xFF	; 255
     232:	4f 77       	andi	r20, 0x7F	; 127
     234:	50 70       	andi	r21, 0x00	; 0
     236:	11 96       	adiw	r26, 0x01	; 1
     238:	5c 93       	st	X, r21
     23a:	4e 93       	st	-X, r20
    return c;
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     240:	8f ef       	ldi	r24, 0xFF	; 255
     242:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    return c;
  }
}
     244:	08 95       	ret

00000246 <_ZN14HardwareSerial5flushEv>:
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
     246:	dc 01       	movw	r26, r24
     248:	12 96       	adiw	r26, 0x02	; 2
     24a:	8d 91       	ld	r24, X+
     24c:	9c 91       	ld	r25, X
     24e:	13 97       	sbiw	r26, 0x03	; 3
     250:	fc 01       	movw	r30, r24
     252:	e0 58       	subi	r30, 0x80	; 128
     254:	ff 4f       	sbci	r31, 0xFF	; 255
     256:	8e 57       	subi	r24, 0x7E	; 126
     258:	9f 4f       	sbci	r25, 0xFF	; 255
     25a:	dc 01       	movw	r26, r24
     25c:	8d 91       	ld	r24, X+
     25e:	9c 91       	ld	r25, X
     260:	11 97       	sbiw	r26, 0x01	; 1
     262:	91 83       	std	Z+1, r25	; 0x01
     264:	80 83       	st	Z, r24
}
     266:	08 95       	ret

00000268 <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
{
     268:	fc 01       	movw	r30, r24
  while (!((*_ucsra) & (1 << _udre)))
     26a:	a0 85       	ldd	r26, Z+8	; 0x08
     26c:	b1 85       	ldd	r27, Z+9	; 0x09
     26e:	21 89       	ldd	r18, Z+17	; 0x11
     270:	8c 91       	ld	r24, X
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	02 2e       	mov	r0, r18
     276:	02 c0       	rjmp	.+4      	; 0x27c <_ZN14HardwareSerial5writeEh+0x14>
     278:	95 95       	asr	r25
     27a:	87 95       	ror	r24
     27c:	0a 94       	dec	r0
     27e:	e2 f7       	brpl	.-8      	; 0x278 <_ZN14HardwareSerial5writeEh+0x10>
     280:	80 ff       	sbrs	r24, 0
     282:	f6 cf       	rjmp	.-20     	; 0x270 <_ZN14HardwareSerial5writeEh+0x8>
    ;

  *_udr = c;
     284:	04 84       	ldd	r0, Z+12	; 0x0c
     286:	f5 85       	ldd	r31, Z+13	; 0x0d
     288:	e0 2d       	mov	r30, r0
     28a:	60 83       	st	Z, r22
}
     28c:	08 95       	ret

0000028e <__vector_18>:
  }
}

#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
  {
     28e:	1f 92       	push	r1
     290:	0f 92       	push	r0
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	2f 93       	push	r18
     29a:	3f 93       	push	r19
     29c:	4f 93       	push	r20
     29e:	5f 93       	push	r21
     2a0:	6f 93       	push	r22
     2a2:	8f 93       	push	r24
     2a4:	9f 93       	push	r25
     2a6:	ef 93       	push	r30
     2a8:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     2aa:	60 91 c6 00 	lds	r22, 0x00C6
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
     2ae:	20 91 e3 01 	lds	r18, 0x01E3
     2b2:	30 91 e4 01 	lds	r19, 0x01E4
     2b6:	c9 01       	movw	r24, r18
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	8f 77       	andi	r24, 0x7F	; 127
     2bc:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
     2be:	40 91 e5 01 	lds	r20, 0x01E5
     2c2:	50 91 e6 01 	lds	r21, 0x01E6
     2c6:	84 17       	cp	r24, r20
     2c8:	95 07       	cpc	r25, r21
     2ca:	41 f0       	breq	.+16     	; 0x2dc <__vector_18+0x4e>
    rx_buffer->buffer[rx_buffer->head] = c;
     2cc:	2d 59       	subi	r18, 0x9D	; 157
     2ce:	3e 4f       	sbci	r19, 0xFE	; 254
     2d0:	f9 01       	movw	r30, r18
     2d2:	60 83       	st	Z, r22
    rx_buffer->head = i;
     2d4:	90 93 e4 01 	sts	0x01E4, r25
     2d8:	80 93 e3 01 	sts	0x01E3, r24
    unsigned char c  =  UDR;  //  atmega8535
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
     2dc:	ff 91       	pop	r31
     2de:	ef 91       	pop	r30
     2e0:	9f 91       	pop	r25
     2e2:	8f 91       	pop	r24
     2e4:	6f 91       	pop	r22
     2e6:	5f 91       	pop	r21
     2e8:	4f 91       	pop	r20
     2ea:	3f 91       	pop	r19
     2ec:	2f 91       	pop	r18
     2ee:	0f 90       	pop	r0
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	0f 90       	pop	r0
     2f4:	1f 90       	pop	r1
     2f6:	18 95       	reti

000002f8 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
     2f8:	8f 92       	push	r8
     2fa:	af 92       	push	r10
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
     312:	84 e0       	ldi	r24, 0x04	; 4
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
     31a:	73 83       	std	Z+3, r23	; 0x03
     31c:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
     31e:	55 83       	std	Z+5, r21	; 0x05
     320:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
     322:	37 83       	std	Z+7, r19	; 0x07
     324:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
     326:	11 87       	std	Z+9, r17	; 0x09
     328:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
     32a:	f3 86       	std	Z+11, r15	; 0x0b
     32c:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
     32e:	d5 86       	std	Z+13, r13	; 0x0d
     330:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
     332:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
     334:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
     336:	8d 85       	ldd	r24, Y+13	; 0x0d
     338:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
     33a:	8e 85       	ldd	r24, Y+14	; 0x0e
     33c:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
     33e:	8f 85       	ldd	r24, Y+15	; 0x0f
     340:	82 8b       	std	Z+18, r24	; 0x12
}
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	ff 90       	pop	r15
     34c:	ef 90       	pop	r14
     34e:	df 90       	pop	r13
     350:	cf 90       	pop	r12
     352:	af 90       	pop	r10
     354:	8f 90       	pop	r8
     356:	08 95       	ret

00000358 <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
{
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	ec 01       	movw	r28, r24
     362:	9a 01       	movw	r18, r20
     364:	ab 01       	movw	r20, r22
     366:	e8 85       	ldd	r30, Y+8	; 0x08
     368:	f9 85       	ldd	r31, Y+9	; 0x09

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
     36a:	20 30       	cpi	r18, 0x00	; 0
     36c:	81 ee       	ldi	r24, 0xE1	; 225
     36e:	38 07       	cpc	r19, r24
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	48 07       	cpc	r20, r24
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	58 07       	cpc	r21, r24
     378:	09 f4       	brne	.+2      	; 0x37c <_ZN14HardwareSerial5beginEl+0x24>
     37a:	4d c0       	rjmp	.+154    	; 0x416 <_ZN14HardwareSerial5beginEl+0xbe>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0a 88       	ldd	r0, Y+18	; 0x12
     382:	02 c0       	rjmp	.+4      	; 0x388 <_ZN14HardwareSerial5beginEl+0x30>
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	0a 94       	dec	r0
     38a:	e2 f7       	brpl	.-8      	; 0x384 <_ZN14HardwareSerial5beginEl+0x2c>
     38c:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	79 e0       	ldi	r23, 0x09	; 9
     392:	8d e3       	ldi	r24, 0x3D	; 61
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodsi4>
     39a:	89 01       	movw	r16, r18
     39c:	9a 01       	movw	r18, r20
     39e:	01 50       	subi	r16, 0x01	; 1
     3a0:	10 40       	sbci	r17, 0x00	; 0
     3a2:	20 40       	sbci	r18, 0x00	; 0
     3a4:	30 40       	sbci	r19, 0x00	; 0
     3a6:	c9 01       	movw	r24, r18
     3a8:	b8 01       	movw	r22, r16
     3aa:	22 e0       	ldi	r18, 0x02	; 2
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodsi4>
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     3b6:	ec 81       	ldd	r30, Y+4	; 0x04
     3b8:	fd 81       	ldd	r31, Y+5	; 0x05
     3ba:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     3bc:	ee 81       	ldd	r30, Y+6	; 0x06
     3be:	ff 81       	ldd	r31, Y+7	; 0x07
     3c0:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     3c2:	ea 85       	ldd	r30, Y+10	; 0x0a
     3c4:	fb 85       	ldd	r31, Y+11	; 0x0b
     3c6:	40 81       	ld	r20, Z
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	c9 01       	movw	r24, r18
     3ce:	0e 84       	ldd	r0, Y+14	; 0x0e
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <_ZN14HardwareSerial5beginEl+0x7e>
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <_ZN14HardwareSerial5beginEl+0x7a>
     3da:	48 2b       	or	r20, r24
     3dc:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     3de:	ea 85       	ldd	r30, Y+10	; 0x0a
     3e0:	fb 85       	ldd	r31, Y+11	; 0x0b
     3e2:	40 81       	ld	r20, Z
     3e4:	c9 01       	movw	r24, r18
     3e6:	0f 84       	ldd	r0, Y+15	; 0x0f
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <_ZN14HardwareSerial5beginEl+0x96>
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	0a 94       	dec	r0
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <_ZN14HardwareSerial5beginEl+0x92>
     3f2:	48 2b       	or	r20, r24
     3f4:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     3f6:	ea 85       	ldd	r30, Y+10	; 0x0a
     3f8:	fb 85       	ldd	r31, Y+11	; 0x0b
     3fa:	80 81       	ld	r24, Z
     3fc:	08 88       	ldd	r0, Y+16	; 0x10
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <_ZN14HardwareSerial5beginEl+0xac>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	0a 94       	dec	r0
     406:	e2 f7       	brpl	.-8      	; 0x400 <_ZN14HardwareSerial5beginEl+0xa8>
     408:	82 2b       	or	r24, r18
     40a:	80 83       	st	Z, r24
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     416:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     418:	20 e1       	ldi	r18, 0x10	; 16
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	cc cf       	rjmp	.-104    	; 0x3b6 <_ZN14HardwareSerial5beginEl+0x5e>

0000041e <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
}

void HardwareSerial::end()
{
     41e:	fc 01       	movw	r30, r24
  cbi(*_ucsrb, _rxen);
     420:	a2 85       	ldd	r26, Z+10	; 0x0a
     422:	b3 85       	ldd	r27, Z+11	; 0x0b
     424:	4c 91       	ld	r20, X
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	c9 01       	movw	r24, r18
     42c:	06 84       	ldd	r0, Z+14	; 0x0e
     42e:	02 c0       	rjmp	.+4      	; 0x434 <_ZN14HardwareSerial3endEv+0x16>
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	0a 94       	dec	r0
     436:	e2 f7       	brpl	.-8      	; 0x430 <_ZN14HardwareSerial3endEv+0x12>
     438:	80 95       	com	r24
     43a:	84 23       	and	r24, r20
     43c:	8c 93       	st	X, r24
  cbi(*_ucsrb, _txen);
     43e:	a2 85       	ldd	r26, Z+10	; 0x0a
     440:	b3 85       	ldd	r27, Z+11	; 0x0b
     442:	4c 91       	ld	r20, X
     444:	c9 01       	movw	r24, r18
     446:	07 84       	ldd	r0, Z+15	; 0x0f
     448:	02 c0       	rjmp	.+4      	; 0x44e <_ZN14HardwareSerial3endEv+0x30>
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	0a 94       	dec	r0
     450:	e2 f7       	brpl	.-8      	; 0x44a <_ZN14HardwareSerial3endEv+0x2c>
     452:	80 95       	com	r24
     454:	84 23       	and	r24, r20
     456:	8c 93       	st	X, r24
  cbi(*_ucsrb, _rxcie);  
     458:	a2 85       	ldd	r26, Z+10	; 0x0a
     45a:	b3 85       	ldd	r27, Z+11	; 0x0b
     45c:	8c 91       	ld	r24, X
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	02 c0       	rjmp	.+4      	; 0x466 <_ZN14HardwareSerial3endEv+0x48>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	0a 94       	dec	r0
     468:	e2 f7       	brpl	.-8      	; 0x462 <_ZN14HardwareSerial3endEv+0x44>
     46a:	20 95       	com	r18
     46c:	28 23       	and	r18, r24
     46e:	2c 93       	st	X, r18
}
     470:	08 95       	ret

00000472 <_GLOBAL__sub_I_rx_buffer>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	90 93 51 01 	sts	0x0151, r25
     47a:	80 93 50 01 	sts	0x0150, r24
{
  _rx_buffer = rx_buffer;
     47e:	83 e6       	ldi	r24, 0x63	; 99
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	90 93 53 01 	sts	0x0153, r25
     486:	80 93 52 01 	sts	0x0152, r24
  _ubrrh = ubrrh;
     48a:	85 ec       	ldi	r24, 0xC5	; 197
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	90 93 55 01 	sts	0x0155, r25
     492:	80 93 54 01 	sts	0x0154, r24
  _ubrrl = ubrrl;
     496:	84 ec       	ldi	r24, 0xC4	; 196
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	90 93 57 01 	sts	0x0157, r25
     49e:	80 93 56 01 	sts	0x0156, r24
  _ucsra = ucsra;
     4a2:	80 ec       	ldi	r24, 0xC0	; 192
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	90 93 59 01 	sts	0x0159, r25
     4aa:	80 93 58 01 	sts	0x0158, r24
  _ucsrb = ucsrb;
     4ae:	81 ec       	ldi	r24, 0xC1	; 193
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	90 93 5b 01 	sts	0x015B, r25
     4b6:	80 93 5a 01 	sts	0x015A, r24
  _udr = udr;
     4ba:	86 ec       	ldi	r24, 0xC6	; 198
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	90 93 5d 01 	sts	0x015D, r25
     4c2:	80 93 5c 01 	sts	0x015C, r24
  _rxen = rxen;
     4c6:	84 e0       	ldi	r24, 0x04	; 4
     4c8:	80 93 5e 01 	sts	0x015E, r24
  _txen = txen;
     4cc:	83 e0       	ldi	r24, 0x03	; 3
     4ce:	80 93 5f 01 	sts	0x015F, r24
  _rxcie = rxcie;
     4d2:	87 e0       	ldi	r24, 0x07	; 7
     4d4:	80 93 60 01 	sts	0x0160, r24
  _udre = udre;
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	80 93 61 01 	sts	0x0161, r24
  _u2x = u2x;
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	80 93 62 01 	sts	0x0162, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
     4e4:	08 95       	ret

000004e6 <_ZN5Print5writeEPKc>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	8c 01       	movw	r16, r24
     4f0:	eb 01       	movw	r28, r22
  while (*str)
     4f2:	08 c0       	rjmp	.+16     	; 0x504 <_ZN5Print5writeEPKc+0x1e>
    write(*str++);
     4f4:	d8 01       	movw	r26, r16
     4f6:	ed 91       	ld	r30, X+
     4f8:	fc 91       	ld	r31, X
     4fa:	01 90       	ld	r0, Z+
     4fc:	f0 81       	ld	r31, Z
     4fe:	e0 2d       	mov	r30, r0
     500:	c8 01       	movw	r24, r16
     502:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
     504:	69 91       	ld	r22, Y+
     506:	66 23       	and	r22, r22
     508:	a9 f7       	brne	.-22     	; 0x4f4 <_ZN5Print5writeEPKc+0xe>
    write(*str++);
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	08 95       	ret

00000514 <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	7c 01       	movw	r14, r24
     522:	8b 01       	movw	r16, r22
     524:	ea 01       	movw	r28, r20
  while (size--)
     526:	0c c0       	rjmp	.+24     	; 0x540 <_ZN5Print5writeEPKhj+0x2c>
    write(*buffer++);
     528:	d8 01       	movw	r26, r16
     52a:	6d 91       	ld	r22, X+
     52c:	8d 01       	movw	r16, r26
     52e:	d7 01       	movw	r26, r14
     530:	ed 91       	ld	r30, X+
     532:	fc 91       	ld	r31, X
     534:	01 90       	ld	r0, Z+
     536:	f0 81       	ld	r31, Z
     538:	e0 2d       	mov	r30, r0
     53a:	c7 01       	movw	r24, r14
     53c:	09 95       	icall
     53e:	21 97       	sbiw	r28, 0x01	; 1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
     540:	20 97       	sbiw	r28, 0x00	; 0
     542:	91 f7       	brne	.-28     	; 0x528 <_ZN5Print5writeEPKhj+0x14>
    write(*buffer++);
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	08 95       	ret

00000552 <_ZN5Print5printERK6String>:

void Print::print(const String &s)
{
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	7c 01       	movw	r14, r24
     564:	6b 01       	movw	r12, r22
  for (int i = 0; i < s.length(); i++) {
     566:	00 e0       	ldi	r16, 0x00	; 0
     568:	10 e0       	ldi	r17, 0x00	; 0
     56a:	0f c0       	rjmp	.+30     	; 0x58a <_ZN5Print5printERK6String+0x38>
    write(s[i]);
     56c:	d7 01       	movw	r26, r14
     56e:	ed 91       	ld	r30, X+
     570:	fc 91       	ld	r31, X
     572:	c0 81       	ld	r28, Z
     574:	d1 81       	ldd	r29, Z+1	; 0x01
     576:	c6 01       	movw	r24, r12
     578:	b8 01       	movw	r22, r16
     57a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZNK6StringixEj>
     57e:	68 2f       	mov	r22, r24
     580:	c7 01       	movw	r24, r14
     582:	fe 01       	movw	r30, r28
     584:	09 95       	icall
    write(*buffer++);
}

void Print::print(const String &s)
{
  for (int i = 0; i < s.length(); i++) {
     586:	0f 5f       	subi	r16, 0xFF	; 255
     588:	1f 4f       	sbci	r17, 0xFF	; 255
     58a:	f6 01       	movw	r30, r12
     58c:	84 81       	ldd	r24, Z+4	; 0x04
     58e:	95 81       	ldd	r25, Z+5	; 0x05
     590:	08 17       	cp	r16, r24
     592:	19 07       	cpc	r17, r25
     594:	58 f3       	brcs	.-42     	; 0x56c <_ZN5Print5printERK6String+0x1a>
    write(s[i]);
  }
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	08 95       	ret

000005a8 <_ZN5Print5printEPKc>:

void Print::print(const char str[])
{
  write(str);
     5a8:	dc 01       	movw	r26, r24
     5aa:	ed 91       	ld	r30, X+
     5ac:	fc 91       	ld	r31, X
     5ae:	02 80       	ldd	r0, Z+2	; 0x02
     5b0:	f3 81       	ldd	r31, Z+3	; 0x03
     5b2:	e0 2d       	mov	r30, r0
     5b4:	09 95       	icall
}
     5b6:	08 95       	ret

000005b8 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
{
     5b8:	6f 92       	push	r6
     5ba:	7f 92       	push	r7
     5bc:	8f 92       	push	r8
     5be:	9f 92       	push	r9
     5c0:	af 92       	push	r10
     5c2:	bf 92       	push	r11
     5c4:	cf 92       	push	r12
     5c6:	df 92       	push	r13
     5c8:	ef 92       	push	r14
     5ca:	ff 92       	push	r15
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	a0 97       	sbiw	r28, 0x20	; 32
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	3c 01       	movw	r6, r24
     5e6:	db 01       	movw	r26, r22
     5e8:	ca 01       	movw	r24, r20
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;

  if (n == 0) {
     5ea:	41 15       	cp	r20, r1
     5ec:	51 05       	cpc	r21, r1
     5ee:	61 05       	cpc	r22, r1
     5f0:	71 05       	cpc	r23, r1
     5f2:	51 f4       	brne	.+20     	; 0x608 <_ZN5Print11printNumberEmh+0x50>
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
     5f4:	c3 01       	movw	r24, r6
     5f6:	40 e3       	ldi	r20, 0x30	; 48
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN5Print5printEli>
     606:	41 c0       	rjmp	.+130    	; 0x68a <_ZN5Print11printNumberEmh+0xd2>
     608:	8e 01       	movw	r16, r28
     60a:	0f 5f       	subi	r16, 0xFF	; 255
     60c:	1f 4f       	sbci	r17, 0xFF	; 255
void Print::printNumber(unsigned long n, uint8_t base)
{
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;

  if (n == 0) {
     60e:	cc 24       	eor	r12, r12
     610:	dd 24       	eor	r13, r13
     612:	76 01       	movw	r14, r12
    print('0');
    return;
  } 

  while (n > 0) {
    buf[i++] = n % base;
     614:	82 2e       	mov	r8, r18
     616:	99 24       	eor	r9, r9
     618:	aa 24       	eor	r10, r10
     61a:	bb 24       	eor	r11, r11
     61c:	bc 01       	movw	r22, r24
     61e:	cd 01       	movw	r24, r26
     620:	a5 01       	movw	r20, r10
     622:	94 01       	movw	r18, r8
     624:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <__udivmodsi4>
     628:	f8 01       	movw	r30, r16
     62a:	61 93       	st	Z+, r22
     62c:	8f 01       	movw	r16, r30
     62e:	08 94       	sec
     630:	c1 1c       	adc	r12, r1
     632:	d1 1c       	adc	r13, r1
     634:	e1 1c       	adc	r14, r1
     636:	f1 1c       	adc	r15, r1
    n /= base;
     638:	c9 01       	movw	r24, r18
     63a:	da 01       	movw	r26, r20
  if (n == 0) {
    print('0');
    return;
  } 

  while (n > 0) {
     63c:	00 97       	sbiw	r24, 0x00	; 0
     63e:	a1 05       	cpc	r26, r1
     640:	b1 05       	cpc	r27, r1
     642:	61 f7       	brne	.-40     	; 0x61c <_ZN5Print11printNumberEmh+0x64>
     644:	14 c0       	rjmp	.+40     	; 0x66e <_ZN5Print11printNumberEmh+0xb6>
  println();
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
     646:	e1 e0       	ldi	r30, 0x01	; 1
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ec 0f       	add	r30, r28
     64c:	fd 1f       	adc	r31, r29
     64e:	ec 0d       	add	r30, r12
     650:	fd 1d       	adc	r31, r13
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    print((char) (buf[i - 1] < 10 ?
     652:	40 81       	ld	r20, Z
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
     654:	4a 30       	cpi	r20, 0x0A	; 10
     656:	10 f4       	brcc	.+4      	; 0x65c <_ZN5Print11printNumberEmh+0xa4>
     658:	40 5d       	subi	r20, 0xD0	; 208
     65a:	01 c0       	rjmp	.+2      	; 0x65e <_ZN5Print11printNumberEmh+0xa6>
     65c:	49 5c       	subi	r20, 0xC9	; 201
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	c3 01       	movw	r24, r6
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN5Print5printEli>
     66e:	08 94       	sec
     670:	c1 08       	sbc	r12, r1
     672:	d1 08       	sbc	r13, r1
     674:	e1 08       	sbc	r14, r1
     676:	f1 08       	sbc	r15, r1
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
     678:	ff ef       	ldi	r31, 0xFF	; 255
     67a:	cf 16       	cp	r12, r31
     67c:	ff ef       	ldi	r31, 0xFF	; 255
     67e:	df 06       	cpc	r13, r31
     680:	ff ef       	ldi	r31, 0xFF	; 255
     682:	ef 06       	cpc	r14, r31
     684:	ff ef       	ldi	r31, 0xFF	; 255
     686:	ff 06       	cpc	r15, r31
     688:	f1 f6       	brne	.-68     	; 0x646 <_ZN5Print11printNumberEmh+0x8e>
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
     68a:	a0 96       	adiw	r28, 0x20	; 32
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	bf 90       	pop	r11
     6a8:	af 90       	pop	r10
     6aa:	9f 90       	pop	r9
     6ac:	8f 90       	pop	r8
     6ae:	7f 90       	pop	r7
     6b0:	6f 90       	pop	r6
     6b2:	08 95       	ret

000006b4 <_ZN5Print5printEmi>:
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
     6b4:	21 15       	cp	r18, r1
     6b6:	31 05       	cpc	r19, r1
     6b8:	49 f4       	brne	.+18     	; 0x6cc <_ZN5Print5printEmi+0x18>
     6ba:	dc 01       	movw	r26, r24
     6bc:	ed 91       	ld	r30, X+
     6be:	fc 91       	ld	r31, X
     6c0:	01 90       	ld	r0, Z+
     6c2:	f0 81       	ld	r31, Z
     6c4:	e0 2d       	mov	r30, r0
     6c6:	64 2f       	mov	r22, r20
     6c8:	09 95       	icall
     6ca:	08 95       	ret
  else printNumber(n, base);
     6cc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN5Print11printNumberEmh>
     6d0:	08 95       	ret

000006d2 <_ZN5Print5printEji>:
{
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
     6d2:	9a 01       	movw	r18, r20
  print((unsigned long) n, base);
     6d4:	ab 01       	movw	r20, r22
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_ZN5Print5printEmi>
}
     6de:	08 95       	ret

000006e0 <_ZN5Print5printEhi>:
{
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
     6e0:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
     6e2:	46 2f       	mov	r20, r22
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_ZN5Print5printEmi>
}
     6ee:	08 95       	ret

000006f0 <_ZN5Print5printEli>:
{
  print((unsigned long) n, base);
}

void Print::print(long n, int base)
{
     6f0:	cf 92       	push	r12
     6f2:	df 92       	push	r13
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ec 01       	movw	r28, r24
     6fe:	6a 01       	movw	r12, r20
     700:	7b 01       	movw	r14, r22
  if (base == 0) {
     702:	21 15       	cp	r18, r1
     704:	31 05       	cpc	r19, r1
     706:	41 f4       	brne	.+16     	; 0x718 <_ZN5Print5printEli+0x28>
    write(n);
     708:	e8 81       	ld	r30, Y
     70a:	f9 81       	ldd	r31, Y+1	; 0x01
     70c:	01 90       	ld	r0, Z+
     70e:	f0 81       	ld	r31, Z
     710:	e0 2d       	mov	r30, r0
     712:	64 2f       	mov	r22, r20
     714:	09 95       	icall
     716:	1b c0       	rjmp	.+54     	; 0x74e <_ZN5Print5printEli+0x5e>
  } else if (base == 10) {
     718:	2a 30       	cpi	r18, 0x0A	; 10
     71a:	31 05       	cpc	r19, r1
     71c:	b1 f4       	brne	.+44     	; 0x74a <_ZN5Print5printEli+0x5a>
    if (n < 0) {
     71e:	77 ff       	sbrs	r23, 7
     720:	10 c0       	rjmp	.+32     	; 0x742 <_ZN5Print5printEli+0x52>
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
     722:	4d e2       	ldi	r20, 0x2D	; 45
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN5Print5printEli>
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
      print('-');
      n = -n;
     732:	f0 94       	com	r15
     734:	e0 94       	com	r14
     736:	d0 94       	com	r13
     738:	c0 94       	com	r12
     73a:	c1 1c       	adc	r12, r1
     73c:	d1 1c       	adc	r13, r1
     73e:	e1 1c       	adc	r14, r1
     740:	f1 1c       	adc	r15, r1
    }
    printNumber(n, 10);
     742:	ce 01       	movw	r24, r28
     744:	b7 01       	movw	r22, r14
     746:	a6 01       	movw	r20, r12
     748:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    printNumber(n, base);
     74a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN5Print11printNumberEmh>
  }
}
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	08 95       	ret

0000075c <_ZN5Print5printEii>:
{
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
     75c:	9a 01       	movw	r18, r20
  print((long) n, base);
     75e:	fb 01       	movw	r30, r22
     760:	af 01       	movw	r20, r30
     762:	66 27       	eor	r22, r22
     764:	57 fd       	sbrc	r21, 7
     766:	60 95       	com	r22
     768:	76 2f       	mov	r23, r22
     76a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN5Print5printEli>
}
     76e:	08 95       	ret

00000770 <_ZN5Print5printEci>:
{
  write(str);
}

void Print::print(char c, int base)
{
     770:	9a 01       	movw	r18, r20
  print((long) c, base);
     772:	46 2f       	mov	r20, r22
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN5Print5printEli>
}
     77e:	08 95       	ret

00000780 <_ZN5Print7printlnEv>:
{
  printFloat(n, digits);
}

void Print::println(void)
{
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	ec 01       	movw	r28, r24
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
     786:	4d e0       	ldi	r20, 0x0D	; 13
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN5Print5printEli>
     796:	ce 01       	movw	r24, r28
     798:	4a e0       	ldi	r20, 0x0A	; 10
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN5Print5printEli>

void Print::println(void)
{
  print('\r');
  print('\n');  
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	08 95       	ret

000007ae <_ZN5Print7printlnEmi>:
  print(n, base);
  println();
}

void Print::println(unsigned long n, int base)
{
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	ec 01       	movw	r28, r24
  print(n, base);
     7b4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_ZN5Print5printEmi>
  println();
     7b8:	ce 01       	movw	r24, r28
     7ba:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print7printlnEv>
}
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <_ZN5Print7printlnEji>:
  print(n, base);
  println();
}

void Print::println(unsigned int n, int base)
{
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	ec 01       	movw	r28, r24
     7ca:	9a 01       	movw	r18, r20
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
  print((unsigned long) n, base);
     7cc:	ab 01       	movw	r20, r22
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_ZN5Print5printEmi>
}

void Print::println(unsigned int n, int base)
{
  print(n, base);
  println();
     7d6:	ce 01       	movw	r24, r28
     7d8:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print7printlnEv>
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <_ZN5Print7printlnEhi>:
  print(c, base);
  println();
}

void Print::println(unsigned char b, int base)
{
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	ec 01       	movw	r28, r24
     7e8:	9a 01       	movw	r18, r20
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
  print((unsigned long) b, base);
     7ea:	46 2f       	mov	r20, r22
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_ZN5Print5printEmi>
}

void Print::println(unsigned char b, int base)
{
  print(b, base);
  println();
     7f6:	ce 01       	movw	r24, r28
     7f8:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print7printlnEv>
}
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	08 95       	ret

00000802 <_ZN5Print7printlnEPKc>:
  print(s);
  println();
}

void Print::println(const char c[])
{
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ec 01       	movw	r28, r24
  print(c);
     808:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN5Print5printEPKc>
  println();
     80c:	ce 01       	movw	r24, r28
     80e:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print7printlnEv>
}
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <_ZN5Print7printlnERK6String>:
  print('\r');
  print('\n');  
}

void Print::println(const String &s)
{
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	ec 01       	movw	r28, r24
  print(s);
     81e:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN5Print5printERK6String>
  println();
     822:	ce 01       	movw	r24, r28
     824:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print7printlnEv>
}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <_ZN5Print7printlnEli>:
  print(n, base);
  println();
}

void Print::println(long n, int base)
{
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	ec 01       	movw	r28, r24
  print(n, base);
     834:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN5Print5printEli>
  println();
     838:	ce 01       	movw	r24, r28
     83a:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print7printlnEv>
}
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <_ZN5Print7printlnEii>:
  print(b, base);
  println();
}

void Print::println(int n, int base)
{
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	ec 01       	movw	r28, r24
     84a:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
     84c:	cb 01       	movw	r24, r22
     84e:	ac 01       	movw	r20, r24
     850:	66 27       	eor	r22, r22
     852:	57 fd       	sbrc	r21, 7
     854:	60 95       	com	r22
     856:	76 2f       	mov	r23, r22
     858:	ce 01       	movw	r24, r28
     85a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN5Print5printEli>
}

void Print::println(int n, int base)
{
  print(n, base);
  println();
     85e:	ce 01       	movw	r24, r28
     860:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print7printlnEv>
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <_ZN5Print7printlnEci>:
  print(c);
  println();
}

void Print::println(char c, int base)
{
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
     870:	9a 01       	movw	r18, r20
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
     872:	46 2f       	mov	r20, r22
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN5Print5printEli>
}

void Print::println(char c, int base)
{
  print(c, base);
  println();
     87e:	ce 01       	movw	r24, r28
     880:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print7printlnEv>
}
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <_ZN5Print10printFloatEdh>:
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void Print::printFloat(double number, uint8_t digits) 
{ 
     88a:	8f 92       	push	r8
     88c:	9f 92       	push	r9
     88e:	bf 92       	push	r11
     890:	cf 92       	push	r12
     892:	df 92       	push	r13
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	4c 01       	movw	r8, r24
     8a2:	6a 01       	movw	r12, r20
     8a4:	7b 01       	movw	r14, r22
     8a6:	b2 2e       	mov	r11, r18
  // Handle negative numbers
  if (number < 0.0)
     8a8:	cb 01       	movw	r24, r22
     8aa:	ba 01       	movw	r22, r20
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	a9 01       	movw	r20, r18
     8b2:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__cmpsf2>
     8b6:	87 ff       	sbrs	r24, 7
     8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <_ZN5Print10printFloatEdh+0x4a>
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
     8ba:	c4 01       	movw	r24, r8
     8bc:	4d e2       	ldi	r20, 0x2D	; 45
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN5Print5printEli>
{ 
  // Handle negative numbers
  if (number < 0.0)
  {
     print('-');
     number = -number;
     8cc:	f7 fa       	bst	r15, 7
     8ce:	f0 94       	com	r15
     8d0:	f7 f8       	bld	r15, 7
     8d2:	f0 94       	com	r15
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     8d4:	c0 e0       	ldi	r28, 0x00	; 0
     print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     8de:	13 c0       	rjmp	.+38     	; 0x906 <__stack+0x7>
    rounding /= 10.0;
     8e0:	fa 01       	movw	r30, r20
     8e2:	b9 01       	movw	r22, r18
     8e4:	8f 2f       	mov	r24, r31
     8e6:	94 2f       	mov	r25, r20
     8e8:	a7 2f       	mov	r26, r23
     8ea:	b2 2f       	mov	r27, r18
     8ec:	bc 01       	movw	r22, r24
     8ee:	cd 01       	movw	r24, r26
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e2       	ldi	r20, 0x20	; 32
     8f6:	51 e4       	ldi	r21, 0x41	; 65
     8f8:	0e 94 a7 1c 	call	0x394e	; 0x394e <__divsf3>
     8fc:	56 2f       	mov	r21, r22
     8fe:	47 2f       	mov	r20, r23
     900:	38 2f       	mov	r19, r24
     902:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     904:	cf 5f       	subi	r28, 0xFF	; 255
     906:	cb 15       	cp	r28, r11
     908:	59 f7       	brne	.-42     	; 0x8e0 <_ZN5Print10printFloatEdh+0x56>
    rounding /= 10.0;
  
  number += rounding;
     90a:	c7 01       	movw	r24, r14
     90c:	b6 01       	movw	r22, r12
     90e:	da 01       	movw	r26, r20
     910:	f9 01       	movw	r30, r18
     912:	0b 2f       	mov	r16, r27
     914:	14 2f       	mov	r17, r20
     916:	2f 2f       	mov	r18, r31
     918:	3e 2f       	mov	r19, r30
     91a:	a9 01       	movw	r20, r18
     91c:	98 01       	movw	r18, r16
     91e:	0e 94 3f 1c 	call	0x387e	; 0x387e <__addsf3>
     922:	f6 2e       	mov	r15, r22
     924:	07 2f       	mov	r16, r23
     926:	18 2f       	mov	r17, r24
     928:	d9 2f       	mov	r29, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     92a:	86 2f       	mov	r24, r22
     92c:	90 2f       	mov	r25, r16
     92e:	a1 2f       	mov	r26, r17
     930:	bd 2f       	mov	r27, r29
     932:	bc 01       	movw	r22, r24
     934:	cd 01       	movw	r24, r26
     936:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__fixunssfsi>
     93a:	c6 2f       	mov	r28, r22
     93c:	c7 2e       	mov	r12, r23
     93e:	e8 2e       	mov	r14, r24
     940:	d9 2e       	mov	r13, r25
  double remainder = number - (double)int_part;
     942:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <__floatunsisf>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
     94a:	8f 2d       	mov	r24, r15
     94c:	90 2f       	mov	r25, r16
     94e:	a1 2f       	mov	r26, r17
     950:	bd 2f       	mov	r27, r29
     952:	bc 01       	movw	r22, r24
     954:	cd 01       	movw	r24, r26
     956:	0e 94 3e 1c 	call	0x387c	; 0x387c <__subsf3>
     95a:	f6 2e       	mov	r15, r22
     95c:	07 2f       	mov	r16, r23
     95e:	d8 2f       	mov	r29, r24
     960:	19 2f       	mov	r17, r25
  print(int_part);
     962:	c4 01       	movw	r24, r8
     964:	4c 2f       	mov	r20, r28
     966:	5c 2d       	mov	r21, r12
     968:	6e 2d       	mov	r22, r14
     96a:	7d 2d       	mov	r23, r13
     96c:	2a e0       	ldi	r18, 0x0A	; 10
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_ZN5Print5printEmi>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
     974:	bb 20       	and	r11, r11
     976:	09 f4       	brne	.+2      	; 0x97a <__stack+0x7b>
     978:	3f c0       	rjmp	.+126    	; 0x9f8 <__stack+0xf9>
    print("."); 
     97a:	c4 01       	movw	r24, r8
     97c:	64 e2       	ldi	r22, 0x24	; 36
     97e:	71 e0       	ldi	r23, 0x01	; 1
     980:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN5Print5printEPKc>
     984:	39 c0       	rjmp	.+114    	; 0x9f8 <__stack+0xf9>

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     986:	8f 2d       	mov	r24, r15
     988:	90 2f       	mov	r25, r16
     98a:	ad 2f       	mov	r26, r29
     98c:	b1 2f       	mov	r27, r17
     98e:	bc 01       	movw	r22, r24
     990:	cd 01       	movw	r24, r26
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	40 e2       	ldi	r20, 0x20	; 32
     998:	51 e4       	ldi	r21, 0x41	; 65
     99a:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__mulsf3>
     99e:	eb 01       	movw	r28, r22
     9a0:	18 2f       	mov	r17, r24
     9a2:	09 2f       	mov	r16, r25
    int toPrint = int(remainder);
     9a4:	98 01       	movw	r18, r16
     9a6:	86 2f       	mov	r24, r22
     9a8:	9d 2f       	mov	r25, r29
     9aa:	a3 2f       	mov	r26, r19
     9ac:	b2 2f       	mov	r27, r18
     9ae:	bc 01       	movw	r22, r24
     9b0:	cd 01       	movw	r24, r26
     9b2:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__fixsfsi>
     9b6:	6b 01       	movw	r12, r22
     9b8:	7c 01       	movw	r14, r24
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
     9ba:	ee 24       	eor	r14, r14
     9bc:	d7 fc       	sbrc	r13, 7
     9be:	e0 94       	com	r14
     9c0:	fe 2c       	mov	r15, r14
     9c2:	c4 01       	movw	r24, r8
     9c4:	b7 01       	movw	r22, r14
     9c6:	a6 01       	movw	r20, r12
     9c8:	2a e0       	ldi	r18, 0x0A	; 10
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN5Print5printEli>
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
     9d0:	c7 01       	movw	r24, r14
     9d2:	b6 01       	movw	r22, r12
     9d4:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__floatsisf>
     9d8:	9b 01       	movw	r18, r22
     9da:	ac 01       	movw	r20, r24
     9dc:	b8 01       	movw	r22, r16
     9de:	8c 2f       	mov	r24, r28
     9e0:	9d 2f       	mov	r25, r29
     9e2:	a7 2f       	mov	r26, r23
     9e4:	b6 2f       	mov	r27, r22
     9e6:	bc 01       	movw	r22, r24
     9e8:	cd 01       	movw	r24, r26
     9ea:	0e 94 3e 1c 	call	0x387c	; 0x387c <__subsf3>
     9ee:	f6 2e       	mov	r15, r22
     9f0:	07 2f       	mov	r16, r23
     9f2:	d8 2f       	mov	r29, r24
     9f4:	19 2f       	mov	r17, r25
     9f6:	ba 94       	dec	r11
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     9f8:	bb 20       	and	r11, r11
     9fa:	29 f6       	brne	.-118    	; 0x986 <__stack+0x87>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	9f 90       	pop	r9
     a10:	8f 90       	pop	r8
     a12:	08 95       	ret

00000a14 <_ZN5Print5printEdi>:
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
     a14:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Print10printFloatEdh>
}
     a18:	08 95       	ret

00000a1a <_ZN5Print7printlnEdi>:
  print(n, base);
  println();
}

void Print::println(double n, int digits)
{
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ec 01       	movw	r28, r24
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
     a20:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Print10printFloatEdh>
}

void Print::println(double n, int digits)
{
  print(n, digits);
  println();
     a24:	ce 01       	movw	r24, r28
     a26:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print7printlnEv>
}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
     a30:	3f 92       	push	r3
     a32:	4f 92       	push	r4
     a34:	5f 92       	push	r5
     a36:	6f 92       	push	r6
     a38:	7f 92       	push	r7
     a3a:	8f 92       	push	r8
     a3c:	9f 92       	push	r9
     a3e:	af 92       	push	r10
     a40:	bf 92       	push	r11
     a42:	cf 92       	push	r12
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	00 d0       	rcall	.+0      	; 0xa54 <_Z4tonehjm+0x24>
     a54:	00 d0       	rcall	.+0      	; 0xa56 <_Z4tonehjm+0x26>
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	a8 2f       	mov	r26, r24
     a5c:	8b 01       	movw	r16, r22
     a5e:	29 83       	std	Y+1, r18	; 0x01
     a60:	3a 83       	std	Y+2, r19	; 0x02
     a62:	4b 83       	std	Y+3, r20	; 0x03
     a64:	5c 83       	std	Y+4, r21	; 0x04
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     a66:	80 91 30 01 	lds	r24, 0x0130
     a6a:	8a 17       	cp	r24, r26
     a6c:	21 f0       	breq	.+8      	; 0xa76 <_Z4tonehjm+0x46>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
     a6e:	8f 3f       	cpi	r24, 0xFF	; 255
     a70:	09 f0       	breq	.+2      	; 0xa74 <_Z4tonehjm+0x44>
     a72:	d3 c1       	rjmp	.+934    	; 0xe1a <_Z4tonehjm+0x3ea>
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <_Z4tonehjm+0x4e>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
     a76:	e2 ec       	ldi	r30, 0xC2	; 194
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	34 90       	lpm	r3, Z
     a7c:	7f c0       	rjmp	.+254    	; 0xb7c <_Z4tonehjm+0x14c>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
     a7e:	a0 93 30 01 	sts	0x0130, r26
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     a82:	e2 ec       	ldi	r30, 0xC2	; 194
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	34 90       	lpm	r3, Z
      break;
    }
  }
  
  if (_timer != -1)
     a88:	8f ef       	ldi	r24, 0xFF	; 255
     a8a:	38 16       	cp	r3, r24
     a8c:	09 f4       	brne	.+2      	; 0xa90 <_Z4tonehjm+0x60>
     a8e:	c5 c1       	rjmp	.+906    	; 0xe1a <_Z4tonehjm+0x3ea>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	39 16       	cp	r3, r25
     a94:	39 f1       	breq	.+78     	; 0xae4 <_Z4tonehjm+0xb4>
     a96:	b2 e0       	ldi	r27, 0x02	; 2
     a98:	3b 16       	cp	r3, r27
     a9a:	09 f4       	brne	.+2      	; 0xa9e <_Z4tonehjm+0x6e>
     a9c:	49 c0       	rjmp	.+146    	; 0xb30 <_Z4tonehjm+0x100>
     a9e:	33 20       	and	r3, r3
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <_Z4tonehjm+0x74>
     aa2:	6c c0       	rjmp	.+216    	; 0xb7c <_Z4tonehjm+0x14c>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
     aa4:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
     aa6:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
     aa8:	84 b5       	in	r24, 0x24	; 36
     aaa:	82 60       	ori	r24, 0x02	; 2
     aac:	84 bd       	out	0x24, r24	; 36
        bitWrite(TCCR0B, CS00, 1);
     aae:	85 b5       	in	r24, 0x25	; 37
     ab0:	81 60       	ori	r24, 0x01	; 1
     ab2:	85 bd       	out	0x25, r24	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
     ab4:	2a 2f       	mov	r18, r26
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	f9 01       	movw	r30, r18
     aba:	e0 57       	subi	r30, 0x70	; 112
     abc:	ff 4f       	sbci	r31, 0xFF	; 255
     abe:	e4 91       	lpm	r30, Z
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	e2 55       	subi	r30, 0x52	; 82
     ac8:	ff 4f       	sbci	r31, 0xFF	; 255
     aca:	85 91       	lpm	r24, Z+
     acc:	94 91       	lpm	r25, Z
     ace:	80 93 f6 01 	sts	0x01F6, r24
     ad2:	90 93 f7 01 	sts	0x01F7, r25
        timer0_pin_mask = digitalPinToBitMask(_pin);
     ad6:	24 58       	subi	r18, 0x84	; 132
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	f9 01       	movw	r30, r18
     adc:	24 91       	lpm	r18, Z
     ade:	20 93 f5 01 	sts	0x01F5, r18
     ae2:	4e c0       	rjmp	.+156    	; 0xb80 <_Z4tonehjm+0x150>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
     ae4:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;
     ae8:	10 92 81 00 	sts	0x0081, r1
        bitWrite(TCCR1B, WGM12, 1);
     aec:	80 91 81 00 	lds	r24, 0x0081
     af0:	88 60       	ori	r24, 0x08	; 8
     af2:	80 93 81 00 	sts	0x0081, r24
        bitWrite(TCCR1B, CS10, 1);
     af6:	80 91 81 00 	lds	r24, 0x0081
     afa:	81 60       	ori	r24, 0x01	; 1
     afc:	80 93 81 00 	sts	0x0081, r24
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
     b00:	2a 2f       	mov	r18, r26
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	f9 01       	movw	r30, r18
     b06:	e0 57       	subi	r30, 0x70	; 112
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	e4 91       	lpm	r30, Z
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	ee 0f       	add	r30, r30
     b10:	ff 1f       	adc	r31, r31
     b12:	e2 55       	subi	r30, 0x52	; 82
     b14:	ff 4f       	sbci	r31, 0xFF	; 255
     b16:	85 91       	lpm	r24, Z+
     b18:	94 91       	lpm	r25, Z
     b1a:	80 93 ef 01 	sts	0x01EF, r24
     b1e:	90 93 f0 01 	sts	0x01F0, r25
        timer1_pin_mask = digitalPinToBitMask(_pin);
     b22:	24 58       	subi	r18, 0x84	; 132
     b24:	3f 4f       	sbci	r19, 0xFF	; 255
     b26:	f9 01       	movw	r30, r18
     b28:	24 91       	lpm	r18, Z
     b2a:	20 93 ee 01 	sts	0x01EE, r18
     b2e:	28 c0       	rjmp	.+80     	; 0xb80 <_Z4tonehjm+0x150>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
     b30:	10 92 b0 00 	sts	0x00B0, r1
        TCCR2B = 0;
     b34:	10 92 b1 00 	sts	0x00B1, r1
        bitWrite(TCCR2A, WGM21, 1);
     b38:	80 91 b0 00 	lds	r24, 0x00B0
     b3c:	82 60       	ori	r24, 0x02	; 2
     b3e:	80 93 b0 00 	sts	0x00B0, r24
        bitWrite(TCCR2B, CS20, 1);
     b42:	80 91 b1 00 	lds	r24, 0x00B1
     b46:	81 60       	ori	r24, 0x01	; 1
     b48:	80 93 b1 00 	sts	0x00B1, r24
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
     b4c:	2a 2f       	mov	r18, r26
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	f9 01       	movw	r30, r18
     b52:	e0 57       	subi	r30, 0x70	; 112
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	e4 91       	lpm	r30, Z
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	ee 0f       	add	r30, r30
     b5c:	ff 1f       	adc	r31, r31
     b5e:	e2 55       	subi	r30, 0x52	; 82
     b60:	ff 4f       	sbci	r31, 0xFF	; 255
     b62:	85 91       	lpm	r24, Z+
     b64:	94 91       	lpm	r25, Z
     b66:	80 93 e8 01 	sts	0x01E8, r24
     b6a:	90 93 e9 01 	sts	0x01E9, r25
        timer2_pin_mask = digitalPinToBitMask(_pin);
     b6e:	24 58       	subi	r18, 0x84	; 132
     b70:	3f 4f       	sbci	r19, 0xFF	; 255
     b72:	f9 01       	movw	r30, r18
     b74:	24 91       	lpm	r18, Z
     b76:	20 93 e7 01 	sts	0x01E7, r18
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <_Z4tonehjm+0x150>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
     b7c:	37 fc       	sbrc	r3, 7
     b7e:	4d c1       	rjmp	.+666    	; 0xe1a <_Z4tonehjm+0x3ea>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
     b80:	8a 2f       	mov	r24, r26
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	0e 94 e5 09 	call	0x13ca	; 0x13ca <pinMode>
     b88:	48 01       	movw	r8, r16
     b8a:	aa 24       	eor	r10, r10
     b8c:	bb 24       	eor	r11, r11
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	72 e1       	ldi	r23, 0x12	; 18
     b92:	8a e7       	ldi	r24, 0x7A	; 122
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	a5 01       	movw	r20, r10
     b98:	94 01       	movw	r18, r8
     b9a:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodsi4>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
     b9e:	33 20       	and	r3, r3
     ba0:	21 f0       	breq	.+8      	; 0xbaa <_Z4tonehjm+0x17a>
     ba2:	f2 e0       	ldi	r31, 0x02	; 2
     ba4:	3f 16       	cp	r3, r31
     ba6:	09 f0       	breq	.+2      	; 0xbaa <_Z4tonehjm+0x17a>
     ba8:	b6 c0       	rjmp	.+364    	; 0xd16 <_Z4tonehjm+0x2e6>
    {
      ocr = F_CPU / frequency / 2 - 1;
     baa:	29 01       	movw	r4, r18
     bac:	3a 01       	movw	r6, r20
     bae:	69 01       	movw	r12, r18
     bb0:	7a 01       	movw	r14, r20
     bb2:	08 94       	sec
     bb4:	c1 08       	sbc	r12, r1
     bb6:	d1 08       	sbc	r13, r1
     bb8:	e1 08       	sbc	r14, r1
     bba:	f1 08       	sbc	r15, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	c8 16       	cp	r12, r24
     bc0:	d1 04       	cpc	r13, r1
     bc2:	e1 04       	cpc	r14, r1
     bc4:	f1 04       	cpc	r15, r1
     bc6:	09 f0       	breq	.+2      	; 0xbca <_Z4tonehjm+0x19a>
     bc8:	08 f4       	brcc	.+2      	; 0xbcc <_Z4tonehjm+0x19c>
     bca:	98 c0       	rjmp	.+304    	; 0xcfc <_Z4tonehjm+0x2cc>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
     bcc:	60 e4       	ldi	r22, 0x40	; 64
     bce:	72 e4       	ldi	r23, 0x42	; 66
     bd0:	8f e0       	ldi	r24, 0x0F	; 15
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	a5 01       	movw	r20, r10
     bd6:	94 01       	movw	r18, r8
     bd8:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodsi4>
     bdc:	69 01       	movw	r12, r18
     bde:	7a 01       	movw	r14, r20
     be0:	08 94       	sec
     be2:	c1 08       	sbc	r12, r1
     be4:	d1 08       	sbc	r13, r1
     be6:	e1 08       	sbc	r14, r1
     be8:	f1 08       	sbc	r15, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
     bea:	92 e0       	ldi	r25, 0x02	; 2
     bec:	39 16       	cp	r3, r25
     bee:	c9 f4       	brne	.+50     	; 0xc22 <_Z4tonehjm+0x1f2>
     bf0:	af ef       	ldi	r26, 0xFF	; 255
     bf2:	ca 16       	cp	r12, r26
     bf4:	d1 04       	cpc	r13, r1
     bf6:	e1 04       	cpc	r14, r1
     bf8:	f1 04       	cpc	r15, r1
     bfa:	09 f0       	breq	.+2      	; 0xbfe <_Z4tonehjm+0x1ce>
     bfc:	08 f4       	brcc	.+2      	; 0xc00 <_Z4tonehjm+0x1d0>
     bfe:	85 c0       	rjmp	.+266    	; 0xd0a <_Z4tonehjm+0x2da>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
     c00:	60 e9       	ldi	r22, 0x90	; 144
     c02:	70 ed       	ldi	r23, 0xD0	; 208
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	a5 01       	movw	r20, r10
     c0a:	94 01       	movw	r18, r8
     c0c:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodsi4>
     c10:	69 01       	movw	r12, r18
     c12:	7a 01       	movw	r14, r20
     c14:	08 94       	sec
     c16:	c1 08       	sbc	r12, r1
     c18:	d1 08       	sbc	r13, r1
     c1a:	e1 08       	sbc	r14, r1
     c1c:	f1 08       	sbc	r15, r1
          prescalarbits = 0b011;
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <_Z4tonehjm+0x1f4>
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
     c22:	82 e0       	ldi	r24, 0x02	; 2
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
        }

        if (ocr > 255)
     c24:	bf ef       	ldi	r27, 0xFF	; 255
     c26:	cb 16       	cp	r12, r27
     c28:	d1 04       	cpc	r13, r1
     c2a:	e1 04       	cpc	r14, r1
     c2c:	f1 04       	cpc	r15, r1
     c2e:	09 f0       	breq	.+2      	; 0xc32 <_Z4tonehjm+0x202>
     c30:	08 f4       	brcc	.+2      	; 0xc34 <_Z4tonehjm+0x204>
     c32:	65 c0       	rjmp	.+202    	; 0xcfe <_Z4tonehjm+0x2ce>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
     c34:	68 e4       	ldi	r22, 0x48	; 72
     c36:	78 ee       	ldi	r23, 0xE8	; 232
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	a5 01       	movw	r20, r10
     c3e:	94 01       	movw	r18, r8
     c40:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodsi4>
     c44:	69 01       	movw	r12, r18
     c46:	7a 01       	movw	r14, r20
     c48:	08 94       	sec
     c4a:	c1 08       	sbc	r12, r1
     c4c:	d1 08       	sbc	r13, r1
     c4e:	e1 08       	sbc	r14, r1
     c50:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
     c52:	33 20       	and	r3, r3
     c54:	e1 f0       	breq	.+56     	; 0xc8e <_Z4tonehjm+0x25e>

          if (_timer == 2 && ocr > 255)
     c56:	e2 e0       	ldi	r30, 0x02	; 2
     c58:	3e 16       	cp	r3, r30
     c5a:	d9 f4       	brne	.+54     	; 0xc92 <_Z4tonehjm+0x262>
     c5c:	ff ef       	ldi	r31, 0xFF	; 255
     c5e:	cf 16       	cp	r12, r31
     c60:	d1 04       	cpc	r13, r1
     c62:	e1 04       	cpc	r14, r1
     c64:	f1 04       	cpc	r15, r1
     c66:	09 f0       	breq	.+2      	; 0xc6a <_Z4tonehjm+0x23a>
     c68:	08 f4       	brcc	.+2      	; 0xc6c <_Z4tonehjm+0x23c>
     c6a:	51 c0       	rjmp	.+162    	; 0xd0e <_Z4tonehjm+0x2de>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
     c6c:	64 e2       	ldi	r22, 0x24	; 36
     c6e:	74 ef       	ldi	r23, 0xF4	; 244
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	a5 01       	movw	r20, r10
     c76:	94 01       	movw	r18, r8
     c78:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodsi4>
     c7c:	69 01       	movw	r12, r18
     c7e:	7a 01       	movw	r14, r20
     c80:	08 94       	sec
     c82:	c1 08       	sbc	r12, r1
     c84:	d1 08       	sbc	r13, r1
     c86:	e1 08       	sbc	r14, r1
     c88:	f1 08       	sbc	r15, r1
            prescalarbits = 0b101;
     c8a:	85 e0       	ldi	r24, 0x05	; 5
     c8c:	03 c0       	rjmp	.+6      	; 0xc94 <_Z4tonehjm+0x264>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <_Z4tonehjm+0x264>
     c92:	84 e0       	ldi	r24, 0x04	; 4
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
     c94:	9f ef       	ldi	r25, 0xFF	; 255
     c96:	c9 16       	cp	r12, r25
     c98:	d1 04       	cpc	r13, r1
     c9a:	e1 04       	cpc	r14, r1
     c9c:	f1 04       	cpc	r15, r1
     c9e:	79 f1       	breq	.+94     	; 0xcfe <_Z4tonehjm+0x2ce>
     ca0:	70 f1       	brcs	.+92     	; 0xcfe <_Z4tonehjm+0x2ce>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
     ca2:	62 e1       	ldi	r22, 0x12	; 18
     ca4:	7a e7       	ldi	r23, 0x7A	; 122
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	a5 01       	movw	r20, r10
     cac:	94 01       	movw	r18, r8
     cae:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodsi4>
     cb2:	69 01       	movw	r12, r18
     cb4:	7a 01       	movw	r14, r20
     cb6:	08 94       	sec
     cb8:	c1 08       	sbc	r12, r1
     cba:	d1 08       	sbc	r13, r1
     cbc:	e1 08       	sbc	r14, r1
     cbe:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
     cc0:	33 20       	and	r3, r3
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <_Z4tonehjm+0x298>
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <_Z4tonehjm+0x29a>
     cc8:	86 e0       	ldi	r24, 0x06	; 6
            if (ocr > 255)
     cca:	af ef       	ldi	r26, 0xFF	; 255
     ccc:	ca 16       	cp	r12, r26
     cce:	d1 04       	cpc	r13, r1
     cd0:	e1 04       	cpc	r14, r1
     cd2:	f1 04       	cpc	r15, r1
     cd4:	a1 f0       	breq	.+40     	; 0xcfe <_Z4tonehjm+0x2ce>
     cd6:	98 f0       	brcs	.+38     	; 0xcfe <_Z4tonehjm+0x2ce>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
     cd8:	73 01       	movw	r14, r6
     cda:	62 01       	movw	r12, r4
     cdc:	9a e0       	ldi	r25, 0x0A	; 10
     cde:	f5 94       	asr	r15
     ce0:	e7 94       	ror	r14
     ce2:	d7 94       	ror	r13
     ce4:	c7 94       	ror	r12
     ce6:	9a 95       	dec	r25
     ce8:	d1 f7       	brne	.-12     	; 0xcde <_Z4tonehjm+0x2ae>
     cea:	08 94       	sec
     cec:	c1 08       	sbc	r12, r1
     cee:	d1 08       	sbc	r13, r1
     cf0:	e1 08       	sbc	r14, r1
     cf2:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
     cf4:	33 20       	and	r3, r3
     cf6:	31 f0       	breq	.+12     	; 0xd04 <_Z4tonehjm+0x2d4>
     cf8:	87 e0       	ldi	r24, 0x07	; 7
     cfa:	0a c0       	rjmp	.+20     	; 0xd10 <_Z4tonehjm+0x2e0>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
     cfc:	81 e0       	ldi	r24, 0x01	; 1
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
     cfe:	33 20       	and	r3, r3
     d00:	11 f0       	breq	.+4      	; 0xd06 <_Z4tonehjm+0x2d6>
     d02:	06 c0       	rjmp	.+12     	; 0xd10 <_Z4tonehjm+0x2e0>
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
     d04:	85 e0       	ldi	r24, 0x05	; 5
      }

#if defined(TCCR0B)
      if (_timer == 0)
      {
        TCCR0B = prescalarbits;
     d06:	85 bd       	out	0x25, r24	; 37
     d08:	31 c0       	rjmp	.+98     	; 0xd6c <_Z4tonehjm+0x33c>
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <_Z4tonehjm+0x2e0>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
     d0e:	84 e0       	ldi	r24, 0x04	; 4
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
     d10:	80 93 b1 00 	sts	0x00B1, r24
     d14:	2b c0       	rjmp	.+86     	; 0xd6c <_Z4tonehjm+0x33c>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
     d16:	69 01       	movw	r12, r18
     d18:	7a 01       	movw	r14, r20
     d1a:	08 94       	sec
     d1c:	c1 08       	sbc	r12, r1
     d1e:	d1 08       	sbc	r13, r1
     d20:	e1 08       	sbc	r14, r1
     d22:	f1 08       	sbc	r15, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	cb 16       	cp	r12, r27
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	db 06       	cpc	r13, r27
     d2c:	b1 e0       	ldi	r27, 0x01	; 1
     d2e:	eb 06       	cpc	r14, r27
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	fb 06       	cpc	r15, r27
     d34:	88 f0       	brcs	.+34     	; 0xd58 <_Z4tonehjm+0x328>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
     d36:	68 e4       	ldi	r22, 0x48	; 72
     d38:	78 ee       	ldi	r23, 0xE8	; 232
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a5 01       	movw	r20, r10
     d40:	94 01       	movw	r18, r8
     d42:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodsi4>
     d46:	69 01       	movw	r12, r18
     d48:	7a 01       	movw	r14, r20
     d4a:	08 94       	sec
     d4c:	c1 08       	sbc	r12, r1
     d4e:	d1 08       	sbc	r13, r1
     d50:	e1 08       	sbc	r14, r1
     d52:	f1 08       	sbc	r15, r1
        prescalarbits = 0b011;
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <_Z4tonehjm+0x32a>
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
     d58:	91 e0       	ldi	r25, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
     d5a:	e1 e0       	ldi	r30, 0x01	; 1
     d5c:	3e 16       	cp	r3, r30
     d5e:	31 f4       	brne	.+12     	; 0xd6c <_Z4tonehjm+0x33c>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
     d60:	80 91 81 00 	lds	r24, 0x0081
     d64:	88 7f       	andi	r24, 0xF8	; 248
     d66:	89 2b       	or	r24, r25
     d68:	80 93 81 00 	sts	0x0081, r24

    }
    

    // Calculate the toggle count
    if (duration > 0)
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	ab 81       	ldd	r26, Y+3	; 0x03
     d72:	bc 81       	ldd	r27, Y+4	; 0x04
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	a1 05       	cpc	r26, r1
     d78:	b1 05       	cpc	r27, r1
     d7a:	a1 f0       	breq	.+40     	; 0xda4 <_Z4tonehjm+0x374>
    {
      toggle_count = 2 * frequency * duration / 1000;
     d7c:	b8 01       	movw	r22, r16
     d7e:	66 0f       	add	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	29 81       	ldd	r18, Y+1	; 0x01
     d88:	3a 81       	ldd	r19, Y+2	; 0x02
     d8a:	4b 81       	ldd	r20, Y+3	; 0x03
     d8c:	5c 81       	ldd	r21, Y+4	; 0x04
     d8e:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__mulsi3>
     d92:	28 ee       	ldi	r18, 0xE8	; 232
     d94:	33 e0       	ldi	r19, 0x03	; 3
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <__udivmodsi4>
     d9e:	89 01       	movw	r16, r18
     da0:	9a 01       	movw	r18, r20
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <_Z4tonehjm+0x37a>
    }
    else
    {
      toggle_count = -1;
     da4:	0f ef       	ldi	r16, 0xFF	; 255
     da6:	1f ef       	ldi	r17, 0xFF	; 255
     da8:	98 01       	movw	r18, r16
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	39 16       	cp	r3, r25
     dae:	a1 f0       	breq	.+40     	; 0xdd8 <_Z4tonehjm+0x3a8>
     db0:	a2 e0       	ldi	r26, 0x02	; 2
     db2:	3a 16       	cp	r3, r26
     db4:	19 f1       	breq	.+70     	; 0xdfc <_Z4tonehjm+0x3cc>
     db6:	33 20       	and	r3, r3
     db8:	81 f5       	brne	.+96     	; 0xe1a <_Z4tonehjm+0x3ea>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
     dba:	c7 bc       	out	0x27, r12	; 39
        timer0_toggle_count = toggle_count;
     dbc:	00 93 f8 01 	sts	0x01F8, r16
     dc0:	10 93 f9 01 	sts	0x01F9, r17
     dc4:	20 93 fa 01 	sts	0x01FA, r18
     dc8:	30 93 fb 01 	sts	0x01FB, r19
        bitWrite(TIMSK0, OCIE0A, 1);
     dcc:	80 91 6e 00 	lds	r24, 0x006E
     dd0:	82 60       	ori	r24, 0x02	; 2
     dd2:	80 93 6e 00 	sts	0x006E, r24
        break;
     dd6:	21 c0       	rjmp	.+66     	; 0xe1a <_Z4tonehjm+0x3ea>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
     dd8:	d0 92 89 00 	sts	0x0089, r13
     ddc:	c0 92 88 00 	sts	0x0088, r12
        timer1_toggle_count = toggle_count;
     de0:	00 93 f1 01 	sts	0x01F1, r16
     de4:	10 93 f2 01 	sts	0x01F2, r17
     de8:	20 93 f3 01 	sts	0x01F3, r18
     dec:	30 93 f4 01 	sts	0x01F4, r19
        bitWrite(TIMSK1, OCIE1A, 1);
     df0:	80 91 6f 00 	lds	r24, 0x006F
     df4:	82 60       	ori	r24, 0x02	; 2
     df6:	80 93 6f 00 	sts	0x006F, r24
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <_Z4tonehjm+0x3ea>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
     dfc:	c0 92 b3 00 	sts	0x00B3, r12
        timer2_toggle_count = toggle_count;
     e00:	00 93 ea 01 	sts	0x01EA, r16
     e04:	10 93 eb 01 	sts	0x01EB, r17
     e08:	20 93 ec 01 	sts	0x01EC, r18
     e0c:	30 93 ed 01 	sts	0x01ED, r19
        bitWrite(TIMSK2, OCIE2A, 1);
     e10:	80 91 70 00 	lds	r24, 0x0070
     e14:	82 60       	ori	r24, 0x02	; 2
     e16:	80 93 70 00 	sts	0x0070, r24
        break;
#endif

    }
  }
}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	ff 90       	pop	r15
     e2c:	ef 90       	pop	r14
     e2e:	df 90       	pop	r13
     e30:	cf 90       	pop	r12
     e32:	bf 90       	pop	r11
     e34:	af 90       	pop	r10
     e36:	9f 90       	pop	r9
     e38:	8f 90       	pop	r8
     e3a:	7f 90       	pop	r7
     e3c:	6f 90       	pop	r6
     e3e:	5f 90       	pop	r5
     e40:	4f 90       	pop	r4
     e42:	3f 90       	pop	r3
     e44:	08 95       	ret

00000e46 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	41 f0       	breq	.+16     	; 0xe5a <_Z12disableTimerh+0x14>
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	18 f0       	brcs	.+6      	; 0xe54 <_Z12disableTimerh+0xe>
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	d1 f4       	brne	.+52     	; 0xe86 <_Z12disableTimerh+0x40>
     e52:	09 c0       	rjmp	.+18     	; 0xe66 <_Z12disableTimerh+0x20>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     e54:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     e58:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     e5a:	80 91 6f 00 	lds	r24, 0x006F
     e5e:	8d 7f       	andi	r24, 0xFD	; 253
     e60:	80 93 6f 00 	sts	0x006F, r24
      break;
     e64:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     e66:	80 91 70 00 	lds	r24, 0x0070
     e6a:	8d 7f       	andi	r24, 0xFD	; 253
     e6c:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     e76:	80 91 b1 00 	lds	r24, 0x00B1
     e7a:	88 7f       	andi	r24, 0xF8	; 248
     e7c:	84 60       	ori	r24, 0x04	; 4
     e7e:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     e82:	10 92 b3 00 	sts	0x00B3, r1
     e86:	08 95       	ret

00000e88 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     e88:	cf 93       	push	r28
     e8a:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     e8c:	80 91 30 01 	lds	r24, 0x0130
     e90:	8c 17       	cp	r24, r28
     e92:	39 f4       	brne	.+14     	; 0xea2 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     e94:	e2 ec       	ldi	r30, 0xC2	; 194
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     e9a:	9f ef       	ldi	r25, 0xFF	; 255
     e9c:	90 93 30 01 	sts	0x0130, r25
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
     ea4:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     ea8:	8c 2f       	mov	r24, r28
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	0e 94 06 0a 	call	0x140c	; 0x140c <digitalWrite>
}
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <__vector_7>:
}
#endif


ISR(TIMER2_COMPA_vect)
{
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	11 24       	eor	r1, r1
     ebe:	2f 93       	push	r18
     ec0:	3f 93       	push	r19
     ec2:	4f 93       	push	r20
     ec4:	5f 93       	push	r21
     ec6:	6f 93       	push	r22
     ec8:	7f 93       	push	r23
     eca:	8f 93       	push	r24
     ecc:	9f 93       	push	r25
     ece:	af 93       	push	r26
     ed0:	bf 93       	push	r27
     ed2:	ef 93       	push	r30
     ed4:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     ed6:	80 91 ea 01 	lds	r24, 0x01EA
     eda:	90 91 eb 01 	lds	r25, 0x01EB
     ede:	a0 91 ec 01 	lds	r26, 0x01EC
     ee2:	b0 91 ed 01 	lds	r27, 0x01ED
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	a1 05       	cpc	r26, r1
     eea:	b1 05       	cpc	r27, r1
     eec:	51 f1       	breq	.+84     	; 0xf42 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     eee:	e0 91 e8 01 	lds	r30, 0x01E8
     ef2:	f0 91 e9 01 	lds	r31, 0x01E9
     ef6:	80 81       	ld	r24, Z
     ef8:	90 91 e7 01 	lds	r25, 0x01E7
     efc:	89 27       	eor	r24, r25
     efe:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     f00:	80 91 ea 01 	lds	r24, 0x01EA
     f04:	90 91 eb 01 	lds	r25, 0x01EB
     f08:	a0 91 ec 01 	lds	r26, 0x01EC
     f0c:	b0 91 ed 01 	lds	r27, 0x01ED
     f10:	18 16       	cp	r1, r24
     f12:	19 06       	cpc	r1, r25
     f14:	1a 06       	cpc	r1, r26
     f16:	1b 06       	cpc	r1, r27
     f18:	c4 f4       	brge	.+48     	; 0xf4a <__vector_7+0x96>
      timer2_toggle_count--;
     f1a:	80 91 ea 01 	lds	r24, 0x01EA
     f1e:	90 91 eb 01 	lds	r25, 0x01EB
     f22:	a0 91 ec 01 	lds	r26, 0x01EC
     f26:	b0 91 ed 01 	lds	r27, 0x01ED
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	a1 09       	sbc	r26, r1
     f2e:	b1 09       	sbc	r27, r1
     f30:	80 93 ea 01 	sts	0x01EA, r24
     f34:	90 93 eb 01 	sts	0x01EB, r25
     f38:	a0 93 ec 01 	sts	0x01EC, r26
     f3c:	b0 93 ed 01 	sts	0x01ED, r27
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     f42:	80 91 30 01 	lds	r24, 0x0130
     f46:	0e 94 44 07 	call	0xe88	; 0xe88 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	bf 91       	pop	r27
     f50:	af 91       	pop	r26
     f52:	9f 91       	pop	r25
     f54:	8f 91       	pop	r24
     f56:	7f 91       	pop	r23
     f58:	6f 91       	pop	r22
     f5a:	5f 91       	pop	r21
     f5c:	4f 91       	pop	r20
     f5e:	3f 91       	pop	r19
     f60:	2f 91       	pop	r18
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <attachInterrupt>:

volatile static voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	e8 f4       	brcc	.+58     	; 0xfaa <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
     f70:	e8 2f       	mov	r30, r24
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	e4 50       	subi	r30, 0x04	; 4
     f7a:	fe 4f       	sbci	r31, 0xFE	; 254
     f7c:	71 83       	std	Z+1, r23	; 0x01
     f7e:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	41 f0       	breq	.+16     	; 0xf94 <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
     f84:	80 91 69 00 	lds	r24, 0x0069
     f88:	8c 7f       	andi	r24, 0xFC	; 252
     f8a:	84 2b       	or	r24, r20
     f8c:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
     f90:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
     f92:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
     f94:	80 91 69 00 	lds	r24, 0x0069
     f98:	44 0f       	add	r20, r20
     f9a:	55 1f       	adc	r21, r21
     f9c:	44 0f       	add	r20, r20
     f9e:	55 1f       	adc	r21, r21
     fa0:	83 7f       	andi	r24, 0xF3	; 243
     fa2:	84 2b       	or	r24, r20
     fa4:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
     fa8:	e9 9a       	sbi	0x1d, 1	; 29
     faa:	08 95       	ret

00000fac <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	68 f4       	brcc	.+26     	; 0xfca <detachInterrupt+0x1e>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	11 f0       	breq	.+4      	; 0xfb8 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
     fb4:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
     fb8:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
     fba:	e8 2f       	mov	r30, r24
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	e4 50       	subi	r30, 0x04	; 4
     fc4:	fe 4f       	sbci	r31, 0xFE	; 254
     fc6:	11 82       	std	Z+1, r1	; 0x01
     fc8:	10 82       	st	Z, r1
     fca:	08 95       	ret

00000fcc <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     fee:	80 91 fc 01 	lds	r24, 0x01FC
     ff2:	90 91 fd 01 	lds	r25, 0x01FD
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	29 f0       	breq	.+10     	; 0x1004 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     ffa:	e0 91 fc 01 	lds	r30, 0x01FC
     ffe:	f0 91 fd 01 	lds	r31, 0x01FD
    1002:	09 95       	icall
}
    1004:	ff 91       	pop	r31
    1006:	ef 91       	pop	r30
    1008:	bf 91       	pop	r27
    100a:	af 91       	pop	r26
    100c:	9f 91       	pop	r25
    100e:	8f 91       	pop	r24
    1010:	7f 91       	pop	r23
    1012:	6f 91       	pop	r22
    1014:	5f 91       	pop	r21
    1016:	4f 91       	pop	r20
    1018:	3f 91       	pop	r19
    101a:	2f 91       	pop	r18
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0
    1022:	1f 90       	pop	r1
    1024:	18 95       	reti

00001026 <__vector_2>:

SIGNAL(INT1_vect) {
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
    1030:	2f 93       	push	r18
    1032:	3f 93       	push	r19
    1034:	4f 93       	push	r20
    1036:	5f 93       	push	r21
    1038:	6f 93       	push	r22
    103a:	7f 93       	push	r23
    103c:	8f 93       	push	r24
    103e:	9f 93       	push	r25
    1040:	af 93       	push	r26
    1042:	bf 93       	push	r27
    1044:	ef 93       	push	r30
    1046:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    1048:	80 91 fe 01 	lds	r24, 0x01FE
    104c:	90 91 ff 01 	lds	r25, 0x01FF
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	29 f0       	breq	.+10     	; 0x105e <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    1054:	e0 91 fe 01 	lds	r30, 0x01FE
    1058:	f0 91 ff 01 	lds	r31, 0x01FF
    105c:	09 95       	icall
}
    105e:	ff 91       	pop	r31
    1060:	ef 91       	pop	r30
    1062:	bf 91       	pop	r27
    1064:	af 91       	pop	r26
    1066:	9f 91       	pop	r25
    1068:	8f 91       	pop	r24
    106a:	7f 91       	pop	r23
    106c:	6f 91       	pop	r22
    106e:	5f 91       	pop	r21
    1070:	4f 91       	pop	r20
    1072:	3f 91       	pop	r19
    1074:	2f 91       	pop	r18
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	0f 90       	pop	r0
    107c:	1f 90       	pop	r1
    107e:	18 95       	reti

00001080 <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
    1080:	1f 92       	push	r1
    1082:	0f 92       	push	r0
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	0f 92       	push	r0
    1088:	11 24       	eor	r1, r1
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	8f 93       	push	r24
    1090:	9f 93       	push	r25
    1092:	af 93       	push	r26
    1094:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1096:	80 91 00 02 	lds	r24, 0x0200
    109a:	90 91 01 02 	lds	r25, 0x0201
    109e:	a0 91 02 02 	lds	r26, 0x0202
    10a2:	b0 91 03 02 	lds	r27, 0x0203
	unsigned char f = timer0_fract;
    10a6:	30 91 08 02 	lds	r19, 0x0208

	m += MILLIS_INC;
	f += FRACT_INC;
    10aa:	23 2f       	mov	r18, r19
    10ac:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    10ae:	2d 37       	cpi	r18, 0x7D	; 125
    10b0:	20 f4       	brcc	.+8      	; 0x10ba <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	a1 1d       	adc	r26, r1
    10b6:	b1 1d       	adc	r27, r1
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    10ba:	23 2f       	mov	r18, r19
    10bc:	2a 57       	subi	r18, 0x7A	; 122
		m += 1;
    10be:	02 96       	adiw	r24, 0x02	; 2
    10c0:	a1 1d       	adc	r26, r1
    10c2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    10c4:	20 93 08 02 	sts	0x0208, r18
	timer0_millis = m;
    10c8:	80 93 00 02 	sts	0x0200, r24
    10cc:	90 93 01 02 	sts	0x0201, r25
    10d0:	a0 93 02 02 	sts	0x0202, r26
    10d4:	b0 93 03 02 	sts	0x0203, r27
	timer0_overflow_count++;
    10d8:	80 91 04 02 	lds	r24, 0x0204
    10dc:	90 91 05 02 	lds	r25, 0x0205
    10e0:	a0 91 06 02 	lds	r26, 0x0206
    10e4:	b0 91 07 02 	lds	r27, 0x0207
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	a1 1d       	adc	r26, r1
    10ec:	b1 1d       	adc	r27, r1
    10ee:	80 93 04 02 	sts	0x0204, r24
    10f2:	90 93 05 02 	sts	0x0205, r25
    10f6:	a0 93 06 02 	sts	0x0206, r26
    10fa:	b0 93 07 02 	sts	0x0207, r27
}
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	3f 91       	pop	r19
    1108:	2f 91       	pop	r18
    110a:	0f 90       	pop	r0
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	0f 90       	pop	r0
    1110:	1f 90       	pop	r1
    1112:	18 95       	reti

00001114 <millis>:

unsigned long millis()
{
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;
    1118:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    111a:	f8 94       	cli
	m = timer0_millis;
    111c:	00 91 00 02 	lds	r16, 0x0200
    1120:	10 91 01 02 	lds	r17, 0x0201
    1124:	20 91 02 02 	lds	r18, 0x0202
    1128:	30 91 03 02 	lds	r19, 0x0203
	SREG = oldSREG;
    112c:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    112e:	b8 01       	movw	r22, r16
    1130:	c9 01       	movw	r24, r18
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	08 95       	ret

00001138 <micros>:

unsigned long micros() {
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    113c:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    113e:	f8 94       	cli
	m = timer0_overflow_count;
    1140:	00 91 04 02 	lds	r16, 0x0204
    1144:	10 91 05 02 	lds	r17, 0x0205
    1148:	20 91 06 02 	lds	r18, 0x0206
    114c:	30 91 07 02 	lds	r19, 0x0207
#if defined(TCNT0)
	t = TCNT0;
    1150:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1152:	a8 9b       	sbis	0x15, 0	; 21
    1154:	06 c0       	rjmp	.+12     	; 0x1162 <micros+0x2a>
    1156:	8f 3f       	cpi	r24, 0xFF	; 255
    1158:	21 f0       	breq	.+8      	; 0x1162 <micros+0x2a>
		m++;
    115a:	0f 5f       	subi	r16, 0xFF	; 255
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
    115e:	2f 4f       	sbci	r18, 0xFF	; 255
    1160:	3f 4f       	sbci	r19, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1162:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1164:	32 2f       	mov	r19, r18
    1166:	21 2f       	mov	r18, r17
    1168:	10 2f       	mov	r17, r16
    116a:	00 27       	eor	r16, r16
    116c:	08 0f       	add	r16, r24
    116e:	11 1d       	adc	r17, r1
    1170:	21 1d       	adc	r18, r1
    1172:	31 1d       	adc	r19, r1
    1174:	42 e0       	ldi	r20, 0x02	; 2
    1176:	00 0f       	add	r16, r16
    1178:	11 1f       	adc	r17, r17
    117a:	22 1f       	adc	r18, r18
    117c:	33 1f       	adc	r19, r19
    117e:	4a 95       	dec	r20
    1180:	d1 f7       	brne	.-12     	; 0x1176 <micros+0x3e>
}
    1182:	b8 01       	movw	r22, r16
    1184:	c9 01       	movw	r24, r18
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	08 95       	ret

0000118c <delay>:

void delay(unsigned long ms)
{
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	6b 01       	movw	r12, r22
    119a:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    119c:	0e 94 9c 08 	call	0x1138	; 0x1138 <micros>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	ec 01       	movw	r28, r24

	while (ms > 0) {
    11a6:	0f c0       	rjmp	.+30     	; 0x11c6 <delay+0x3a>
		if (((uint16_t)micros() - start) >= 1000) {
    11a8:	0e 94 9c 08 	call	0x1138	; 0x1138 <micros>
    11ac:	6c 1b       	sub	r22, r28
    11ae:	7d 0b       	sbc	r23, r29
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	68 3e       	cpi	r22, 0xE8	; 232
    11b4:	78 07       	cpc	r23, r24
    11b6:	38 f0       	brcs	.+14     	; 0x11c6 <delay+0x3a>
			ms--;
    11b8:	08 94       	sec
    11ba:	c1 08       	sbc	r12, r1
    11bc:	d1 08       	sbc	r13, r1
    11be:	e1 08       	sbc	r14, r1
    11c0:	f1 08       	sbc	r15, r1
			start += 1000;
    11c2:	c8 51       	subi	r28, 0x18	; 24
    11c4:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    11c6:	c1 14       	cp	r12, r1
    11c8:	d1 04       	cpc	r13, r1
    11ca:	e1 04       	cpc	r14, r1
    11cc:	f1 04       	cpc	r15, r1
    11ce:	61 f7       	brne	.-40     	; 0x11a8 <delay+0x1c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	cf 90       	pop	r12
    11dc:	08 95       	ret

000011de <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	39 f0       	breq	.+14     	; 0x11f0 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    11ea:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <delayMicroseconds+0xe>
    11f0:	08 95       	ret

000011f2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    11f2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    11f4:	84 b5       	in	r24, 0x24	; 36
    11f6:	82 60       	ori	r24, 0x02	; 2
    11f8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    11fa:	84 b5       	in	r24, 0x24	; 36
    11fc:	81 60       	ori	r24, 0x01	; 1
    11fe:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1200:	85 b5       	in	r24, 0x25	; 37
    1202:	82 60       	ori	r24, 0x02	; 2
    1204:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1206:	85 b5       	in	r24, 0x25	; 37
    1208:	81 60       	ori	r24, 0x01	; 1
    120a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    120c:	ee e6       	ldi	r30, 0x6E	; 110
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	81 60       	ori	r24, 0x01	; 1
    1214:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
    1216:	e1 e8       	ldi	r30, 0x81	; 129
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
    121c:	80 81       	ld	r24, Z
    121e:	82 60       	ori	r24, 0x02	; 2
    1220:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
    1222:	80 81       	ld	r24, Z
    1224:	81 60       	ori	r24, 0x01	; 1
    1226:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1228:	e0 e8       	ldi	r30, 0x80	; 128
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	81 60       	ori	r24, 0x01	; 1
    1230:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1232:	e1 eb       	ldi	r30, 0xB1	; 177
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	84 60       	ori	r24, 0x04	; 4
    123a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    123c:	e0 eb       	ldi	r30, 0xB0	; 176
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1246:	ea e7       	ldi	r30, 0x7A	; 122
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	84 60       	ori	r24, 0x04	; 4
    124e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1250:	80 81       	ld	r24, Z
    1252:	82 60       	ori	r24, 0x02	; 2
    1254:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1256:	80 81       	ld	r24, Z
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    125c:	80 81       	ld	r24, Z
    125e:	80 68       	ori	r24, 0x80	; 128
    1260:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1262:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1266:	08 95       	ret

00001268 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    1268:	80 93 31 01 	sts	0x0131, r24
}
    126c:	08 95       	ret

0000126e <analogRead>:
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    126e:	8e 30       	cpi	r24, 0x0E	; 14
    1270:	08 f0       	brcs	.+2      	; 0x1274 <analogRead+0x6>
    1272:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1274:	87 70       	andi	r24, 0x07	; 7
    1276:	90 91 31 01 	lds	r25, 0x0131
    127a:	92 95       	swap	r25
    127c:	99 0f       	add	r25, r25
    127e:	99 0f       	add	r25, r25
    1280:	90 7c       	andi	r25, 0xC0	; 192
    1282:	98 2b       	or	r25, r24
    1284:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1288:	80 91 7a 00 	lds	r24, 0x007A
    128c:	80 64       	ori	r24, 0x40	; 64
    128e:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1292:	80 91 7a 00 	lds	r24, 0x007A
    1296:	86 fd       	sbrc	r24, 6
    1298:	fc cf       	rjmp	.-8      	; 0x1292 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    129a:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    129e:	90 91 79 00 	lds	r25, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    12a2:	39 2f       	mov	r19, r25
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	82 2b       	or	r24, r18
    12aa:	93 2b       	or	r25, r19
}
    12ac:	08 95       	ret

000012ae <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	18 2f       	mov	r17, r24
    12b6:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	0e 94 e5 09 	call	0x13ca	; 0x13ca <pinMode>
	if (val == 0)
    12be:	20 97       	sbiw	r28, 0x00	; 0
    12c0:	11 f4       	brne	.+4      	; 0x12c6 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    12c2:	81 2f       	mov	r24, r17
    12c4:	4c c0       	rjmp	.+152    	; 0x135e <analogWrite+0xb0>
	}
	else if (val == 255)
    12c6:	cf 3f       	cpi	r28, 0xFF	; 255
    12c8:	d1 05       	cpc	r29, r1
    12ca:	11 f4       	brne	.+4      	; 0x12d0 <analogWrite+0x22>
	{
		digitalWrite(pin, HIGH);
    12cc:	81 2f       	mov	r24, r17
    12ce:	49 c0       	rjmp	.+146    	; 0x1362 <analogWrite+0xb4>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    12d0:	e1 2f       	mov	r30, r17
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	e8 59       	subi	r30, 0x98	; 152
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	e4 91       	lpm	r30, Z
    12da:	e3 30       	cpi	r30, 0x03	; 3
    12dc:	c1 f0       	breq	.+48     	; 0x130e <analogWrite+0x60>
    12de:	e4 30       	cpi	r30, 0x04	; 4
    12e0:	28 f4       	brcc	.+10     	; 0x12ec <analogWrite+0x3e>
    12e2:	e1 30       	cpi	r30, 0x01	; 1
    12e4:	51 f0       	breq	.+20     	; 0x12fa <analogWrite+0x4c>
    12e6:	e2 30       	cpi	r30, 0x02	; 2
    12e8:	b1 f5       	brne	.+108    	; 0x1356 <analogWrite+0xa8>
    12ea:	0c c0       	rjmp	.+24     	; 0x1304 <analogWrite+0x56>
    12ec:	e6 30       	cpi	r30, 0x06	; 6
    12ee:	19 f1       	breq	.+70     	; 0x1336 <analogWrite+0x88>
    12f0:	e7 30       	cpi	r30, 0x07	; 7
    12f2:	49 f1       	breq	.+82     	; 0x1346 <analogWrite+0x98>
    12f4:	e4 30       	cpi	r30, 0x04	; 4
    12f6:	79 f5       	brne	.+94     	; 0x1356 <analogWrite+0xa8>
    12f8:	14 c0       	rjmp	.+40     	; 0x1322 <analogWrite+0x74>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    12fa:	84 b5       	in	r24, 0x24	; 36
    12fc:	80 68       	ori	r24, 0x80	; 128
    12fe:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1300:	c7 bd       	out	0x27, r28	; 39
				break;
    1302:	32 c0       	rjmp	.+100    	; 0x1368 <analogWrite+0xba>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1304:	84 b5       	in	r24, 0x24	; 36
    1306:	80 62       	ori	r24, 0x20	; 32
    1308:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    130a:	c8 bd       	out	0x28, r28	; 40
				break;
    130c:	2d c0       	rjmp	.+90     	; 0x1368 <analogWrite+0xba>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    130e:	80 91 80 00 	lds	r24, 0x0080
    1312:	80 68       	ori	r24, 0x80	; 128
    1314:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    1318:	d0 93 89 00 	sts	0x0089, r29
    131c:	c0 93 88 00 	sts	0x0088, r28
				break;
    1320:	23 c0       	rjmp	.+70     	; 0x1368 <analogWrite+0xba>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    1322:	80 91 80 00 	lds	r24, 0x0080
    1326:	80 62       	ori	r24, 0x20	; 32
    1328:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    132c:	d0 93 8b 00 	sts	0x008B, r29
    1330:	c0 93 8a 00 	sts	0x008A, r28
				break;
    1334:	19 c0       	rjmp	.+50     	; 0x1368 <analogWrite+0xba>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1336:	80 91 b0 00 	lds	r24, 0x00B0
    133a:	80 68       	ori	r24, 0x80	; 128
    133c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    1340:	c0 93 b3 00 	sts	0x00B3, r28
				break;
    1344:	11 c0       	rjmp	.+34     	; 0x1368 <analogWrite+0xba>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    1346:	80 91 b0 00 	lds	r24, 0x00B0
    134a:	80 62       	ori	r24, 0x20	; 32
    134c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    1350:	c0 93 b4 00 	sts	0x00B4, r28
				break;
    1354:	09 c0       	rjmp	.+18     	; 0x1368 <analogWrite+0xba>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
					digitalWrite(pin, LOW);
    1356:	81 2f       	mov	r24, r17
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    1358:	c0 38       	cpi	r28, 0x80	; 128
    135a:	d1 05       	cpc	r29, r1
    135c:	14 f4       	brge	.+4      	; 0x1362 <analogWrite+0xb4>
					digitalWrite(pin, LOW);
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <analogWrite+0xb6>
				} else {
					digitalWrite(pin, HIGH);
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	0e 94 06 0a 	call	0x140c	; 0x140c <digitalWrite>
				}
		}
	}
}
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	08 95       	ret

00001370 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	71 f0       	breq	.+28     	; 0x1390 <turnOffPWM+0x20>
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	28 f4       	brcc	.+10     	; 0x1382 <turnOffPWM+0x12>
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	a1 f0       	breq	.+40     	; 0x13a4 <turnOffPWM+0x34>
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	21 f5       	brne	.+72     	; 0x13c8 <turnOffPWM+0x58>
    1380:	14 c0       	rjmp	.+40     	; 0x13aa <turnOffPWM+0x3a>
    1382:	86 30       	cpi	r24, 0x06	; 6
    1384:	b1 f0       	breq	.+44     	; 0x13b2 <turnOffPWM+0x42>
    1386:	87 30       	cpi	r24, 0x07	; 7
    1388:	d1 f0       	breq	.+52     	; 0x13be <turnOffPWM+0x4e>
    138a:	84 30       	cpi	r24, 0x04	; 4
    138c:	e9 f4       	brne	.+58     	; 0x13c8 <turnOffPWM+0x58>
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1390:	80 91 80 00 	lds	r24, 0x0080
    1394:	8f 77       	andi	r24, 0x7F	; 127
    1396:	03 c0       	rjmp	.+6      	; 0x139e <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1398:	80 91 80 00 	lds	r24, 0x0080
    139c:	8f 7d       	andi	r24, 0xDF	; 223
    139e:	80 93 80 00 	sts	0x0080, r24
    13a2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    13a4:	84 b5       	in	r24, 0x24	; 36
    13a6:	8f 77       	andi	r24, 0x7F	; 127
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    13aa:	84 b5       	in	r24, 0x24	; 36
    13ac:	8f 7d       	andi	r24, 0xDF	; 223
    13ae:	84 bd       	out	0x24, r24	; 36
    13b0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    13b2:	80 91 b0 00 	lds	r24, 0x00B0
    13b6:	8f 77       	andi	r24, 0x7F	; 127
    13b8:	80 93 b0 00 	sts	0x00B0, r24
    13bc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    13be:	80 91 b0 00 	lds	r24, 0x00B0
    13c2:	8f 7d       	andi	r24, 0xDF	; 223
    13c4:	80 93 b0 00 	sts	0x00B0, r24
    13c8:	08 95       	ret

000013ca <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	fc 01       	movw	r30, r24
    13ce:	e4 58       	subi	r30, 0x84	; 132
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    13d4:	fc 01       	movw	r30, r24
    13d6:	e0 57       	subi	r30, 0x70	; 112
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	e4 91       	lpm	r30, Z
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    13dc:	ee 23       	and	r30, r30
    13de:	a9 f0       	breq	.+42     	; 0x140a <pinMode+0x40>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	ee 0f       	add	r30, r30
    13e4:	ff 1f       	adc	r31, r31
    13e6:	e8 54       	subi	r30, 0x48	; 72
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	85 91       	lpm	r24, Z+
    13ec:	94 91       	lpm	r25, Z
    13ee:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    13f0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13f2:	f8 94       	cli
		*reg &= ~bit;
    13f4:	8c 91       	ld	r24, X
	if (port == NOT_A_PIN) return;

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);

	if (mode == INPUT) { 
    13f6:	66 23       	and	r22, r22
    13f8:	29 f4       	brne	.+10     	; 0x1404 <pinMode+0x3a>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    13fa:	20 95       	com	r18
    13fc:	82 23       	and	r24, r18
    13fe:	8c 93       	st	X, r24
		SREG = oldSREG;
    1400:	9f bf       	out	0x3f, r25	; 63
    1402:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
    1404:	82 2b       	or	r24, r18
    1406:	8c 93       	st	X, r24
		SREG = oldSREG;
    1408:	9f bf       	out	0x3f, r25	; 63
    140a:	08 95       	ret

0000140c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	0f 92       	push	r0
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	f9 01       	movw	r30, r18
    1420:	e8 59       	subi	r30, 0x98	; 152
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1426:	f9 01       	movw	r30, r18
    1428:	e4 58       	subi	r30, 0x84	; 132
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    142e:	f9 01       	movw	r30, r18
    1430:	e0 57       	subi	r30, 0x70	; 112
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1436:	00 23       	and	r16, r16
    1438:	d1 f0       	breq	.+52     	; 0x146e <digitalWrite+0x62>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    143a:	88 23       	and	r24, r24
    143c:	21 f0       	breq	.+8      	; 0x1446 <digitalWrite+0x3a>
    143e:	69 83       	std	Y+1, r22	; 0x01
    1440:	0e 94 b8 09 	call	0x1370	; 0x1370 <turnOffPWM>
    1444:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    1446:	e0 2f       	mov	r30, r16
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	e2 55       	subi	r30, 0x52	; 82
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	85 91       	lpm	r24, Z+
    1454:	94 91       	lpm	r25, Z
    1456:	dc 01       	movw	r26, r24

	if (val == LOW) {
		uint8_t oldSREG = SREG;
    1458:	9f b7       	in	r25, 0x3f	; 63
                cli();
    145a:	f8 94       	cli
		*out &= ~bit;
    145c:	8c 91       	ld	r24, X
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);

	if (val == LOW) {
    145e:	66 23       	and	r22, r22
    1460:	19 f4       	brne	.+6      	; 0x1468 <digitalWrite+0x5c>
		uint8_t oldSREG = SREG;
                cli();
		*out &= ~bit;
    1462:	10 95       	com	r17
    1464:	81 23       	and	r24, r17
    1466:	01 c0       	rjmp	.+2      	; 0x146a <digitalWrite+0x5e>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
		*out |= bit;
    1468:	81 2b       	or	r24, r17
    146a:	8c 93       	st	X, r24
		SREG = oldSREG;
    146c:	9f bf       	out	0x3f, r25	; 63
	}
}
    146e:	0f 90       	pop	r0
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	08 95       	ret

0000147a <digitalRead>:

int digitalRead(uint8_t pin)
{
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	f9 01       	movw	r30, r18
    1484:	e8 59       	subi	r30, 0x98	; 152
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    148a:	f9 01       	movw	r30, r18
    148c:	e4 58       	subi	r30, 0x84	; 132
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	c4 91       	lpm	r28, Z
	uint8_t port = digitalPinToPort(pin);
    1492:	f9 01       	movw	r30, r18
    1494:	e0 57       	subi	r30, 0x70	; 112
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	d4 91       	lpm	r29, Z

	if (port == NOT_A_PIN) return LOW;
    149a:	dd 23       	and	r29, r29
    149c:	91 f0       	breq	.+36     	; 0x14c2 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    149e:	88 23       	and	r24, r24
    14a0:	11 f0       	breq	.+4      	; 0x14a6 <digitalRead+0x2c>
    14a2:	0e 94 b8 09 	call	0x1370	; 0x1370 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    14a6:	ed 2f       	mov	r30, r29
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	ee 0f       	add	r30, r30
    14ac:	ff 1f       	adc	r31, r31
    14ae:	ec 55       	subi	r30, 0x5C	; 92
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	85 91       	lpm	r24, Z+
    14b4:	94 91       	lpm	r25, Z
    14b6:	fc 01       	movw	r30, r24
    14b8:	20 81       	ld	r18, Z
    14ba:	2c 23       	and	r18, r28
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	11 f4       	brne	.+4      	; 0x14c6 <digitalRead+0x4c>
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    14cc:	af 92       	push	r10
    14ce:	bf 92       	push	r11
    14d0:	cf 92       	push	r12
    14d2:	df 92       	push	r13
    14d4:	ef 92       	push	r14
    14d6:	ff 92       	push	r15
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	fc 01       	movw	r30, r24
    14e4:	e4 58       	subi	r30, 0x84	; 132
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    14ea:	80 57       	subi	r24, 0x70	; 112
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	fc 01       	movw	r30, r24
    14f0:	c4 91       	lpm	r28, Z
	uint8_t stateMask = (state ? bit : 0);
    14f2:	66 23       	and	r22, r22
    14f4:	11 f4       	brne	.+4      	; 0x14fa <pulseIn+0x2e>
    14f6:	d0 e0       	ldi	r29, 0x00	; 0
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <pulseIn+0x30>
    14fa:	d1 2f       	mov	r29, r17
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
    14fc:	ca 01       	movw	r24, r20
    14fe:	b9 01       	movw	r22, r18
    1500:	20 e8       	ldi	r18, 0x80	; 128
    1502:	3e e3       	ldi	r19, 0x3E	; 62
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__mulsi3>
    150c:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <__udivmodsi4>
    1510:	69 01       	movw	r12, r18
    1512:	7a 01       	movw	r14, r20
	uint8_t stateMask = (state ? bit : 0);
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	dc 01       	movw	r26, r24
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
    151a:	2c 2f       	mov	r18, r28
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	f9 01       	movw	r30, r18
    1520:	ee 0f       	add	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	ec 55       	subi	r30, 0x5C	; 92
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	a5 90       	lpm	r10, Z+
    152a:	b4 90       	lpm	r11, Z
    152c:	0e c0       	rjmp	.+28     	; 0x154a <pulseIn+0x7e>
		if (numloops++ == maxloops)
    152e:	ac 01       	movw	r20, r24
    1530:	bd 01       	movw	r22, r26
    1532:	4f 5f       	subi	r20, 0xFF	; 255
    1534:	5f 4f       	sbci	r21, 0xFF	; 255
    1536:	6f 4f       	sbci	r22, 0xFF	; 255
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	8c 15       	cp	r24, r12
    153c:	9d 05       	cpc	r25, r13
    153e:	ae 05       	cpc	r26, r14
    1540:	bf 05       	cpc	r27, r15
    1542:	09 f4       	brne	.+2      	; 0x1546 <pulseIn+0x7a>
    1544:	50 c0       	rjmp	.+160    	; 0x15e6 <pulseIn+0x11a>
    1546:	db 01       	movw	r26, r22
    1548:	ca 01       	movw	r24, r20
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
    154a:	f5 01       	movw	r30, r10
    154c:	40 81       	ld	r20, Z
    154e:	41 23       	and	r20, r17
    1550:	4d 17       	cp	r20, r29
    1552:	69 f3       	breq	.-38     	; 0x152e <pulseIn+0x62>
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <pulseIn+0xa8>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
    1556:	ac 01       	movw	r20, r24
    1558:	bd 01       	movw	r22, r26
    155a:	4f 5f       	subi	r20, 0xFF	; 255
    155c:	5f 4f       	sbci	r21, 0xFF	; 255
    155e:	6f 4f       	sbci	r22, 0xFF	; 255
    1560:	7f 4f       	sbci	r23, 0xFF	; 255
    1562:	8c 15       	cp	r24, r12
    1564:	9d 05       	cpc	r25, r13
    1566:	ae 05       	cpc	r26, r14
    1568:	bf 05       	cpc	r27, r15
    156a:	09 f4       	brne	.+2      	; 0x156e <pulseIn+0xa2>
    156c:	3c c0       	rjmp	.+120    	; 0x15e6 <pulseIn+0x11a>
    156e:	db 01       	movw	r26, r22
    1570:	ca 01       	movw	r24, r20
    1572:	07 c0       	rjmp	.+14     	; 0x1582 <pulseIn+0xb6>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
    1574:	22 0f       	add	r18, r18
    1576:	33 1f       	adc	r19, r19
    1578:	2c 55       	subi	r18, 0x5C	; 92
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	f9 01       	movw	r30, r18
    157e:	a5 90       	lpm	r10, Z+
    1580:	b4 90       	lpm	r11, Z
    1582:	f5 01       	movw	r30, r10
    1584:	40 81       	ld	r20, Z
    1586:	41 23       	and	r20, r17
    1588:	4d 17       	cp	r20, r29
    158a:	29 f7       	brne	.-54     	; 0x1556 <pulseIn+0x8a>
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	ba 01       	movw	r22, r20
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    1592:	f9 01       	movw	r30, r18
    1594:	25 91       	lpm	r18, Z+
    1596:	34 91       	lpm	r19, Z
    1598:	0c c0       	rjmp	.+24     	; 0x15b2 <pulseIn+0xe6>
		if (numloops++ == maxloops)
    159a:	8c 15       	cp	r24, r12
    159c:	9d 05       	cpc	r25, r13
    159e:	ae 05       	cpc	r26, r14
    15a0:	bf 05       	cpc	r27, r15
    15a2:	09 f1       	breq	.+66     	; 0x15e6 <pulseIn+0x11a>
    15a4:	01 96       	adiw	r24, 0x01	; 1
    15a6:	a1 1d       	adc	r26, r1
    15a8:	b1 1d       	adc	r27, r1
			return 0;
		width++;
    15aa:	4f 5f       	subi	r20, 0xFF	; 255
    15ac:	5f 4f       	sbci	r21, 0xFF	; 255
    15ae:	6f 4f       	sbci	r22, 0xFF	; 255
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    15b2:	f9 01       	movw	r30, r18
    15b4:	e0 81       	ld	r30, Z
    15b6:	e1 23       	and	r30, r17
    15b8:	ed 17       	cp	r30, r29
    15ba:	79 f3       	breq	.-34     	; 0x159a <pulseIn+0xce>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
    15bc:	cb 01       	movw	r24, r22
    15be:	ba 01       	movw	r22, r20
    15c0:	28 e0       	ldi	r18, 0x08	; 8
    15c2:	32 e5       	ldi	r19, 0x52	; 82
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__mulsi3>
    15cc:	60 58       	subi	r22, 0x80	; 128
    15ce:	71 4c       	sbci	r23, 0xC1	; 193
    15d0:	8f 4f       	sbci	r24, 0xFF	; 255
    15d2:	9f 4f       	sbci	r25, 0xFF	; 255
    15d4:	20 e8       	ldi	r18, 0x80	; 128
    15d6:	3e e3       	ldi	r19, 0x3E	; 62
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <__udivmodsi4>
    15e0:	89 01       	movw	r16, r18
    15e2:	9a 01       	movw	r18, r20
    15e4:	03 c0       	rjmp	.+6      	; 0x15ec <pulseIn+0x120>
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
		if (numloops++ == maxloops)
			return 0;
    15e6:	00 e0       	ldi	r16, 0x00	; 0
    15e8:	10 e0       	ldi	r17, 0x00	; 0
    15ea:	98 01       	movw	r18, r16
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
}
    15ec:	b8 01       	movw	r22, r16
    15ee:	c9 01       	movw	r24, r18
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	df 90       	pop	r13
    15fe:	cf 90       	pop	r12
    1600:	bf 90       	pop	r11
    1602:	af 90       	pop	r10
    1604:	08 95       	ret

00001606 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    1606:	cf 92       	push	r12
    1608:	df 92       	push	r13
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	18 2f       	mov	r17, r24
    1618:	f6 2e       	mov	r15, r22
    161a:	e4 2e       	mov	r14, r20
    161c:	c7 e0       	ldi	r28, 0x07	; 7
    161e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t value = 0;
    1620:	00 e0       	ldi	r16, 0x00	; 0
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    1622:	87 e0       	ldi	r24, 0x07	; 7
    1624:	c8 2e       	mov	r12, r24
    1626:	d1 2c       	mov	r13, r1
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
    1628:	8f 2d       	mov	r24, r15
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	0e 94 06 0a 	call	0x140c	; 0x140c <digitalWrite>
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    1630:	81 2f       	mov	r24, r17
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
    1632:	ee 20       	and	r14, r14
    1634:	69 f4       	brne	.+26     	; 0x1650 <shiftIn+0x4a>
			value |= digitalRead(dataPin) << i;
    1636:	0e 94 3d 0a 	call	0x147a	; 0x147a <digitalRead>
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    163a:	96 01       	movw	r18, r12
    163c:	2c 1b       	sub	r18, r28
    163e:	3d 0b       	sbc	r19, r29
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    1640:	ac 01       	movw	r20, r24
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <shiftIn+0x42>
    1644:	44 0f       	add	r20, r20
    1646:	55 1f       	adc	r21, r21
    1648:	2a 95       	dec	r18
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <shiftIn+0x3e>
    164c:	04 2b       	or	r16, r20
    164e:	09 c0       	rjmp	.+18     	; 0x1662 <shiftIn+0x5c>
		else
			value |= digitalRead(dataPin) << (7 - i);
    1650:	0e 94 3d 0a 	call	0x147a	; 0x147a <digitalRead>
    1654:	0c 2e       	mov	r0, r28
    1656:	02 c0       	rjmp	.+4      	; 0x165c <shiftIn+0x56>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <shiftIn+0x52>
    1660:	08 2b       	or	r16, r24
		digitalWrite(clockPin, LOW);
    1662:	8f 2d       	mov	r24, r15
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	0e 94 06 0a 	call	0x140c	; 0x140c <digitalWrite>
    166a:	21 97       	sbiw	r28, 0x01	; 1

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	cf 3f       	cpi	r28, 0xFF	; 255
    1670:	d8 07       	cpc	r29, r24
    1672:	d1 f6       	brne	.-76     	; 0x1628 <shiftIn+0x22>
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
}
    1674:	80 2f       	mov	r24, r16
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	08 95       	ret

00001688 <shiftOut>:

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    1688:	bf 92       	push	r11
    168a:	cf 92       	push	r12
    168c:	df 92       	push	r13
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	18 2f       	mov	r17, r24
    169c:	06 2f       	mov	r16, r22
    169e:	b4 2e       	mov	r11, r20
    16a0:	c7 e0       	ldi	r28, 0x07	; 7
    16a2:	d0 e0       	ldi	r29, 0x00	; 0
    16a4:	e2 2e       	mov	r14, r18
    16a6:	ff 24       	eor	r15, r15
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
    16a8:	97 e0       	ldi	r25, 0x07	; 7
    16aa:	c9 2e       	mov	r12, r25
    16ac:	d1 2c       	mov	r13, r1
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    16ae:	bb 20       	and	r11, r11
    16b0:	59 f4       	brne	.+22     	; 0x16c8 <shiftOut+0x40>
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
    16b2:	b6 01       	movw	r22, r12
    16b4:	6c 1b       	sub	r22, r28
    16b6:	7d 0b       	sbc	r23, r29
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    16b8:	c7 01       	movw	r24, r14
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <shiftOut+0x38>
    16bc:	95 95       	asr	r25
    16be:	87 95       	ror	r24
    16c0:	6a 95       	dec	r22
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <shiftOut+0x34>
    16c4:	bc 01       	movw	r22, r24
    16c6:	07 c0       	rjmp	.+14     	; 0x16d6 <shiftOut+0x4e>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    16c8:	b7 01       	movw	r22, r14
    16ca:	0c 2e       	mov	r0, r28
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <shiftOut+0x4a>
    16ce:	75 95       	asr	r23
    16d0:	67 95       	ror	r22
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <shiftOut+0x46>
    16d6:	61 70       	andi	r22, 0x01	; 1
    16d8:	81 2f       	mov	r24, r17
    16da:	0e 94 06 0a 	call	0x140c	; 0x140c <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    16de:	80 2f       	mov	r24, r16
    16e0:	61 e0       	ldi	r22, 0x01	; 1
    16e2:	0e 94 06 0a 	call	0x140c	; 0x140c <digitalWrite>
		digitalWrite(clockPin, LOW);		
    16e6:	80 2f       	mov	r24, r16
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	0e 94 06 0a 	call	0x140c	; 0x140c <digitalWrite>
    16ee:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    16f0:	8f ef       	ldi	r24, 0xFF	; 255
    16f2:	cf 3f       	cpi	r28, 0xFF	; 255
    16f4:	d8 07       	cpc	r29, r24
    16f6:	d9 f6       	brne	.-74     	; 0x16ae <shiftOut+0x26>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	ff 90       	pop	r15
    1702:	ef 90       	pop	r14
    1704:	df 90       	pop	r13
    1706:	cf 90       	pop	r12
    1708:	bf 90       	pop	r11
    170a:	08 95       	ret

0000170c <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	29 f0       	breq	.+10     	; 0x171a <_Z10randomSeedj+0xe>
    srandom(seed);
    1710:	bc 01       	movw	r22, r24
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 39 20 	call	0x4072	; 0x4072 <srandom>
    171a:	08 95       	ret

0000171c <_Z6randoml>:
  }
}

long random(long howbig)
{
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	6b 01       	movw	r12, r22
    172a:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    172c:	61 15       	cp	r22, r1
    172e:	71 05       	cpc	r23, r1
    1730:	81 05       	cpc	r24, r1
    1732:	91 05       	cpc	r25, r1
    1734:	49 f0       	breq	.+18     	; 0x1748 <_Z6randoml+0x2c>
    return 0;
  }
  return random() % howbig;
    1736:	0e 94 34 20 	call	0x4068	; 0x4068 <random>
    173a:	a7 01       	movw	r20, r14
    173c:	96 01       	movw	r18, r12
    173e:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodsi4>
    1742:	8b 01       	movw	r16, r22
    1744:	9c 01       	movw	r18, r24
    1746:	03 c0       	rjmp	.+6      	; 0x174e <_Z6randoml+0x32>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    1748:	00 e0       	ldi	r16, 0x00	; 0
    174a:	10 e0       	ldi	r17, 0x00	; 0
    174c:	98 01       	movw	r18, r16
  }
  return random() % howbig;
}
    174e:	b8 01       	movw	r22, r16
    1750:	c9 01       	movw	r24, r18
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	ff 90       	pop	r15
    1758:	ef 90       	pop	r14
    175a:	df 90       	pop	r13
    175c:	cf 90       	pop	r12
    175e:	08 95       	ret

00001760 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    1760:	cf 92       	push	r12
    1762:	df 92       	push	r13
    1764:	ef 92       	push	r14
    1766:	ff 92       	push	r15
    1768:	6b 01       	movw	r12, r22
    176a:	7c 01       	movw	r14, r24
    176c:	da 01       	movw	r26, r20
    176e:	c9 01       	movw	r24, r18
  if (howsmall >= howbig) {
    1770:	c2 16       	cp	r12, r18
    1772:	d3 06       	cpc	r13, r19
    1774:	e4 06       	cpc	r14, r20
    1776:	f5 06       	cpc	r15, r21
    1778:	74 f4       	brge	.+28     	; 0x1796 <_Z6randomll+0x36>
    return howsmall;
  }
  long diff = howbig - howsmall;
    177a:	8c 19       	sub	r24, r12
    177c:	9d 09       	sbc	r25, r13
    177e:	ae 09       	sbc	r26, r14
    1780:	bf 09       	sbc	r27, r15
  return random(diff) + howsmall;
    1782:	bc 01       	movw	r22, r24
    1784:	cd 01       	movw	r24, r26
    1786:	0e 94 8e 0b 	call	0x171c	; 0x171c <_Z6randoml>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	c8 0e       	add	r12, r24
    1790:	d9 1e       	adc	r13, r25
    1792:	ea 1e       	adc	r14, r26
    1794:	fb 1e       	adc	r15, r27
}
    1796:	b6 01       	movw	r22, r12
    1798:	c7 01       	movw	r24, r14
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	cf 90       	pop	r12
    17a2:	08 95       	ret

000017a4 <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    17a4:	4f 92       	push	r4
    17a6:	5f 92       	push	r5
    17a8:	6f 92       	push	r6
    17aa:	7f 92       	push	r7
    17ac:	8f 92       	push	r8
    17ae:	9f 92       	push	r9
    17b0:	af 92       	push	r10
    17b2:	bf 92       	push	r11
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <_Z3maplllll+0x22>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <_Z3maplllll+0x24>
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	29 83       	std	Y+1, r18	; 0x01
    17ce:	3a 83       	std	Y+2, r19	; 0x02
    17d0:	4b 83       	std	Y+3, r20	; 0x03
    17d2:	5c 83       	std	Y+4, r21	; 0x04
    17d4:	27 01       	movw	r4, r14
    17d6:	38 01       	movw	r6, r16
    17d8:	76 01       	movw	r14, r12
    17da:	65 01       	movw	r12, r10
    17dc:	2f 89       	ldd	r18, Y+23	; 0x17
    17de:	38 8d       	ldd	r19, Y+24	; 0x18
    17e0:	49 8d       	ldd	r20, Y+25	; 0x19
    17e2:	5a 8d       	ldd	r21, Y+26	; 0x1a
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    17e4:	89 80       	ldd	r8, Y+1	; 0x01
    17e6:	9a 80       	ldd	r9, Y+2	; 0x02
    17e8:	ab 80       	ldd	r10, Y+3	; 0x03
    17ea:	bc 80       	ldd	r11, Y+4	; 0x04
    17ec:	68 19       	sub	r22, r8
    17ee:	79 09       	sbc	r23, r9
    17f0:	8a 09       	sbc	r24, r10
    17f2:	9b 09       	sbc	r25, r11
    17f4:	2c 19       	sub	r18, r12
    17f6:	3d 09       	sbc	r19, r13
    17f8:	4e 09       	sbc	r20, r14
    17fa:	5f 09       	sbc	r21, r15
    17fc:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__mulsi3>
    1800:	48 18       	sub	r4, r8
    1802:	59 08       	sbc	r5, r9
    1804:	6a 08       	sbc	r6, r10
    1806:	7b 08       	sbc	r7, r11
    1808:	a3 01       	movw	r20, r6
    180a:	92 01       	movw	r18, r4
    180c:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodsi4>
    1810:	89 01       	movw	r16, r18
    1812:	9a 01       	movw	r18, r20
    1814:	0c 0d       	add	r16, r12
    1816:	1d 1d       	adc	r17, r13
    1818:	2e 1d       	adc	r18, r14
    181a:	3f 1d       	adc	r19, r15
}
    181c:	b8 01       	movw	r22, r16
    181e:	c9 01       	movw	r24, r18
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	ff 90       	pop	r15
    1832:	ef 90       	pop	r14
    1834:	df 90       	pop	r13
    1836:	cf 90       	pop	r12
    1838:	bf 90       	pop	r11
    183a:	af 90       	pop	r10
    183c:	9f 90       	pop	r9
    183e:	8f 90       	pop	r8
    1840:	7f 90       	pop	r7
    1842:	6f 90       	pop	r6
    1844:	5f 90       	pop	r5
    1846:	4f 90       	pop	r4
    1848:	08 95       	ret

0000184a <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
    184a:	08 95       	ret

0000184c <_Z8makeWordhh>:
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	38 2f       	mov	r19, r24
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	62 2b       	or	r22, r18
    1854:	73 2b       	or	r23, r19
    1856:	cb 01       	movw	r24, r22
    1858:	08 95       	ret

0000185a <_ZN6StringD1Ev>:
    String( const unsigned char );
    String( const int, const int base=10);
    String( const unsigned int, const int base=10 );
    String( const long, const int base=10 );
    String( const unsigned long, const int base=10 );
    ~String() { free(_buffer); _length = _capacity = 0;}     //added _length = _capacity = 0;
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	ec 01       	movw	r28, r24
    1860:	88 81       	ld	r24, Y
    1862:	99 81       	ldd	r25, Y+1	; 0x01
    1864:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <free>
    1868:	1b 82       	std	Y+3, r1	; 0x03
    186a:	1a 82       	std	Y+2, r1	; 0x02
    186c:	1d 82       	std	Y+5, r1	; 0x05
    186e:	1c 82       	std	Y+4, r1	; 0x04
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <_ZN6String9getBufferEj>:

};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	ec 01       	movw	r28, r24
    187c:	cb 01       	movw	r24, r22
  _capacity = maxStrLen;
    187e:	7b 83       	std	Y+3, r23	; 0x03
    1880:	6a 83       	std	Y+2, r22	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <malloc>
    1888:	99 83       	std	Y+1, r25	; 0x01
    188a:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	21 f4       	brne	.+8      	; 0x1898 <_ZN6String9getBufferEj+0x22>
    1890:	1b 82       	std	Y+3, r1	; 0x03
    1892:	1a 82       	std	Y+2, r1	; 0x02
    1894:	1d 82       	std	Y+5, r1	; 0x05
    1896:	1c 82       	std	Y+4, r1	; 0x04
}
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	08 95       	ret

0000189e <_ZN6StringC1EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	8c 01       	movw	r16, r24
    18a8:	eb 01       	movw	r28, r22
{
  if ( value == NULL )
    18aa:	20 97       	sbiw	r28, 0x00	; 0
    18ac:	11 f4       	brne	.+4      	; 0x18b2 <_ZN6StringC1EPKc+0x14>
    value = "";
    18ae:	c2 e3       	ldi	r28, 0x32	; 50
    18b0:	d1 e0       	ldi	r29, 0x01	; 1
  getBuffer( _length = strlen( value ) );
    18b2:	ec 2f       	mov	r30, r28
    18b4:	fd 2f       	mov	r31, r29
    18b6:	df 01       	movw	r26, r30
    18b8:	0d 90       	ld	r0, X+
    18ba:	00 20       	and	r0, r0
    18bc:	e9 f7       	brne	.-6      	; 0x18b8 <_ZN6StringC1EPKc+0x1a>
    18be:	bd 01       	movw	r22, r26
    18c0:	61 50       	subi	r22, 0x01	; 1
    18c2:	70 40       	sbci	r23, 0x00	; 0
    18c4:	6e 1b       	sub	r22, r30
    18c6:	7f 0b       	sbc	r23, r31
    18c8:	f8 01       	movw	r30, r16
    18ca:	75 83       	std	Z+5, r23	; 0x05
    18cc:	64 83       	std	Z+4, r22	; 0x04
    18ce:	c8 01       	movw	r24, r16
    18d0:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN6String9getBufferEj>
  if ( _buffer != NULL )
    18d4:	d8 01       	movw	r26, r16
    18d6:	8d 91       	ld	r24, X+
    18d8:	9c 91       	ld	r25, X
    18da:	11 97       	sbiw	r26, 0x01	; 1
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	19 f0       	breq	.+6      	; 0x18e6 <_ZN6StringC1EPKc+0x48>
    strcpy( _buffer, value );
    18e0:	be 01       	movw	r22, r28
    18e2:	0e 94 76 21 	call	0x42ec	; 0x42ec <strcpy>
}
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	08 95       	ret

000018f0 <_ZN6StringC1ERKS_>:

String::String( const String &value )
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	ec 01       	movw	r28, r24
    18fa:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    18fc:	fb 01       	movw	r30, r22
    18fe:	64 81       	ldd	r22, Z+4	; 0x04
    1900:	75 81       	ldd	r23, Z+5	; 0x05
    1902:	7d 83       	std	Y+5, r23	; 0x05
    1904:	6c 83       	std	Y+4, r22	; 0x04
    1906:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN6String9getBufferEj>
  if ( _buffer != NULL )
    190a:	88 81       	ld	r24, Y
    190c:	99 81       	ldd	r25, Y+1	; 0x01
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	29 f0       	breq	.+10     	; 0x191c <_ZN6StringC1ERKS_+0x2c>
    strcpy( _buffer, value._buffer );
    1912:	f8 01       	movw	r30, r16
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	0e 94 76 21 	call	0x42ec	; 0x42ec <strcpy>
}
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	08 95       	ret

00001926 <_ZN6StringC1Ec>:

String::String( const char value )
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	ec 01       	movw	r28, r24
    192e:	16 2f       	mov	r17, r22
{
  _length = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9d 83       	std	Y+5, r25	; 0x05
    1936:	8c 83       	std	Y+4, r24	; 0x04
  getBuffer(1);
    1938:	ce 01       	movw	r24, r28
    193a:	61 e0       	ldi	r22, 0x01	; 1
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN6String9getBufferEj>
  if ( _buffer != NULL ) {
    1942:	e8 81       	ld	r30, Y
    1944:	f9 81       	ldd	r31, Y+1	; 0x01
    1946:	30 97       	sbiw	r30, 0x00	; 0
    1948:	21 f0       	breq	.+8      	; 0x1952 <_ZN6StringC1Ec+0x2c>
    _buffer[0] = value;
    194a:	10 83       	st	Z, r17
    _buffer[1] = 0;
    194c:	e8 81       	ld	r30, Y
    194e:	f9 81       	ldd	r31, Y+1	; 0x01
    1950:	11 82       	std	Z+1, r1	; 0x01
  }
}
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	08 95       	ret

0000195a <_ZN6StringC1Eh>:

String::String( const unsigned char value )
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	ec 01       	movw	r28, r24
    1962:	16 2f       	mov	r17, r22
{
  _length = 1;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9d 83       	std	Y+5, r25	; 0x05
    196a:	8c 83       	std	Y+4, r24	; 0x04
  getBuffer(1);
    196c:	ce 01       	movw	r24, r28
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN6String9getBufferEj>
  if ( _buffer != NULL) {
    1976:	e8 81       	ld	r30, Y
    1978:	f9 81       	ldd	r31, Y+1	; 0x01
    197a:	30 97       	sbiw	r30, 0x00	; 0
    197c:	21 f0       	breq	.+8      	; 0x1986 <_ZN6StringC1Eh+0x2c>
    _buffer[0] = value;
    197e:	10 83       	st	Z, r17
    _buffer[1] = 0;
    1980:	e8 81       	ld	r30, Y
    1982:	f9 81       	ldd	r31, Y+1	; 0x01
    1984:	11 82       	std	Z+1, r1	; 0x01
  }
}
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	08 95       	ret

0000198e <_ZN6StringC1Eii>:

String::String( const int value, const int base )
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	a1 97       	sbiw	r28, 0x21	; 33
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	cd bf       	out	0x3d, r28	; 61
    19aa:	7c 01       	movw	r14, r24
    19ac:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    19ae:	8e 01       	movw	r16, r28
    19b0:	0f 5f       	subi	r16, 0xFF	; 255
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
    19b4:	b8 01       	movw	r22, r16
    19b6:	0e 94 bf 21 	call	0x437e	; 0x437e <itoa>
  getBuffer( _length = strlen(buf) );
    19ba:	f8 01       	movw	r30, r16
    19bc:	01 90       	ld	r0, Z+
    19be:	00 20       	and	r0, r0
    19c0:	e9 f7       	brne	.-6      	; 0x19bc <_ZN6StringC1Eii+0x2e>
    19c2:	bf 01       	movw	r22, r30
    19c4:	61 50       	subi	r22, 0x01	; 1
    19c6:	70 40       	sbci	r23, 0x00	; 0
    19c8:	60 1b       	sub	r22, r16
    19ca:	71 0b       	sbc	r23, r17
    19cc:	f7 01       	movw	r30, r14
    19ce:	75 83       	std	Z+5, r23	; 0x05
    19d0:	64 83       	std	Z+4, r22	; 0x04
    19d2:	c7 01       	movw	r24, r14
    19d4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN6String9getBufferEj>
  if ( _buffer != NULL )
    19d8:	f7 01       	movw	r30, r14
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	19 f0       	breq	.+6      	; 0x19e8 <_ZN6StringC1Eii+0x5a>
    strcpy( _buffer, buf );
    19e2:	b8 01       	movw	r22, r16
    19e4:	0e 94 76 21 	call	0x42ec	; 0x42ec <strcpy>
}
    19e8:	a1 96       	adiw	r28, 0x21	; 33
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	08 95       	ret

00001a02 <_ZN6StringC1Eji>:

String::String( const unsigned int value, const int base )
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	a1 97       	sbiw	r28, 0x21	; 33
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	7c 01       	movw	r14, r24
    1a20:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	8e 01       	movw	r16, r28
    1a28:	0f 5f       	subi	r16, 0xFF	; 255
    1a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2c:	a8 01       	movw	r20, r16
    1a2e:	0e 94 29 22 	call	0x4452	; 0x4452 <ultoa>
  getBuffer( _length = strlen(buf) );
    1a32:	f8 01       	movw	r30, r16
    1a34:	01 90       	ld	r0, Z+
    1a36:	00 20       	and	r0, r0
    1a38:	e9 f7       	brne	.-6      	; 0x1a34 <_ZN6StringC1Eji+0x32>
    1a3a:	bf 01       	movw	r22, r30
    1a3c:	61 50       	subi	r22, 0x01	; 1
    1a3e:	70 40       	sbci	r23, 0x00	; 0
    1a40:	60 1b       	sub	r22, r16
    1a42:	71 0b       	sbc	r23, r17
    1a44:	f7 01       	movw	r30, r14
    1a46:	75 83       	std	Z+5, r23	; 0x05
    1a48:	64 83       	std	Z+4, r22	; 0x04
    1a4a:	c7 01       	movw	r24, r14
    1a4c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN6String9getBufferEj>
  if ( _buffer != NULL )
    1a50:	f7 01       	movw	r30, r14
    1a52:	80 81       	ld	r24, Z
    1a54:	91 81       	ldd	r25, Z+1	; 0x01
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	19 f0       	breq	.+6      	; 0x1a60 <_ZN6StringC1Eji+0x5e>
    strcpy( _buffer, buf );
    1a5a:	b8 01       	movw	r22, r16
    1a5c:	0e 94 76 21 	call	0x42ec	; 0x42ec <strcpy>
}
    1a60:	a1 96       	adiw	r28, 0x21	; 33
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	1f 91       	pop	r17
    1a72:	0f 91       	pop	r16
    1a74:	ff 90       	pop	r15
    1a76:	ef 90       	pop	r14
    1a78:	08 95       	ret

00001a7a <_ZN6StringC1Eli>:

String::String( const long value, const int base )
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	a1 97       	sbiw	r28, 0x21	; 33
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	7c 01       	movw	r14, r24
{
  char buf[33];   
  ltoa(value, buf, base);
    1a98:	cb 01       	movw	r24, r22
    1a9a:	ba 01       	movw	r22, r20
    1a9c:	8e 01       	movw	r16, r28
    1a9e:	0f 5f       	subi	r16, 0xFF	; 255
    1aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa2:	a8 01       	movw	r20, r16
    1aa4:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <ltoa>
  getBuffer( _length = strlen(buf) );
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	01 90       	ld	r0, Z+
    1aac:	00 20       	and	r0, r0
    1aae:	e9 f7       	brne	.-6      	; 0x1aaa <_ZN6StringC1Eli+0x30>
    1ab0:	bf 01       	movw	r22, r30
    1ab2:	61 50       	subi	r22, 0x01	; 1
    1ab4:	70 40       	sbci	r23, 0x00	; 0
    1ab6:	60 1b       	sub	r22, r16
    1ab8:	71 0b       	sbc	r23, r17
    1aba:	f7 01       	movw	r30, r14
    1abc:	75 83       	std	Z+5, r23	; 0x05
    1abe:	64 83       	std	Z+4, r22	; 0x04
    1ac0:	c7 01       	movw	r24, r14
    1ac2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN6String9getBufferEj>
  if ( _buffer != NULL )
    1ac6:	f7 01       	movw	r30, r14
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	19 f0       	breq	.+6      	; 0x1ad6 <_ZN6StringC1Eli+0x5c>
    strcpy( _buffer, buf );
    1ad0:	b8 01       	movw	r22, r16
    1ad2:	0e 94 76 21 	call	0x42ec	; 0x42ec <strcpy>
}
    1ad6:	a1 96       	adiw	r28, 0x21	; 33
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	08 95       	ret

00001af0 <_ZN6StringC1Emi>:

String::String( const unsigned long value, const int base )
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	a1 97       	sbiw	r28, 0x21	; 33
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	7c 01       	movw	r14, r24
{
  char buf[33];   
  ultoa(value, buf, 10);
    1b0e:	cb 01       	movw	r24, r22
    1b10:	ba 01       	movw	r22, r20
    1b12:	8e 01       	movw	r16, r28
    1b14:	0f 5f       	subi	r16, 0xFF	; 255
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	a8 01       	movw	r20, r16
    1b1a:	2a e0       	ldi	r18, 0x0A	; 10
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	0e 94 29 22 	call	0x4452	; 0x4452 <ultoa>
  getBuffer( _length = strlen(buf) );
    1b22:	f8 01       	movw	r30, r16
    1b24:	01 90       	ld	r0, Z+
    1b26:	00 20       	and	r0, r0
    1b28:	e9 f7       	brne	.-6      	; 0x1b24 <_ZN6StringC1Emi+0x34>
    1b2a:	bf 01       	movw	r22, r30
    1b2c:	61 50       	subi	r22, 0x01	; 1
    1b2e:	70 40       	sbci	r23, 0x00	; 0
    1b30:	60 1b       	sub	r22, r16
    1b32:	71 0b       	sbc	r23, r17
    1b34:	f7 01       	movw	r30, r14
    1b36:	75 83       	std	Z+5, r23	; 0x05
    1b38:	64 83       	std	Z+4, r22	; 0x04
    1b3a:	c7 01       	movw	r24, r14
    1b3c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN6String9getBufferEj>
  if ( _buffer != NULL )
    1b40:	f7 01       	movw	r30, r14
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	19 f0       	breq	.+6      	; 0x1b50 <_ZN6StringC1Emi+0x60>
    strcpy( _buffer, buf );
    1b4a:	b8 01       	movw	r22, r16
    1b4c:	0e 94 76 21 	call	0x42ec	; 0x42ec <strcpy>
}
    1b50:	a1 96       	adiw	r28, 0x21	; 33
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	08 95       	ret

00001b6a <_ZNK6String6charAtEj>:
}

char String::operator[]( unsigned int index ) const
{
  // need to check for valid index, to do later
  return _buffer[ index ];
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	ed 91       	ld	r30, X+
    1b6e:	fc 91       	ld	r31, X
    1b70:	11 97       	sbiw	r26, 0x01	; 1
    1b72:	e6 0f       	add	r30, r22
    1b74:	f7 1f       	adc	r31, r23
}

char String::charAt( unsigned int loc ) const
{
  return operator[]( loc );
}
    1b76:	80 81       	ld	r24, Z
    1b78:	08 95       	ret

00001b7a <_ZN6String9setCharAtEjc>:

void String::setCharAt( unsigned int loc, const char aChar ) 
{
    1b7a:	fc 01       	movw	r30, r24
  if(_buffer == NULL) return;
    1b7c:	80 81       	ld	r24, Z
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	49 f0       	breq	.+18     	; 0x1b96 <_ZN6String9setCharAtEjc+0x1c>
  if(_length > loc) {
    1b84:	24 81       	ldd	r18, Z+4	; 0x04
    1b86:	35 81       	ldd	r19, Z+5	; 0x05
    1b88:	62 17       	cp	r22, r18
    1b8a:	73 07       	cpc	r23, r19
    1b8c:	20 f4       	brcc	.+8      	; 0x1b96 <_ZN6String9setCharAtEjc+0x1c>
    _buffer[loc] = aChar;
    1b8e:	68 0f       	add	r22, r24
    1b90:	79 1f       	adc	r23, r25
    1b92:	fb 01       	movw	r30, r22
    1b94:	40 83       	st	Z, r20
    1b96:	08 95       	ret

00001b98 <_ZNK6String9compareToERKS_>:
  }
}

int String::compareTo( const String &s2 ) const
{
  return strcmp( _buffer, s2._buffer );
    1b98:	fb 01       	movw	r30, r22
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	0e 94 6d 21 	call	0x42da	; 0x42da <strcmp>
}
    1ba8:	08 95       	ret

00001baa <_ZN6StringaSERKS_>:
{
  return (*this) += s2;
}

const String & String::operator=( const String &rhs )
{
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	ec 01       	movw	r28, r24
    1bb4:	8b 01       	movw	r16, r22
  if ( this == &rhs )
    1bb6:	86 17       	cp	r24, r22
    1bb8:	97 07       	cpc	r25, r23
    1bba:	f9 f0       	breq	.+62     	; 0x1bfa <_ZN6StringaSERKS_+0x50>
    return *this;

  if ( rhs._length > _length )
    1bbc:	fb 01       	movw	r30, r22
    1bbe:	24 81       	ldd	r18, Z+4	; 0x04
    1bc0:	35 81       	ldd	r19, Z+5	; 0x05
    1bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc6:	82 17       	cp	r24, r18
    1bc8:	93 07       	cpc	r25, r19
    1bca:	50 f4       	brcc	.+20     	; 0x1be0 <_ZN6StringaSERKS_+0x36>
  {
    free(_buffer);
    1bcc:	88 81       	ld	r24, Y
    1bce:	99 81       	ldd	r25, Y+1	; 0x01
    1bd0:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <free>
    getBuffer( rhs._length );
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	64 81       	ldd	r22, Z+4	; 0x04
    1bd8:	75 81       	ldd	r23, Z+5	; 0x05
    1bda:	ce 01       	movw	r24, r28
    1bdc:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN6String9getBufferEj>
  }
  
  if ( _buffer != NULL ) {
    1be0:	88 81       	ld	r24, Y
    1be2:	99 81       	ldd	r25, Y+1	; 0x01
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	49 f0       	breq	.+18     	; 0x1bfa <_ZN6StringaSERKS_+0x50>
    _length = rhs._length;
    1be8:	f8 01       	movw	r30, r16
    1bea:	24 81       	ldd	r18, Z+4	; 0x04
    1bec:	35 81       	ldd	r19, Z+5	; 0x05
    1bee:	3d 83       	std	Y+5, r19	; 0x05
    1bf0:	2c 83       	std	Y+4, r18	; 0x04
    strcpy( _buffer, rhs._buffer );
    1bf2:	60 81       	ld	r22, Z
    1bf4:	71 81       	ldd	r23, Z+1	; 0x01
    1bf6:	0e 94 76 21 	call	0x42ec	; 0x42ec <strcpy>
  }
  return *this;
}
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	08 95       	ret

00001c06 <_ZN6StringpLERKS_>:
//  _buffer[ _length ] = '\0';
//  return *this;
//}

const String & String::operator+=( const String &other )
{
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	ec 01       	movw	r28, r24
    1c10:	8b 01       	movw	r16, r22
  _length += other._length;
    1c12:	fb 01       	movw	r30, r22
    1c14:	64 81       	ldd	r22, Z+4	; 0x04
    1c16:	75 81       	ldd	r23, Z+5	; 0x05
    1c18:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1c:	68 0f       	add	r22, r24
    1c1e:	79 1f       	adc	r23, r25
    1c20:	7d 83       	std	Y+5, r23	; 0x05
    1c22:	6c 83       	std	Y+4, r22	; 0x04
  if ( _length > _capacity )
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	9b 81       	ldd	r25, Y+3	; 0x03
    1c28:	86 17       	cp	r24, r22
    1c2a:	97 07       	cpc	r25, r23
    1c2c:	c8 f4       	brcc	.+50     	; 0x1c60 <_ZN6StringpLERKS_+0x5a>
  {
    char *temp = (char *)realloc(_buffer, _length + 1);
    1c2e:	6f 5f       	subi	r22, 0xFF	; 255
    1c30:	7f 4f       	sbci	r23, 0xFF	; 255
    1c32:	88 81       	ld	r24, Y
    1c34:	99 81       	ldd	r25, Y+1	; 0x01
    1c36:	0e 94 44 20 	call	0x4088	; 0x4088 <realloc>
    1c3a:	9c 01       	movw	r18, r24
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    if ( temp != NULL ) {
    1c40:	21 15       	cp	r18, r1
    1c42:	31 05       	cpc	r19, r1
    1c44:	29 f0       	breq	.+10     	; 0x1c50 <_ZN6StringpLERKS_+0x4a>
      _buffer = temp;
    1c46:	39 83       	std	Y+1, r19	; 0x01
    1c48:	28 83       	st	Y, r18
      _capacity = _length;
    1c4a:	9b 83       	std	Y+3, r25	; 0x03
    1c4c:	8a 83       	std	Y+2, r24	; 0x02
    1c4e:	08 c0       	rjmp	.+16     	; 0x1c60 <_ZN6StringpLERKS_+0x5a>
    } else {
      _length -= other._length;
    1c50:	f8 01       	movw	r30, r16
    1c52:	24 81       	ldd	r18, Z+4	; 0x04
    1c54:	35 81       	ldd	r19, Z+5	; 0x05
    1c56:	82 1b       	sub	r24, r18
    1c58:	93 0b       	sbc	r25, r19
    1c5a:	9d 83       	std	Y+5, r25	; 0x05
    1c5c:	8c 83       	std	Y+4, r24	; 0x04
      return *this;
    1c5e:	07 c0       	rjmp	.+14     	; 0x1c6e <_ZN6StringpLERKS_+0x68>
    }
  }
  strcat( _buffer, other._buffer );
    1c60:	f8 01       	movw	r30, r16
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	88 81       	ld	r24, Y
    1c68:	99 81       	ldd	r25, Y+1	; 0x01
    1c6a:	0e 94 57 21 	call	0x42ae	; 0x42ae <strcat>
  return *this;
}
    1c6e:	ce 01       	movw	r24, r28
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	08 95       	ret

00001c7a <_ZN6String6concatERKS_>:
  return strcmp( _buffer, s2._buffer );
}

const String & String::concat( const String &s2 )
{
  return (*this) += s2;
    1c7a:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_ZN6StringpLERKS_>
}
    1c7e:	08 95       	ret

00001c80 <_ZNK6StringeqERKS_>:
  return *this;
}


int String::operator==( const String &rhs ) const
{
    1c80:	dc 01       	movw	r26, r24
    1c82:	fb 01       	movw	r30, r22
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    1c84:	14 96       	adiw	r26, 0x04	; 4
    1c86:	8d 91       	ld	r24, X+
    1c88:	9c 91       	ld	r25, X
    1c8a:	15 97       	sbiw	r26, 0x05	; 5
    1c8c:	24 81       	ldd	r18, Z+4	; 0x04
    1c8e:	35 81       	ldd	r19, Z+5	; 0x05
    1c90:	82 17       	cp	r24, r18
    1c92:	93 07       	cpc	r25, r19
    1c94:	59 f4       	brne	.+22     	; 0x1cac <_ZNK6StringeqERKS_+0x2c>
    1c96:	60 81       	ld	r22, Z
    1c98:	71 81       	ldd	r23, Z+1	; 0x01
    1c9a:	8d 91       	ld	r24, X+
    1c9c:	9c 91       	ld	r25, X
    1c9e:	0e 94 6d 21 	call	0x42da	; 0x42da <strcmp>
    1ca2:	9c 01       	movw	r18, r24
  strcat( _buffer, other._buffer );
  return *this;
}


int String::operator==( const String &rhs ) const
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	21 15       	cp	r18, r1
    1ca8:	31 05       	cpc	r19, r1
    1caa:	09 f0       	breq	.+2      	; 0x1cae <_ZNK6StringeqERKS_+0x2e>
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    1cac:	80 e0       	ldi	r24, 0x00	; 0
}
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	08 95       	ret

00001cb2 <_ZNK6StringneERKS_>:

int String::operator!=( const String &rhs ) const
{
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	fb 01       	movw	r30, r22
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    1cb6:	14 96       	adiw	r26, 0x04	; 4
    1cb8:	8d 91       	ld	r24, X+
    1cba:	9c 91       	ld	r25, X
    1cbc:	15 97       	sbiw	r26, 0x05	; 5
    1cbe:	24 81       	ldd	r18, Z+4	; 0x04
    1cc0:	35 81       	ldd	r19, Z+5	; 0x05
    1cc2:	82 17       	cp	r24, r18
    1cc4:	93 07       	cpc	r25, r19
    1cc6:	69 f4       	brne	.+26     	; 0x1ce2 <_ZNK6StringneERKS_+0x30>
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	8d 91       	ld	r24, X+
    1cce:	9c 91       	ld	r25, X
    1cd0:	0e 94 6d 21 	call	0x42da	; 0x42da <strcmp>
    1cd4:	9c 01       	movw	r18, r24
int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	21 15       	cp	r18, r1
    1cda:	31 05       	cpc	r19, r1
    1cdc:	19 f4       	brne	.+6      	; 0x1ce4 <_ZNK6StringneERKS_+0x32>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	01 c0       	rjmp	.+2      	; 0x1ce4 <_ZNK6StringneERKS_+0x32>
{
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
}
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	08 95       	ret

00001ce8 <_ZNK6StringltERKS_>:

int String::operator<( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) < 0;
    1ce8:	fb 01       	movw	r30, r22
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	fc 01       	movw	r30, r24
    1cf0:	80 81       	ld	r24, Z
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	0e 94 6d 21 	call	0x42da	; 0x42da <strcmp>
}
    1cf8:	89 2f       	mov	r24, r25
    1cfa:	88 1f       	adc	r24, r24
    1cfc:	88 27       	eor	r24, r24
    1cfe:	88 1f       	adc	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	08 95       	ret

00001d04 <_ZNK6StringgtERKS_>:

int String::operator>( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) > 0;
    1d04:	fb 01       	movw	r30, r22
    1d06:	60 81       	ld	r22, Z
    1d08:	71 81       	ldd	r23, Z+1	; 0x01
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	0e 94 6d 21 	call	0x42da	; 0x42da <strcmp>
    1d14:	21 e0       	ldi	r18, 0x01	; 1
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	18 16       	cp	r1, r24
    1d1a:	19 06       	cpc	r1, r25
    1d1c:	14 f0       	brlt	.+4      	; 0x1d22 <_ZNK6StringgtERKS_+0x1e>
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
}
    1d22:	c9 01       	movw	r24, r18
    1d24:	08 95       	ret

00001d26 <_ZNK6StringleERKS_>:

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    1d26:	fb 01       	movw	r30, r22
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	80 81       	ld	r24, Z
    1d30:	91 81       	ldd	r25, Z+1	; 0x01
    1d32:	0e 94 6d 21 	call	0x42da	; 0x42da <strcmp>
    1d36:	21 e0       	ldi	r18, 0x01	; 1
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	18 16       	cp	r1, r24
    1d3c:	19 06       	cpc	r1, r25
    1d3e:	14 f4       	brge	.+4      	; 0x1d44 <_ZNK6StringleERKS_+0x1e>
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
}
    1d44:	c9 01       	movw	r24, r18
    1d46:	08 95       	ret

00001d48 <_ZNK6StringgeERKS_>:

int String::operator>=( const String & rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
    1d48:	fb 01       	movw	r30, r22
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	fc 01       	movw	r30, r24
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	0e 94 6d 21 	call	0x42da	; 0x42da <strcmp>
    1d58:	89 2f       	mov	r24, r25
    1d5a:	80 95       	com	r24
}
    1d5c:	88 1f       	adc	r24, r24
    1d5e:	88 27       	eor	r24, r24
    1d60:	88 1f       	adc	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	08 95       	ret

00001d66 <_ZN6StringixEj>:

char & String::operator[]( unsigned int index )
{
    1d66:	fc 01       	movw	r30, r24
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    1d68:	84 81       	ldd	r24, Z+4	; 0x04
    1d6a:	95 81       	ldd	r25, Z+5	; 0x05
    1d6c:	68 17       	cp	r22, r24
    1d6e:	79 07       	cpc	r23, r25
    1d70:	20 f4       	brcc	.+8      	; 0x1d7a <_ZN6StringixEj+0x14>
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	29 f4       	brne	.+10     	; 0x1d84 <_ZN6StringixEj+0x1e>
    dummy_writable_char = 0;
    1d7a:	10 92 09 02 	sts	0x0209, r1
    return dummy_writable_char;
    1d7e:	89 e0       	ldi	r24, 0x09	; 9
    1d80:	92 e0       	ldi	r25, 0x02	; 2
    1d82:	08 95       	ret
  }
  return _buffer[ index ];
    1d84:	86 0f       	add	r24, r22
    1d86:	97 1f       	adc	r25, r23
}
    1d88:	08 95       	ret

00001d8a <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
  // need to check for valid index, to do later
  return _buffer[ index ];
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	ed 91       	ld	r30, X+
    1d8e:	fc 91       	ld	r31, X
    1d90:	11 97       	sbiw	r26, 0x01	; 1
    1d92:	e6 0f       	add	r30, r22
    1d94:	f7 1f       	adc	r31, r23
}
    1d96:	80 81       	ld	r24, Z
    1d98:	08 95       	ret

00001d9a <_ZNK6String8endsWithERKS_>:

boolean String::endsWith( const String &s2 ) const
{
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	db 01       	movw	r26, r22
  if ( _length < s2._length )
    1d9e:	24 81       	ldd	r18, Z+4	; 0x04
    1da0:	35 81       	ldd	r19, Z+5	; 0x05
    1da2:	14 96       	adiw	r26, 0x04	; 4
    1da4:	8d 91       	ld	r24, X+
    1da6:	9c 91       	ld	r25, X
    1da8:	15 97       	sbiw	r26, 0x05	; 5
    1daa:	28 17       	cp	r18, r24
    1dac:	39 07       	cpc	r19, r25
    1dae:	88 f0       	brcs	.+34     	; 0x1dd2 <_ZNK6String8endsWithERKS_+0x38>
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    1db0:	28 1b       	sub	r18, r24
    1db2:	39 0b       	sbc	r19, r25
    1db4:	80 81       	ld	r24, Z
    1db6:	91 81       	ldd	r25, Z+1	; 0x01
    1db8:	6d 91       	ld	r22, X+
    1dba:	7c 91       	ld	r23, X
    1dbc:	82 0f       	add	r24, r18
    1dbe:	93 1f       	adc	r25, r19
    1dc0:	0e 94 6d 21 	call	0x42da	; 0x42da <strcmp>
    1dc4:	9c 01       	movw	r18, r24
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	21 15       	cp	r18, r1
    1dca:	31 05       	cpc	r19, r1
    1dcc:	19 f0       	breq	.+6      	; 0x1dd4 <_ZNK6String8endsWithERKS_+0x3a>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	08 95       	ret
}

boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    return 0;
    1dd2:	80 e0       	ldi	r24, 0x00	; 0

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}
    1dd4:	08 95       	ret

00001dd6 <_ZNK6String6equalsERKS_>:

boolean String::equals( const String &s2 ) const
{
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	fb 01       	movw	r30, r22
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    1dda:	14 96       	adiw	r26, 0x04	; 4
    1ddc:	8d 91       	ld	r24, X+
    1dde:	9c 91       	ld	r25, X
    1de0:	15 97       	sbiw	r26, 0x05	; 5
    1de2:	24 81       	ldd	r18, Z+4	; 0x04
    1de4:	35 81       	ldd	r19, Z+5	; 0x05
    1de6:	82 17       	cp	r24, r18
    1de8:	93 07       	cpc	r25, r19
    1dea:	69 f4       	brne	.+26     	; 0x1e06 <_ZNK6String6equalsERKS_+0x30>
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	8d 91       	ld	r24, X+
    1df2:	9c 91       	ld	r25, X
    1df4:	0e 94 6d 21 	call	0x42da	; 0x42da <strcmp>
    1df8:	9c 01       	movw	r18, r24
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	21 15       	cp	r18, r1
    1dfe:	31 05       	cpc	r19, r1
    1e00:	19 f0       	breq	.+6      	; 0x1e08 <_ZNK6String6equalsERKS_+0x32>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	08 95       	ret
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    1e06:	80 e0       	ldi	r24, 0x00	; 0
}
    1e08:	08 95       	ret

00001e0a <_ZN6String7replaceEcc>:

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
    1e0a:	ef 92       	push	r14
    1e0c:	ff 92       	push	r15
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <_ZN6String7replaceEcc+0xe>
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <_ZN6String7replaceEcc+0x10>
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <_ZN6String7replaceEcc+0x12>
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	8c 01       	movw	r16, r24
    1e22:	fb 01       	movw	r30, r22
    1e24:	e4 2e       	mov	r14, r20
    1e26:	f2 2e       	mov	r15, r18
  if ( _buffer == NULL ) return *this;
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	61 15       	cp	r22, r1
    1e2e:	71 05       	cpc	r23, r1
    1e30:	21 f4       	brne	.+8      	; 0x1e3a <_ZN6String7replaceEcc+0x30>
    1e32:	bf 01       	movw	r22, r30
    1e34:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN6StringC1ERKS_>
    1e38:	19 c0       	rjmp	.+50     	; 0x1e6c <_ZN6String7replaceEcc+0x62>
  String theReturn = _buffer;
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringC1EPKc>
  char* temp = theReturn._buffer;
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
  while( (temp = strchr( temp, findChar )) != 0 )
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <_ZN6String7replaceEcc+0x42>
    *temp = replaceChar;
    1e48:	fc 01       	movw	r30, r24
    1e4a:	f0 82       	st	Z, r15
String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
  String theReturn = _buffer;
  char* temp = theReturn._buffer;
  while( (temp = strchr( temp, findChar )) != 0 )
    1e4c:	6e 2d       	mov	r22, r14
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	0e 94 62 21 	call	0x42c4	; 0x42c4 <strchr>
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	c1 f7       	brne	.-16     	; 0x1e48 <_ZN6String7replaceEcc+0x3e>
    *temp = replaceChar;

  return theReturn;
    1e58:	c8 01       	movw	r24, r16
    1e5a:	be 01       	movw	r22, r28
    1e5c:	6f 5f       	subi	r22, 0xFF	; 255
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN6StringC1ERKS_>
}

String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
  String theReturn = _buffer;
    1e64:	ce 01       	movw	r24, r28
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN6StringD1Ev>
  char* temp = theReturn._buffer;
  while( (temp = strchr( temp, findChar )) != 0 )
    *temp = replaceChar;

  return theReturn;
}
    1e6c:	c8 01       	movw	r24, r16
    1e6e:	26 96       	adiw	r28, 0x06	; 6
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	ff 90       	pop	r15
    1e84:	ef 90       	pop	r14
    1e86:	08 95       	ret

00001e88 <_ZNK6String7indexOfEcj>:
{
  return indexOf( temp, 0 );
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	ca 01       	movw	r24, r20
  if ( fromIndex >= _length )
    1e90:	24 81       	ldd	r18, Z+4	; 0x04
    1e92:	35 81       	ldd	r19, Z+5	; 0x05
    1e94:	42 17       	cp	r20, r18
    1e96:	53 07       	cpc	r21, r19
    1e98:	60 f4       	brcc	.+24     	; 0x1eb2 <_ZNK6String7indexOfEcj+0x2a>
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
    1e9a:	c0 81       	ld	r28, Z
    1e9c:	d1 81       	ldd	r29, Z+1	; 0x01
    1e9e:	8c 0f       	add	r24, r28
    1ea0:	9d 1f       	adc	r25, r29
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	0e 94 62 21 	call	0x42c4	; 0x42c4 <strchr>
  if ( temp == NULL )
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	19 f0       	breq	.+6      	; 0x1eb2 <_ZNK6String7indexOfEcj+0x2a>
    return -1;

  return temp - _buffer;
    1eac:	8c 1b       	sub	r24, r28
    1eae:	9d 0b       	sbc	r25, r29
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <_ZNK6String7indexOfEcj+0x2e>
  if ( fromIndex >= _length )
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
  if ( temp == NULL )
    return -1;
    1eb2:	8f ef       	ldi	r24, 0xFF	; 255
    1eb4:	9f ef       	ldi	r25, 0xFF	; 255

  return temp - _buffer;
}
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <_ZNK6String7indexOfEc>:
  return newString;
}

int String::indexOf( char temp ) const
{
  return indexOf( temp, 0 );
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <_ZNK6String7indexOfEcj>
}
    1ec4:	08 95       	ret

00001ec6 <_ZNK6String7indexOfERKS_j>:
{
  return indexOf( s2, 0 );
}

int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    1ecc:	84 81       	ldd	r24, Z+4	; 0x04
    1ece:	95 81       	ldd	r25, Z+5	; 0x05
    1ed0:	48 17       	cp	r20, r24
    1ed2:	59 07       	cpc	r21, r25
    1ed4:	78 f4       	brcc	.+30     	; 0x1ef4 <_ZNK6String7indexOfERKS_j+0x2e>
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );
    1ed6:	c0 81       	ld	r28, Z
    1ed8:	d1 81       	ldd	r29, Z+1	; 0x01
    1eda:	fb 01       	movw	r30, r22
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	84 0f       	add	r24, r20
    1ee4:	95 1f       	adc	r25, r21
    1ee6:	0e 94 a5 21 	call	0x434a	; 0x434a <strstr>

  if ( theFind == NULL )
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	19 f0       	breq	.+6      	; 0x1ef4 <_ZNK6String7indexOfERKS_j+0x2e>
    return -1;

  return theFind - _buffer; // pointer subtraction
    1eee:	8c 1b       	sub	r24, r28
    1ef0:	9d 0b       	sbc	r25, r29
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <_ZNK6String7indexOfERKS_j+0x32>
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );

  if ( theFind == NULL )
    return -1;
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	9f ef       	ldi	r25, 0xFF	; 255

  return theFind - _buffer; // pointer subtraction
}
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	08 95       	ret

00001efe <_ZNK6String7indexOfERKS_>:
  return temp - _buffer;
}

int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <_ZNK6String7indexOfERKS_j>
}
    1f06:	08 95       	ret

00001f08 <_ZNK6String11lastIndexOfEcj>:
{
  return lastIndexOf( theChar, _length - 1 );
}

int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
    1f08:	df 92       	push	r13
    1f0a:	ef 92       	push	r14
    1f0c:	ff 92       	push	r15
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	ec 01       	movw	r28, r24
  if ( fromIndex >= _length )
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	48 17       	cp	r20, r24
    1f1e:	59 07       	cpc	r21, r25
    1f20:	d8 f4       	brcc	.+54     	; 0x1f58 <_ZNK6String11lastIndexOfEcj+0x50>
    return -1;

  char tempchar = _buffer[fromIndex + 1];
    1f22:	7a 01       	movw	r14, r20
    1f24:	08 94       	sec
    1f26:	e1 1c       	adc	r14, r1
    1f28:	f1 1c       	adc	r15, r1
    1f2a:	e8 81       	ld	r30, Y
    1f2c:	f9 81       	ldd	r31, Y+1	; 0x01
    1f2e:	ee 0d       	add	r30, r14
    1f30:	ff 1d       	adc	r31, r15
    1f32:	d0 80       	ld	r13, Z
  _buffer[fromIndex + 1] = '\0';
    1f34:	10 82       	st	Z, r1
  char* temp = strrchr( _buffer, ch );
    1f36:	08 81       	ld	r16, Y
    1f38:	19 81       	ldd	r17, Y+1	; 0x01
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	0e 94 9a 21 	call	0x4334	; 0x4334 <strrchr>
  _buffer[fromIndex + 1] = tempchar;
    1f42:	0e 0d       	add	r16, r14
    1f44:	1f 1d       	adc	r17, r15
    1f46:	f8 01       	movw	r30, r16
    1f48:	d0 82       	st	Z, r13

  if ( temp == NULL )
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	29 f0       	breq	.+10     	; 0x1f58 <_ZNK6String11lastIndexOfEcj+0x50>
    return -1;

  return temp - _buffer;
    1f4e:	28 81       	ld	r18, Y
    1f50:	39 81       	ldd	r19, Y+1	; 0x01
    1f52:	82 1b       	sub	r24, r18
    1f54:	93 0b       	sbc	r25, r19
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <_ZNK6String11lastIndexOfEcj+0x54>
  _buffer[fromIndex + 1] = '\0';
  char* temp = strrchr( _buffer, ch );
  _buffer[fromIndex + 1] = tempchar;

  if ( temp == NULL )
    return -1;
    1f58:	8f ef       	ldi	r24, 0xFF	; 255
    1f5a:	9f ef       	ldi	r25, 0xFF	; 255

  return temp - _buffer;
}
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	ff 90       	pop	r15
    1f66:	ef 90       	pop	r14
    1f68:	df 90       	pop	r13
    1f6a:	08 95       	ret

00001f6c <_ZNK6String11lastIndexOfEc>:
  return theFind - _buffer; // pointer subtraction
}

int String::lastIndexOf( char theChar ) const
{
  return lastIndexOf( theChar, _length - 1 );
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	44 81       	ldd	r20, Z+4	; 0x04
    1f70:	55 81       	ldd	r21, Z+5	; 0x05
    1f72:	41 50       	subi	r20, 0x01	; 1
    1f74:	50 40       	sbci	r21, 0x00	; 0
    1f76:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <_ZNK6String11lastIndexOfEcj>
}
    1f7a:	08 95       	ret

00001f7c <_ZNK6String10startsWithERKS_j>:

  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	db 01       	movw	r26, r22
    1f80:	9a 01       	movw	r18, r20
  if ( offset > _length - s2._length )
    1f82:	14 96       	adiw	r26, 0x04	; 4
    1f84:	4d 91       	ld	r20, X+
    1f86:	5c 91       	ld	r21, X
    1f88:	15 97       	sbiw	r26, 0x05	; 5
    1f8a:	84 81       	ldd	r24, Z+4	; 0x04
    1f8c:	95 81       	ldd	r25, Z+5	; 0x05
    1f8e:	84 1b       	sub	r24, r20
    1f90:	95 0b       	sbc	r25, r21
    1f92:	82 17       	cp	r24, r18
    1f94:	93 07       	cpc	r25, r19
    1f96:	78 f0       	brcs	.+30     	; 0x1fb6 <_ZNK6String10startsWithERKS_j+0x3a>
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	6d 91       	ld	r22, X+
    1f9e:	7c 91       	ld	r23, X
    1fa0:	82 0f       	add	r24, r18
    1fa2:	93 1f       	adc	r25, r19
    1fa4:	0e 94 7d 21 	call	0x42fa	; 0x42fa <strncmp>
    1fa8:	9c 01       	movw	r18, r24
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	21 15       	cp	r18, r1
    1fae:	31 05       	cpc	r19, r1
    1fb0:	19 f0       	breq	.+6      	; 0x1fb8 <_ZNK6String10startsWithERKS_j+0x3c>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	08 95       	ret
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    return 0;
    1fb6:	80 e0       	ldi	r24, 0x00	; 0

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
}
    1fb8:	08 95       	ret

00001fba <_ZNK6String10startsWithERKS_>:
  return -1;
}

boolean String::startsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    1fba:	fc 01       	movw	r30, r24
    1fbc:	24 81       	ldd	r18, Z+4	; 0x04
    1fbe:	35 81       	ldd	r19, Z+5	; 0x05
    1fc0:	fb 01       	movw	r30, r22
    1fc2:	44 81       	ldd	r20, Z+4	; 0x04
    1fc4:	55 81       	ldd	r21, Z+5	; 0x05
    1fc6:	24 17       	cp	r18, r20
    1fc8:	35 07       	cpc	r19, r21
    1fca:	28 f0       	brcs	.+10     	; 0x1fd6 <_ZNK6String10startsWithERKS_+0x1c>
    return 0;

  return startsWith( s2, 0 );
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_ZNK6String10startsWithERKS_j>
    1fd4:	08 95       	ret
}

boolean String::startsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    return 0;
    1fd6:	80 e0       	ldi	r24, 0x00	; 0

  return startsWith( s2, 0 );
}
    1fd8:	08 95       	ret

00001fda <_ZNK6String9substringEjj>:
{
  return substring( left, _length );
}

String String::substring( unsigned int left, unsigned int right ) const
{
    1fda:	cf 92       	push	r12
    1fdc:	df 92       	push	r13
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	6c 01       	movw	r12, r24
    1fea:	8b 01       	movw	r16, r22
  if ( left > right )
    1fec:	24 17       	cp	r18, r20
    1fee:	35 07       	cpc	r19, r21
    1ff0:	28 f4       	brcc	.+10     	; 0x1ffc <_ZNK6String9substringEjj+0x22>
    1ff2:	94 2f       	mov	r25, r20
    1ff4:	85 2f       	mov	r24, r21
    1ff6:	a9 01       	movw	r20, r18
    1ff8:	29 2f       	mov	r18, r25
    1ffa:	38 2f       	mov	r19, r24
    1ffc:	d8 01       	movw	r26, r16
    1ffe:	14 96       	adiw	r26, 0x04	; 4
    2000:	8d 91       	ld	r24, X+
    2002:	9c 91       	ld	r25, X
    2004:	15 97       	sbiw	r26, 0x05	; 5
    2006:	e9 01       	movw	r28, r18
    2008:	82 17       	cp	r24, r18
    200a:	93 07       	cpc	r25, r19
    200c:	08 f4       	brcc	.+2      	; 0x2010 <_ZNK6String9substringEjj+0x36>
    200e:	ec 01       	movw	r28, r24
  if ( right > _length )
  {
    right = _length;
  } 

  char temp = _buffer[ right ];  // save the replaced character
    2010:	d8 01       	movw	r26, r16
    2012:	ed 91       	ld	r30, X+
    2014:	fc 91       	ld	r31, X
    2016:	11 97       	sbiw	r26, 0x01	; 1
    2018:	ec 0f       	add	r30, r28
    201a:	fd 1f       	adc	r31, r29
    201c:	f0 80       	ld	r15, Z
  _buffer[ right ] = '\0';	
    201e:	10 82       	st	Z, r1
  String outPut = ( _buffer + left );  // pointer arithmetic
    2020:	6d 91       	ld	r22, X+
    2022:	7c 91       	ld	r23, X
    2024:	64 0f       	add	r22, r20
    2026:	75 1f       	adc	r23, r21
    2028:	c6 01       	movw	r24, r12
    202a:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringC1EPKc>
  _buffer[ right ] = temp;  //restore character
    202e:	d8 01       	movw	r26, r16
    2030:	ed 91       	ld	r30, X+
    2032:	fc 91       	ld	r31, X
    2034:	11 97       	sbiw	r26, 0x01	; 1
    2036:	ec 0f       	add	r30, r28
    2038:	fd 1f       	adc	r31, r29
    203a:	f0 82       	st	Z, r15
  return outPut;
}
    203c:	c6 01       	movw	r24, r12
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	ff 90       	pop	r15
    2048:	df 90       	pop	r13
    204a:	cf 90       	pop	r12
    204c:	08 95       	ret

0000204e <_ZNK6String9substringEj>:

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
}

String String::substring( unsigned int left ) const
{
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	ec 01       	movw	r28, r24
  return substring( left, _length );
    2054:	fb 01       	movw	r30, r22
    2056:	24 81       	ldd	r18, Z+4	; 0x04
    2058:	35 81       	ldd	r19, Z+5	; 0x05
    205a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <_ZNK6String9substringEjj>
}
    205e:	ce 01       	movw	r24, r28
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	08 95       	ret

00002066 <_ZNK6String11lastIndexOfERKS_j>:
{
  return lastIndexOf( s2, _length - s2._length );
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
    2066:	af 92       	push	r10
    2068:	bf 92       	push	r11
    206a:	cf 92       	push	r12
    206c:	df 92       	push	r13
    206e:	ef 92       	push	r14
    2070:	ff 92       	push	r15
    2072:	0f 93       	push	r16
    2074:	1f 93       	push	r17
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	00 d0       	rcall	.+0      	; 0x207c <_ZNK6String11lastIndexOfERKS_j+0x16>
    207c:	00 d0       	rcall	.+0      	; 0x207e <_ZNK6String11lastIndexOfERKS_j+0x18>
    207e:	00 d0       	rcall	.+0      	; 0x2080 <_ZNK6String11lastIndexOfERKS_j+0x1a>
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	6c 01       	movw	r12, r24
    2086:	7b 01       	movw	r14, r22
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    2088:	db 01       	movw	r26, r22
    208a:	14 96       	adiw	r26, 0x04	; 4
    208c:	8d 91       	ld	r24, X+
    208e:	9c 91       	ld	r25, X
    2090:	15 97       	sbiw	r26, 0x05	; 5
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	a1 f1       	breq	.+104    	; 0x20fe <_ZNK6String11lastIndexOfERKS_j+0x98>
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	48 17       	cp	r20, r24
    209a:	59 07       	cpc	r21, r25
    209c:	80 f1       	brcs	.+96     	; 0x20fe <_ZNK6String11lastIndexOfERKS_j+0x98>
    209e:	f6 01       	movw	r30, r12
    20a0:	84 81       	ldd	r24, Z+4	; 0x04
    20a2:	95 81       	ldd	r25, Z+5	; 0x05
    20a4:	48 17       	cp	r20, r24
    20a6:	59 07       	cpc	r21, r25
    20a8:	50 f5       	brcc	.+84     	; 0x20fe <_ZNK6String11lastIndexOfERKS_j+0x98>
}

char String::operator[]( unsigned int index ) const
{
  // need to check for valid index, to do later
  return _buffer[ index ];
    20aa:	ed 91       	ld	r30, X+
    20ac:	fc 91       	ld	r31, X
    20ae:	11 97       	sbiw	r26, 0x01	; 1
    20b0:	b0 80       	ld	r11, Z
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    20b2:	8a 01       	movw	r16, r20
    20b4:	22 c0       	rjmp	.+68     	; 0x20fa <_ZNK6String11lastIndexOfERKS_j+0x94>
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    20b6:	d6 01       	movw	r26, r12
    20b8:	ed 91       	ld	r30, X+
    20ba:	fc 91       	ld	r31, X
    20bc:	11 97       	sbiw	r26, 0x01	; 1
    20be:	e0 0f       	add	r30, r16
    20c0:	f1 1f       	adc	r31, r17
    20c2:	80 81       	ld	r24, Z
    20c4:	8b 15       	cp	r24, r11
    20c6:	b9 f4       	brne	.+46     	; 0x20f6 <_ZNK6String11lastIndexOfERKS_j+0x90>
    20c8:	f7 01       	movw	r30, r14
    20ca:	24 81       	ldd	r18, Z+4	; 0x04
    20cc:	35 81       	ldd	r19, Z+5	; 0x05
    20ce:	20 0f       	add	r18, r16
    20d0:	31 1f       	adc	r19, r17
    20d2:	ce 01       	movw	r24, r28
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	b6 01       	movw	r22, r12
    20d8:	a8 01       	movw	r20, r16
    20da:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <_ZNK6String9substringEjj>
    20de:	ce 01       	movw	r24, r28
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	b7 01       	movw	r22, r14
    20e4:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZNK6String6equalsERKS_>
    20e8:	a8 2e       	mov	r10, r24
    20ea:	ce 01       	movw	r24, r28
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN6StringD1Ev>
    20f2:	aa 20       	and	r10, r10
    20f4:	31 f4       	brne	.+12     	; 0x2102 <_ZNK6String11lastIndexOfERKS_j+0x9c>
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    20f6:	01 50       	subi	r16, 0x01	; 1
    20f8:	10 40       	sbci	r17, 0x00	; 0
    20fa:	17 ff       	sbrs	r17, 7
    20fc:	dc cf       	rjmp	.-72     	; 0x20b6 <_ZNK6String11lastIndexOfERKS_j+0x50>

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    return -1;
    20fe:	0f ef       	ldi	r16, 0xFF	; 255
    2100:	1f ef       	ldi	r17, 0xFF	; 255
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    return i;
  }
  return -1;
}
    2102:	c8 01       	movw	r24, r16
    2104:	26 96       	adiw	r28, 0x06	; 6
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	ff 90       	pop	r15
    211a:	ef 90       	pop	r14
    211c:	df 90       	pop	r13
    211e:	cf 90       	pop	r12
    2120:	bf 90       	pop	r11
    2122:	af 90       	pop	r10
    2124:	08 95       	ret

00002126 <_ZNK6String11lastIndexOfERKS_>:
  return temp - _buffer;
}

int String::lastIndexOf( const String &s2 ) const
{
  return lastIndexOf( s2, _length - s2._length );
    2126:	fc 01       	movw	r30, r24
    2128:	44 81       	ldd	r20, Z+4	; 0x04
    212a:	55 81       	ldd	r21, Z+5	; 0x05
    212c:	fb 01       	movw	r30, r22
    212e:	24 81       	ldd	r18, Z+4	; 0x04
    2130:	35 81       	ldd	r19, Z+5	; 0x05
    2132:	42 1b       	sub	r20, r18
    2134:	53 0b       	sbc	r21, r19
    2136:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZNK6String11lastIndexOfERKS_j>
}
    213a:	08 95       	ret

0000213c <_ZN6String7replaceERKS_S1_>:

  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
    213c:	6f 92       	push	r6
    213e:	7f 92       	push	r7
    2140:	8f 92       	push	r8
    2142:	9f 92       	push	r9
    2144:	af 92       	push	r10
    2146:	bf 92       	push	r11
    2148:	cf 92       	push	r12
    214a:	df 92       	push	r13
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	68 97       	sbiw	r28, 0x18	; 24
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	5c 01       	movw	r10, r24
    216a:	fb 01       	movw	r30, r22
    216c:	4a 01       	movw	r8, r20
    216e:	39 01       	movw	r6, r18
  if ( _buffer == NULL ) return *this;
    2170:	60 81       	ld	r22, Z
    2172:	71 81       	ldd	r23, Z+1	; 0x01
    2174:	61 15       	cp	r22, r1
    2176:	71 05       	cpc	r23, r1
    2178:	21 f4       	brne	.+8      	; 0x2182 <_ZN6String7replaceERKS_S1_+0x46>
    217a:	bf 01       	movw	r22, r30
    217c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN6StringC1ERKS_>
    2180:	56 c0       	rjmp	.+172    	; 0x222e <_ZN6String7replaceERKS_S1_+0xf2>
  String temp = _buffer, newString;
    2182:	83 e1       	ldi	r24, 0x13	; 19
    2184:	e8 2e       	mov	r14, r24
    2186:	f1 2c       	mov	r15, r1
    2188:	ec 0e       	add	r14, r28
    218a:	fd 1e       	adc	r15, r29
    218c:	c7 01       	movw	r24, r14
    218e:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringC1EPKc>
    2192:	8e 01       	movw	r16, r28
    2194:	03 5f       	subi	r16, 0xF3	; 243
    2196:	1f 4f       	sbci	r17, 0xFF	; 255
    2198:	c8 01       	movw	r24, r16
    219a:	62 e3       	ldi	r22, 0x32	; 50
    219c:	71 e0       	ldi	r23, 0x01	; 1
    219e:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringC1EPKc>

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
  {
    newString += temp.substring( 0, loc );
    21a2:	68 01       	movw	r12, r16
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    21a4:	29 c0       	rjmp	.+82     	; 0x21f8 <_ZN6String7replaceERKS_S1_+0xbc>
  {
    newString += temp.substring( 0, loc );
    21a6:	07 96       	adiw	r24, 0x07	; 7
    21a8:	b7 01       	movw	r22, r14
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	98 01       	movw	r18, r16
    21b0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <_ZNK6String9substringEjj>
    21b4:	c6 01       	movw	r24, r12
    21b6:	be 01       	movw	r22, r28
    21b8:	69 5f       	subi	r22, 0xF9	; 249
    21ba:	7f 4f       	sbci	r23, 0xFF	; 255
    21bc:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_ZN6StringpLERKS_>
    21c0:	ce 01       	movw	r24, r28
    21c2:	07 96       	adiw	r24, 0x07	; 7
    21c4:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN6StringD1Ev>
    newString += replace;
    21c8:	c6 01       	movw	r24, r12
    21ca:	b3 01       	movw	r22, r6
    21cc:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_ZN6StringpLERKS_>
    temp = temp.substring( loc + match._length );
    21d0:	f4 01       	movw	r30, r8
    21d2:	44 81       	ldd	r20, Z+4	; 0x04
    21d4:	55 81       	ldd	r21, Z+5	; 0x05
    21d6:	40 0f       	add	r20, r16
    21d8:	51 1f       	adc	r21, r17
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	b7 01       	movw	r22, r14
    21e0:	0e 94 27 10 	call	0x204e	; 0x204e <_ZNK6String9substringEj>
    21e4:	c7 01       	movw	r24, r14
    21e6:	be 01       	movw	r22, r28
    21e8:	6f 5f       	subi	r22, 0xFF	; 255
    21ea:	7f 4f       	sbci	r23, 0xFF	; 255
    21ec:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN6StringaSERKS_>
    21f0:	ce 01       	movw	r24, r28
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN6StringD1Ev>
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    21f8:	c7 01       	movw	r24, r14
    21fa:	b4 01       	movw	r22, r8
    21fc:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZNK6String7indexOfERKS_>
    2200:	8c 01       	movw	r16, r24
  {
    newString += temp.substring( 0, loc );
    2202:	ce 01       	movw	r24, r28
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    2204:	ff ef       	ldi	r31, 0xFF	; 255
    2206:	0f 3f       	cpi	r16, 0xFF	; 255
    2208:	1f 07       	cpc	r17, r31
    220a:	69 f6       	brne	.-102    	; 0x21a6 <_ZN6String7replaceERKS_S1_+0x6a>
  {
    newString += temp.substring( 0, loc );
    newString += replace;
    temp = temp.substring( loc + match._length );
  }
  newString += temp;  
    220c:	0d 96       	adiw	r24, 0x0d	; 13
    220e:	b7 01       	movw	r22, r14
    2210:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_ZN6StringpLERKS_>
  return newString;
    2214:	c5 01       	movw	r24, r10
    2216:	be 01       	movw	r22, r28
    2218:	63 5f       	subi	r22, 0xF3	; 243
    221a:	7f 4f       	sbci	r23, 0xFF	; 255
    221c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN6StringC1ERKS_>
}

String String::replace( const String& match, const String& replace )
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;
    2220:	ce 01       	movw	r24, r28
    2222:	0d 96       	adiw	r24, 0x0d	; 13
    2224:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN6StringD1Ev>
    2228:	c7 01       	movw	r24, r14
    222a:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN6StringD1Ev>
    newString += replace;
    temp = temp.substring( loc + match._length );
  }
  newString += temp;  
  return newString;
}
    222e:	c5 01       	movw	r24, r10
    2230:	68 96       	adiw	r28, 0x18	; 24
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	ff 90       	pop	r15
    2246:	ef 90       	pop	r14
    2248:	df 90       	pop	r13
    224a:	cf 90       	pop	r12
    224c:	bf 90       	pop	r11
    224e:	af 90       	pop	r10
    2250:	9f 90       	pop	r9
    2252:	8f 90       	pop	r8
    2254:	7f 90       	pop	r7
    2256:	6f 90       	pop	r6
    2258:	08 95       	ret

0000225a <_ZNK6String11toLowerCaseEv>:
  _buffer[ right ] = temp;  //restore character
  return outPut;
}

String String::toLowerCase() const
{
    225a:	cf 92       	push	r12
    225c:	df 92       	push	r13
    225e:	ef 92       	push	r14
    2260:	ff 92       	push	r15
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	7c 01       	movw	r14, r24
    226c:	6b 01       	movw	r12, r22
  String temp = _buffer;
    226e:	fb 01       	movw	r30, r22
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    2278:	00 e0       	ldi	r16, 0x00	; 0
    227a:	10 e0       	ldi	r17, 0x00	; 0
    227c:	0c c0       	rjmp	.+24     	; 0x2296 <_ZNK6String11toLowerCaseEv+0x3c>
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
    227e:	f7 01       	movw	r30, r14
    2280:	c0 81       	ld	r28, Z
    2282:	d1 81       	ldd	r29, Z+1	; 0x01
    2284:	c0 0f       	add	r28, r16
    2286:	d1 1f       	adc	r29, r17
    2288:	88 81       	ld	r24, Y
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 3e 21 	call	0x427c	; 0x427c <tolower>
    2290:	88 83       	st	Y, r24

String String::toLowerCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    2292:	0f 5f       	subi	r16, 0xFF	; 255
    2294:	1f 4f       	sbci	r17, 0xFF	; 255
    2296:	f6 01       	movw	r30, r12
    2298:	84 81       	ldd	r24, Z+4	; 0x04
    229a:	95 81       	ldd	r25, Z+5	; 0x05
    229c:	08 17       	cp	r16, r24
    229e:	19 07       	cpc	r17, r25
    22a0:	70 f3       	brcs	.-36     	; 0x227e <_ZNK6String11toLowerCaseEv+0x24>
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}
    22a2:	c7 01       	movw	r24, r14
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	df 90       	pop	r13
    22b2:	cf 90       	pop	r12
    22b4:	08 95       	ret

000022b6 <_ZNK6String16equalsIgnoreCaseERKS_>:
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	2c 97       	sbiw	r28, 0x0c	; 12
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	fc 01       	movw	r30, r24
    22d4:	8b 01       	movw	r16, r22
  if ( this == &s2 )
    22d6:	86 17       	cp	r24, r22
    22d8:	97 07       	cpc	r25, r23
    22da:	41 f1       	breq	.+80     	; 0x232c <_ZNK6String16equalsIgnoreCaseERKS_+0x76>
    return true; //1;
  else if ( _length != s2._length )
    22dc:	84 81       	ldd	r24, Z+4	; 0x04
    22de:	95 81       	ldd	r25, Z+5	; 0x05
    22e0:	db 01       	movw	r26, r22
    22e2:	14 96       	adiw	r26, 0x04	; 4
    22e4:	2d 91       	ld	r18, X+
    22e6:	3c 91       	ld	r19, X
    22e8:	15 97       	sbiw	r26, 0x05	; 5
    22ea:	82 17       	cp	r24, r18
    22ec:	93 07       	cpc	r25, r19
    22ee:	01 f5       	brne	.+64     	; 0x2330 <_ZNK6String16equalsIgnoreCaseERKS_+0x7a>
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
    22f0:	ce 01       	movw	r24, r28
    22f2:	07 96       	adiw	r24, 0x07	; 7
    22f4:	bf 01       	movw	r22, r30
    22f6:	0e 94 2d 11 	call	0x225a	; 0x225a <_ZNK6String11toLowerCaseEv>
    22fa:	ef 80       	ldd	r14, Y+7	; 0x07
    22fc:	f8 84       	ldd	r15, Y+8	; 0x08
    22fe:	ce 01       	movw	r24, r28
    2300:	01 96       	adiw	r24, 0x01	; 1
    2302:	b8 01       	movw	r22, r16
    2304:	0e 94 2d 11 	call	0x225a	; 0x225a <_ZNK6String11toLowerCaseEv>
    2308:	69 81       	ldd	r22, Y+1	; 0x01
    230a:	7a 81       	ldd	r23, Y+2	; 0x02
    230c:	c7 01       	movw	r24, r14
    230e:	0e 94 6d 21 	call	0x42da	; 0x42da <strcmp>
    2312:	01 e0       	ldi	r16, 0x01	; 1
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	09 f0       	breq	.+2      	; 0x231a <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
    2318:	00 e0       	ldi	r16, 0x00	; 0
    231a:	ce 01       	movw	r24, r28
    231c:	01 96       	adiw	r24, 0x01	; 1
    231e:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN6StringD1Ev>
    2322:	ce 01       	movw	r24, r28
    2324:	07 96       	adiw	r24, 0x07	; 7
    2326:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN6StringD1Ev>
    232a:	03 c0       	rjmp	.+6      	; 0x2332 <_ZNK6String16equalsIgnoreCaseERKS_+0x7c>
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
  if ( this == &s2 )
    return true; //1;
    232c:	01 e0       	ldi	r16, 0x01	; 1
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <_ZNK6String16equalsIgnoreCaseERKS_+0x7c>
  else if ( _length != s2._length )
    return false; //0;
    2330:	00 e0       	ldi	r16, 0x00	; 0

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}
    2332:	80 2f       	mov	r24, r16
    2334:	2c 96       	adiw	r28, 0x0c	; 12
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	0f 91       	pop	r16
    2348:	ff 90       	pop	r15
    234a:	ef 90       	pop	r14
    234c:	08 95       	ret

0000234e <_ZNK6String11toUpperCaseEv>:
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}

String String::toUpperCase() const
{
    234e:	cf 92       	push	r12
    2350:	df 92       	push	r13
    2352:	ef 92       	push	r14
    2354:	ff 92       	push	r15
    2356:	0f 93       	push	r16
    2358:	1f 93       	push	r17
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	7c 01       	movw	r14, r24
    2360:	6b 01       	movw	r12, r22
  String temp = _buffer;
    2362:	fb 01       	movw	r30, r22
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    236c:	00 e0       	ldi	r16, 0x00	; 0
    236e:	10 e0       	ldi	r17, 0x00	; 0
    2370:	0c c0       	rjmp	.+24     	; 0x238a <_ZNK6String11toUpperCaseEv+0x3c>
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
    2372:	f7 01       	movw	r30, r14
    2374:	c0 81       	ld	r28, Z
    2376:	d1 81       	ldd	r29, Z+1	; 0x01
    2378:	c0 0f       	add	r28, r16
    237a:	d1 1f       	adc	r29, r17
    237c:	88 81       	ld	r24, Y
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	0e 94 46 21 	call	0x428c	; 0x428c <toupper>
    2384:	88 83       	st	Y, r24

String String::toUpperCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    2386:	0f 5f       	subi	r16, 0xFF	; 255
    2388:	1f 4f       	sbci	r17, 0xFF	; 255
    238a:	f6 01       	movw	r30, r12
    238c:	84 81       	ldd	r24, Z+4	; 0x04
    238e:	95 81       	ldd	r25, Z+5	; 0x05
    2390:	08 17       	cp	r16, r24
    2392:	19 07       	cpc	r17, r25
    2394:	70 f3       	brcs	.-36     	; 0x2372 <_ZNK6String11toUpperCaseEv+0x24>
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}
    2396:	c7 01       	movw	r24, r14
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	ff 90       	pop	r15
    23a2:	ef 90       	pop	r14
    23a4:	df 90       	pop	r13
    23a6:	cf 90       	pop	r12
    23a8:	08 95       	ret

000023aa <_ZNK6String4trimEv>:

String String::trim() const
{
    23aa:	af 92       	push	r10
    23ac:	bf 92       	push	r11
    23ae:	cf 92       	push	r12
    23b0:	df 92       	push	r13
    23b2:	ef 92       	push	r14
    23b4:	ff 92       	push	r15
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <_ZNK6String4trimEv+0x16>
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <_ZNK6String4trimEv+0x18>
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <_ZNK6String4trimEv+0x1a>
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	5c 01       	movw	r10, r24
    23ca:	6b 01       	movw	r12, r22
  if ( _buffer == NULL ) return *this;
    23cc:	db 01       	movw	r26, r22
    23ce:	6d 91       	ld	r22, X+
    23d0:	7c 91       	ld	r23, X
    23d2:	11 97       	sbiw	r26, 0x01	; 1
    23d4:	61 15       	cp	r22, r1
    23d6:	71 05       	cpc	r23, r1
    23d8:	21 f4       	brne	.+8      	; 0x23e2 <_ZNK6String4trimEv+0x38>
    23da:	b6 01       	movw	r22, r12
    23dc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN6StringC1ERKS_>
    23e0:	3c c0       	rjmp	.+120    	; 0x245a <_ZNK6String4trimEv+0xb0>
  String temp = _buffer;
    23e2:	ce 01       	movw	r24, r28
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6StringC1EPKc>
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    23ea:	f6 01       	movw	r30, r12
    23ec:	04 81       	ldd	r16, Z+4	; 0x04
    23ee:	15 81       	ldd	r17, Z+5	; 0x05
    23f0:	ee 24       	eor	r14, r14
    23f2:	ff 24       	eor	r15, r15
    23f4:	0e c0       	rjmp	.+28     	; 0x2412 <_ZNK6String4trimEv+0x68>
  {
    if ( !isspace(_buffer[i]) )
    23f6:	d6 01       	movw	r26, r12
    23f8:	ed 91       	ld	r30, X+
    23fa:	fc 91       	ld	r31, X
    23fc:	ee 0d       	add	r30, r14
    23fe:	ff 1d       	adc	r31, r15
    2400:	80 81       	ld	r24, Z
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 94 36 21 	call	0x426c	; 0x426c <isspace>
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	31 f0       	breq	.+12     	; 0x2418 <_ZNK6String4trimEv+0x6e>
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer;
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    240c:	08 94       	sec
    240e:	e1 1c       	adc	r14, r1
    2410:	f1 1c       	adc	r15, r1
    2412:	e0 16       	cp	r14, r16
    2414:	f1 06       	cpc	r15, r17
    2416:	79 f7       	brne	.-34     	; 0x23f6 <_ZNK6String4trimEv+0x4c>
  {
    if ( !isspace(_buffer[i]) )
      break;
  }

  for ( j = temp._length - 1; j > i; j-- )
    2418:	0d 81       	ldd	r16, Y+5	; 0x05
    241a:	1e 81       	ldd	r17, Y+6	; 0x06
    241c:	0b c0       	rjmp	.+22     	; 0x2434 <_ZNK6String4trimEv+0x8a>
  {
    if ( !isspace(_buffer[j]) )
    241e:	d6 01       	movw	r26, r12
    2420:	ed 91       	ld	r30, X+
    2422:	fc 91       	ld	r31, X
    2424:	e0 0f       	add	r30, r16
    2426:	f1 1f       	adc	r31, r17
    2428:	80 81       	ld	r24, Z
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	0e 94 36 21 	call	0x426c	; 0x426c <isspace>
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	29 f0       	breq	.+10     	; 0x243e <_ZNK6String4trimEv+0x94>
  {
    if ( !isspace(_buffer[i]) )
      break;
  }

  for ( j = temp._length - 1; j > i; j-- )
    2434:	01 50       	subi	r16, 0x01	; 1
    2436:	10 40       	sbci	r17, 0x00	; 0
    2438:	e0 16       	cp	r14, r16
    243a:	f1 06       	cpc	r15, r17
    243c:	80 f3       	brcs	.-32     	; 0x241e <_ZNK6String4trimEv+0x74>
  {
    if ( !isspace(_buffer[j]) )
      break;
  }

  return temp.substring( i, j + 1);
    243e:	98 01       	movw	r18, r16
    2440:	2f 5f       	subi	r18, 0xFF	; 255
    2442:	3f 4f       	sbci	r19, 0xFF	; 255
    2444:	c5 01       	movw	r24, r10
    2446:	be 01       	movw	r22, r28
    2448:	6f 5f       	subi	r22, 0xFF	; 255
    244a:	7f 4f       	sbci	r23, 0xFF	; 255
    244c:	a7 01       	movw	r20, r14
    244e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <_ZNK6String9substringEjj>
}

String String::trim() const
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer;
    2452:	ce 01       	movw	r24, r28
    2454:	01 96       	adiw	r24, 0x01	; 1
    2456:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN6StringD1Ev>
    if ( !isspace(_buffer[j]) )
      break;
  }

  return temp.substring( i, j + 1);
}
    245a:	c5 01       	movw	r24, r10
    245c:	26 96       	adiw	r28, 0x06	; 6
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	ff 90       	pop	r15
    2472:	ef 90       	pop	r14
    2474:	df 90       	pop	r13
    2476:	cf 90       	pop	r12
    2478:	bf 90       	pop	r11
    247a:	af 90       	pop	r10
    247c:	08 95       	ret

0000247e <_ZN6String8getBytesEPhj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
    247e:	0f 93       	push	r16
    2480:	1f 93       	push	r17
    2482:	cf 93       	push	r28
    2484:	df 93       	push	r29
    2486:	fc 01       	movw	r30, r24
    2488:	8b 01       	movw	r16, r22
  if (!bufsize || !buf) return;
    248a:	41 15       	cp	r20, r1
    248c:	51 05       	cpc	r21, r1
    248e:	a1 f0       	breq	.+40     	; 0x24b8 <_ZN6String8getBytesEPhj+0x3a>
    2490:	61 15       	cp	r22, r1
    2492:	71 05       	cpc	r23, r1
    2494:	89 f0       	breq	.+34     	; 0x24b8 <_ZN6String8getBytesEPhj+0x3a>
  unsigned int len = bufsize - 1;
    2496:	84 81       	ldd	r24, Z+4	; 0x04
    2498:	95 81       	ldd	r25, Z+5	; 0x05
    249a:	ea 01       	movw	r28, r20
    249c:	21 97       	sbiw	r28, 0x01	; 1
    249e:	8c 17       	cp	r24, r28
    24a0:	9d 07       	cpc	r25, r29
    24a2:	08 f4       	brcc	.+2      	; 0x24a6 <_ZN6String8getBytesEPhj+0x28>
    24a4:	ec 01       	movw	r28, r24
  if (len > _length) len = _length;
  strncpy((char *)buf, _buffer, len);
    24a6:	60 81       	ld	r22, Z
    24a8:	71 81       	ldd	r23, Z+1	; 0x01
    24aa:	c8 01       	movw	r24, r16
    24ac:	ae 01       	movw	r20, r28
    24ae:	0e 94 8b 21 	call	0x4316	; 0x4316 <strncpy>
  buf[len] = 0;
    24b2:	c0 0f       	add	r28, r16
    24b4:	d1 1f       	adc	r29, r17
    24b6:	18 82       	st	Y, r1
}
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	1f 91       	pop	r17
    24be:	0f 91       	pop	r16
    24c0:	08 95       	ret

000024c2 <_ZN6String11toCharArrayEPcj>:

void String::toCharArray(char *buf, unsigned int bufsize)
{
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	fc 01       	movw	r30, r24
    24cc:	8b 01       	movw	r16, r22
  if (!bufsize || !buf) return;
    24ce:	41 15       	cp	r20, r1
    24d0:	51 05       	cpc	r21, r1
    24d2:	a1 f0       	breq	.+40     	; 0x24fc <_ZN6String11toCharArrayEPcj+0x3a>
    24d4:	61 15       	cp	r22, r1
    24d6:	71 05       	cpc	r23, r1
    24d8:	89 f0       	breq	.+34     	; 0x24fc <_ZN6String11toCharArrayEPcj+0x3a>
  unsigned int len = bufsize - 1;
    24da:	84 81       	ldd	r24, Z+4	; 0x04
    24dc:	95 81       	ldd	r25, Z+5	; 0x05
    24de:	ea 01       	movw	r28, r20
    24e0:	21 97       	sbiw	r28, 0x01	; 1
    24e2:	8c 17       	cp	r24, r28
    24e4:	9d 07       	cpc	r25, r29
    24e6:	08 f4       	brcc	.+2      	; 0x24ea <_ZN6String11toCharArrayEPcj+0x28>
    24e8:	ec 01       	movw	r28, r24
  if (len > _length) len = _length;
  strncpy(buf, _buffer, len);
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	c8 01       	movw	r24, r16
    24f0:	ae 01       	movw	r20, r28
    24f2:	0e 94 8b 21 	call	0x4316	; 0x4316 <strncpy>
  buf[len] = 0;
    24f6:	c0 0f       	add	r28, r16
    24f8:	d1 1f       	adc	r29, r17
    24fa:	18 82       	st	Y, r1
}
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	08 95       	ret

00002506 <_ZN6String5toIntEv>:


long String::toInt() {
  return atol(_buffer);
    2506:	fc 01       	movw	r30, r24
    2508:	80 81       	ld	r24, Z
    250a:	91 81       	ldd	r25, Z+1	; 0x01
    250c:	0e 94 0f 21 	call	0x421e	; 0x421e <atol>
}
    2510:	08 95       	ret

00002512 <_ZL17main_thread_func2m>:

	/* Test finished, flash slowly for pass, fast for fail */
	while (1)
	{
		/* Toggle a LED (STK500-specific) */
		PORTB ^= (1 << 5);
    2512:	c0 e2       	ldi	r28, 0x20	; 32
    2514:	85 b1       	in	r24, 0x05	; 5
    2516:	8c 27       	eor	r24, r28
    2518:	85 b9       	out	0x05, r24	; 5
		Serial.println("Thread 2");
    251a:	80 e5       	ldi	r24, 0x50	; 80
    251c:	91 e0       	ldi	r25, 0x01	; 1
    251e:	63 e3       	ldi	r22, 0x33	; 51
    2520:	71 e0       	ldi	r23, 0x01	; 1
    2522:	0e 94 01 04 	call	0x802	; 0x802 <_ZN5Print7printlnEPKc>
		delay(500);
    2526:	64 ef       	ldi	r22, 0xF4	; 244
    2528:	71 e0       	ldi	r23, 0x01	; 1
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	0e 94 c6 08 	call	0x118c	; 0x118c <delay>
    2532:	f0 cf       	rjmp	.-32     	; 0x2514 <_ZL17main_thread_func2m+0x2>

00002534 <_ZL16main_thread_funcm>:

    /* Test finished, flash slowly for pass, fast for fail */
    while (1)
    {
        /* Toggle a LED (STK500-specific) */
        PORTB ^= (1 << 5);
    2534:	c0 e2       	ldi	r28, 0x20	; 32
    2536:	85 b1       	in	r24, 0x05	; 5
    2538:	8c 27       	eor	r24, r28
    253a:	85 b9       	out	0x05, r24	; 5
		Serial.println("Thread 1");
    253c:	80 e5       	ldi	r24, 0x50	; 80
    253e:	91 e0       	ldi	r25, 0x01	; 1
    2540:	6c e3       	ldi	r22, 0x3C	; 60
    2542:	71 e0       	ldi	r23, 0x01	; 1
    2544:	0e 94 01 04 	call	0x802	; 0x802 <_ZN5Print7printlnEPKc>
		delay(1000);
    2548:	68 ee       	ldi	r22, 0xE8	; 232
    254a:	73 e0       	ldi	r23, 0x03	; 3
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	0e 94 c6 08 	call	0x118c	; 0x118c <delay>
    2554:	f0 cf       	rjmp	.-32     	; 0x2536 <_ZL16main_thread_funcm+0x2>

00002556 <__cxa_pure_virtual>:
#include <avr/pgmspace.h>
//#include "Servo.h"
#include "WProgram.h"

/* Shut up the undefined reference error */
extern "C" void __cxa_pure_virtual() { while (1); }
    2556:	ff cf       	rjmp	.-2      	; 0x2556 <__cxa_pure_virtual>

00002558 <main>:
 * for the OS to be started. Creates an application thread and starts the OS.
 */

int main ( void )
{
	DDRB = 0xFF;
    2558:	8f ef       	ldi	r24, 0xFF	; 255
    255a:	84 b9       	out	0x04, r24	; 4
	init(); //Arduino IDE does this to
    255c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <init>
	Serial.begin(9600);
    2560:	80 e5       	ldi	r24, 0x50	; 80
    2562:	91 e0       	ldi	r25, 0x01	; 1
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	55 e2       	ldi	r21, 0x25	; 37
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN14HardwareSerial5beginEl>

    /**
     * Reuse part of the idle thread's stack for the stack required
     * during this startup function.
     */
    SP = (int)&idle_thread_stack[(IDLE_STACK_SIZE_BYTES/2) - 1];
    2570:	89 e4       	ldi	r24, 0x49	; 73
    2572:	92 e0       	ldi	r25, 0x02	; 2
    2574:	9e bf       	out	0x3e, r25	; 62
    2576:	8d bf       	out	0x3d, r24	; 61
     * OS from prefilling it.
     *
     * If you are not reusing the idle thread's stack during startup then
     * you should pass in the correct size here.
     */
    status = atomOSInit(&idle_thread_stack[IDLE_STACK_SIZE_BYTES - 1], (IDLE_STACK_SIZE_BYTES/2));
    2578:	89 e8       	ldi	r24, 0x89	; 137
    257a:	92 e0       	ldi	r25, 0x02	; 2
    257c:	40 e4       	ldi	r20, 0x40	; 64
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	0e 94 7f 14 	call	0x28fe	; 0x28fe <atomOSInit>
    if (status == ATOM_OK)
    2588:	88 23       	and	r24, r24
    258a:	41 f5       	brne	.+80     	; 0x25dc <main+0x84>
    {
        /* Enable the system tick timer */
        avrInitSystemTickTimer();
    258c:	0e 94 65 16 	call	0x2cca	; 0x2cca <avrInitSystemTickTimer>

        /* Create an application thread */
        status = atomThreadCreate(&main_tcb,
                     TEST_THREAD_PRIO, main_thread_func, 0,
                     &main_thread_stack[MAIN_STACK_SIZE_BYTES - 1],
                     MAIN_STACK_SIZE_BYTES);
    2590:	8a e8       	ldi	r24, 0x8A	; 138
    2592:	92 e0       	ldi	r25, 0x02	; 2
    2594:	60 e1       	ldi	r22, 0x10	; 16
    2596:	4a e9       	ldi	r20, 0x9A	; 154
    2598:	52 e1       	ldi	r21, 0x12	; 18
    259a:	00 e0       	ldi	r16, 0x00	; 0
    259c:	10 e0       	ldi	r17, 0x00	; 0
    259e:	98 01       	movw	r18, r16
    25a0:	76 e6       	ldi	r23, 0x66	; 102
    25a2:	e7 2e       	mov	r14, r23
    25a4:	73 e0       	ldi	r23, 0x03	; 3
    25a6:	f7 2e       	mov	r15, r23
    25a8:	ec ec       	ldi	r30, 0xCC	; 204
    25aa:	ae 2e       	mov	r10, r30
    25ac:	b1 2c       	mov	r11, r1
    25ae:	c1 2c       	mov	r12, r1
    25b0:	d1 2c       	mov	r13, r1
    25b2:	0e 94 2e 14 	call	0x285c	; 0x285c <atomThreadCreate>
    25b6:	c8 2f       	mov	r28, r24
		status2 = atomThreadCreate(&main_tcb2,
		TEST_THREAD_PRIO, main_thread_func2, 0,
		&main_thread_stack2[MAIN_STACK_SIZE_BYTES - 1],
		MAIN_STACK_SIZE_BYTES);
    25b8:	87 e6       	ldi	r24, 0x67	; 103
    25ba:	93 e0       	ldi	r25, 0x03	; 3
    25bc:	60 e1       	ldi	r22, 0x10	; 16
    25be:	49 e8       	ldi	r20, 0x89	; 137
    25c0:	52 e1       	ldi	r21, 0x12	; 18
    25c2:	00 e0       	ldi	r16, 0x00	; 0
    25c4:	10 e0       	ldi	r17, 0x00	; 0
    25c6:	98 01       	movw	r18, r16
    25c8:	f3 e4       	ldi	r31, 0x43	; 67
    25ca:	ef 2e       	mov	r14, r31
    25cc:	f4 e0       	ldi	r31, 0x04	; 4
    25ce:	ff 2e       	mov	r15, r31
    25d0:	0e 94 2e 14 	call	0x285c	; 0x285c <atomThreadCreate>
        if (status == ATOM_OK)
    25d4:	cc 23       	and	r28, r28
    25d6:	11 f4       	brne	.+4      	; 0x25dc <main+0x84>
             *
             * Note that interrupts are still disabled at this point.
             * They will be enabled as we restore and execute our first
             * thread in archFirstThreadRestore().
             */
            atomOSStart();
    25d8:	0e 94 c4 13 	call	0x2788	; 0x2788 <atomOSStart>
    25dc:	ff cf       	rjmp	.-2      	; 0x25dc <main+0x84>

000025de <atomIdleThread>:
 * @param[in] param Unused (optional thread entry parameter)
 *
 * @return None
 */
static void atomIdleThread (uint32_t param)
{
    25de:	ff cf       	rjmp	.-2      	; 0x25de <atomIdleThread>

000025e0 <atomIntEnter>:
 * @return None
 */
void atomIntEnter (void)
{
    /* Increment the interrupt count */
    atomIntCnt++;
    25e0:	80 91 49 04 	lds	r24, 0x0449
    25e4:	90 91 4a 04 	lds	r25, 0x044A
    25e8:	01 96       	adiw	r24, 0x01	; 1
    25ea:	90 93 4a 04 	sts	0x044A, r25
    25ee:	80 93 49 04 	sts	0x0449, r24
}
    25f2:	08 95       	ret

000025f4 <atomCurrentContext>:
 * @retval Pointer to current thread's TCB, NULL if in interrupt context
 */
ATOM_TCB *atomCurrentContext (void)
{
    /* Return the current thread's TCB or NULL if in interrupt context */
    if (atomIntCnt == 0)
    25f4:	80 91 49 04 	lds	r24, 0x0449
    25f8:	90 91 4a 04 	lds	r25, 0x044A
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	29 f4       	brne	.+10     	; 0x260a <atomCurrentContext+0x16>
        return (curr_tcb);
    2600:	80 91 47 04 	lds	r24, 0x0447
    2604:	90 91 48 04 	lds	r25, 0x0448
    2608:	08 95       	ret
    else
        return (NULL);
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
}
    260e:	08 95       	ret

00002610 <tcbEnqueuePriority>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t tcbEnqueuePriority (ATOM_TCB **tcb_queue_ptr, ATOM_TCB *tcb_ptr)
{
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	9c 01       	movw	r18, r24
    2616:	db 01       	movw	r26, r22
    uint8_t status;
    ATOM_TCB *prev_ptr, *next_ptr;

    /* Parameter check */
    if ((tcb_queue_ptr == NULL) || (tcb_ptr == NULL))
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	99 f1       	breq	.+102    	; 0x2682 <tcbEnqueuePriority+0x72>
    261c:	10 97       	sbiw	r26, 0x00	; 0
    261e:	89 f1       	breq	.+98     	; 0x2682 <tcbEnqueuePriority+0x72>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Walk the list and enqueue at the end of the TCBs at this priority */
        prev_ptr = next_ptr = *tcb_queue_ptr;
    2620:	ec 01       	movw	r28, r24
    2622:	88 81       	ld	r24, Y
    2624:	99 81       	ldd	r25, Y+1	; 0x01
    2626:	fc 01       	movw	r30, r24
    2628:	ec 01       	movw	r28, r24
        {
            /* Insert if:
             *   next_ptr = NULL (we're at the head of an empty queue or at the tail)
             *   the next TCB in the list is lower priority than the one we're enqueuing.
             */
            if ((next_ptr == NULL) || (next_ptr->priority > tcb_ptr->priority))
    262a:	30 97       	sbiw	r30, 0x00	; 0
    262c:	31 f0       	breq	.+12     	; 0x263a <tcbEnqueuePriority+0x2a>
    262e:	52 81       	ldd	r21, Z+2	; 0x02
    2630:	12 96       	adiw	r26, 0x02	; 2
    2632:	4c 91       	ld	r20, X
    2634:	12 97       	sbiw	r26, 0x02	; 2
    2636:	45 17       	cp	r20, r21
    2638:	f0 f4       	brcc	.+60     	; 0x2676 <tcbEnqueuePriority+0x66>
            {
                /* Make this TCB the new listhead */
                if (next_ptr == *tcb_queue_ptr)
    263a:	e8 17       	cp	r30, r24
    263c:	f9 07       	cpc	r31, r25
    263e:	61 f4       	brne	.+24     	; 0x2658 <tcbEnqueuePriority+0x48>
                {
                    *tcb_queue_ptr = tcb_ptr;
    2640:	e9 01       	movw	r28, r18
    2642:	b9 83       	std	Y+1, r27	; 0x01
    2644:	a8 83       	st	Y, r26
                    tcb_ptr->prev_tcb = NULL;
    2646:	1a 96       	adiw	r26, 0x0a	; 10
    2648:	1c 92       	st	X, r1
    264a:	1e 92       	st	-X, r1
    264c:	19 97       	sbiw	r26, 0x09	; 9
                    tcb_ptr->next_tcb = next_ptr;
    264e:	1c 96       	adiw	r26, 0x0c	; 12
    2650:	fc 93       	st	X, r31
    2652:	ee 93       	st	-X, r30
    2654:	1b 97       	sbiw	r26, 0x0b	; 11
    2656:	0a c0       	rjmp	.+20     	; 0x266c <tcbEnqueuePriority+0x5c>
                        next_ptr->prev_tcb = tcb_ptr;
                }
                /* Insert between two TCBs or at the tail */
                else
                {
                    tcb_ptr->prev_tcb = prev_ptr;
    2658:	1a 96       	adiw	r26, 0x0a	; 10
    265a:	dc 93       	st	X, r29
    265c:	ce 93       	st	-X, r28
    265e:	19 97       	sbiw	r26, 0x09	; 9
                    tcb_ptr->next_tcb = next_ptr;
    2660:	1c 96       	adiw	r26, 0x0c	; 12
    2662:	fc 93       	st	X, r31
    2664:	ee 93       	st	-X, r30
    2666:	1b 97       	sbiw	r26, 0x0b	; 11
                    prev_ptr->next_tcb = tcb_ptr;
    2668:	bc 87       	std	Y+12, r27	; 0x0c
    266a:	ab 87       	std	Y+11, r26	; 0x0b
                    if (next_ptr)
    266c:	30 97       	sbiw	r30, 0x00	; 0
    266e:	59 f0       	breq	.+22     	; 0x2686 <tcbEnqueuePriority+0x76>
                        next_ptr->prev_tcb = tcb_ptr;
    2670:	b2 87       	std	Z+10, r27	; 0x0a
    2672:	a1 87       	std	Z+9, r26	; 0x09
    2674:	08 c0       	rjmp	.+16     	; 0x2686 <tcbEnqueuePriority+0x76>
            }
            else
            {
                /* Not inserting here, try the next one */
                prev_ptr = next_ptr;
                next_ptr = next_ptr->next_tcb;
    2676:	53 85       	ldd	r21, Z+11	; 0x0b
    2678:	44 85       	ldd	r20, Z+12	; 0x0c
    267a:	ef 01       	movw	r28, r30
    267c:	e5 2f       	mov	r30, r21
    267e:	f4 2f       	mov	r31, r20
    2680:	d4 cf       	rjmp	.-88     	; 0x262a <tcbEnqueuePriority+0x1a>

    /* Parameter check */
    if ((tcb_queue_ptr == NULL) || (tcb_ptr == NULL))
    {
        /* Return error */
        status = ATOM_ERR_PARAM;
    2682:	89 ec       	ldi	r24, 0xC9	; 201
    2684:	01 c0       	rjmp	.+2      	; 0x2688 <tcbEnqueuePriority+0x78>
                else
                {
                    tcb_ptr->prev_tcb = prev_ptr;
                    tcb_ptr->next_tcb = next_ptr;
                    prev_ptr->next_tcb = tcb_ptr;
                    if (next_ptr)
    2686:	80 e0       	ldi	r24, 0x00	; 0
        /* Successful */
        status = ATOM_OK;
    }

    return (status);
}
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	08 95       	ret

0000268e <tcbDequeueHead>:
 * @param[in,out] tcb_queue_ptr Pointer to TCB queue head pointer
 *
 * @return Pointer to highest priority TCB on queue, or NULL if queue empty
 */
ATOM_TCB *tcbDequeueHead (ATOM_TCB **tcb_queue_ptr)
{
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	ec 01       	movw	r28, r24
    ATOM_TCB *ret_ptr;

    /* Parameter check */
    if (tcb_queue_ptr == NULL)
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	99 f0       	breq	.+38     	; 0x26be <tcbDequeueHead+0x30>
    {
        /* Return NULL */
        ret_ptr = NULL;
    }
    /* Check for an empty queue */
    else if (*tcb_queue_ptr == NULL)
    2698:	e8 81       	ld	r30, Y
    269a:	f9 81       	ldd	r31, Y+1	; 0x01
    269c:	30 97       	sbiw	r30, 0x00	; 0
    269e:	89 f0       	breq	.+34     	; 0x26c2 <tcbDequeueHead+0x34>
    }
    /* Remove and return the listhead */
    else
    {
        ret_ptr = *tcb_queue_ptr;
        *tcb_queue_ptr = ret_ptr->next_tcb;
    26a0:	a3 85       	ldd	r26, Z+11	; 0x0b
    26a2:	b4 85       	ldd	r27, Z+12	; 0x0c
    26a4:	b9 83       	std	Y+1, r27	; 0x01
    26a6:	a8 83       	st	Y, r26
        if (*tcb_queue_ptr)
    26a8:	10 97       	sbiw	r26, 0x00	; 0
    26aa:	21 f0       	breq	.+8      	; 0x26b4 <tcbDequeueHead+0x26>
            (*tcb_queue_ptr)->prev_tcb = NULL;
    26ac:	1a 96       	adiw	r26, 0x0a	; 10
    26ae:	1c 92       	st	X, r1
    26b0:	1e 92       	st	-X, r1
    26b2:	19 97       	sbiw	r26, 0x09	; 9
        ret_ptr->next_tcb = ret_ptr->prev_tcb = NULL;
    26b4:	12 86       	std	Z+10, r1	; 0x0a
    26b6:	11 86       	std	Z+9, r1	; 0x09
    26b8:	14 86       	std	Z+12, r1	; 0x0c
    26ba:	13 86       	std	Z+11, r1	; 0x0b
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <tcbDequeueHead+0x34>

    /* Parameter check */
    if (tcb_queue_ptr == NULL)
    {
        /* Return NULL */
        ret_ptr = NULL;
    26be:	e0 e0       	ldi	r30, 0x00	; 0
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
            (*tcb_queue_ptr)->prev_tcb = NULL;
        ret_ptr->next_tcb = ret_ptr->prev_tcb = NULL;
    }

    return (ret_ptr);
}
    26c2:	cf 01       	movw	r24, r30
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	08 95       	ret

000026ca <tcbDequeueEntry>:
 * @param[in] tcb_ptr Pointer to TCB to dequeue
 *
 * @return Pointer to the dequeued TCB, or NULL if entry wasn't found
 */
ATOM_TCB *tcbDequeueEntry (ATOM_TCB **tcb_queue_ptr, ATOM_TCB *tcb_ptr)
{
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	ec 01       	movw	r28, r24
    ATOM_TCB *ret_ptr, *prev_ptr, *next_ptr;

    /* Parameter check */
    if (tcb_queue_ptr == NULL)
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	b1 f1       	breq	.+108    	; 0x2740 <tcbDequeueEntry+0x76>
    {
        /* Return NULL */
        ret_ptr = NULL;
    }
    /* Check for an empty queue */
    else if (*tcb_queue_ptr == NULL)
    26d4:	88 81       	ld	r24, Y
    26d6:	99 81       	ldd	r25, Y+1	; 0x01
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	91 f1       	breq	.+100    	; 0x2740 <tcbDequeueEntry+0x76>
    26dc:	dc 01       	movw	r26, r24
    26de:	9c 01       	movw	r18, r24
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <tcbDequeueEntry+0x1c>
    /* Find and remove/return the specified entry */
    else
    {
        ret_ptr = NULL;
        prev_ptr = next_ptr = *tcb_queue_ptr;
        while (next_ptr)
    26e2:	9d 01       	movw	r18, r26
                break;
            }

            /* Move on to the next in the list */
            prev_ptr = next_ptr;
            next_ptr = next_ptr->next_tcb;
    26e4:	da 01       	movw	r26, r20
        ret_ptr = NULL;
        prev_ptr = next_ptr = *tcb_queue_ptr;
        while (next_ptr)
        {
            /* Is this entry the one we're looking for? */
            if (next_ptr == tcb_ptr)
    26e6:	a6 17       	cp	r26, r22
    26e8:	b7 07       	cpc	r27, r23
    26ea:	19 f5       	brne	.+70     	; 0x2732 <tcbDequeueEntry+0x68>
    26ec:	1b 96       	adiw	r26, 0x0b	; 11
    26ee:	ed 91       	ld	r30, X+
    26f0:	fc 91       	ld	r31, X
    26f2:	1c 97       	sbiw	r26, 0x0c	; 12
            {
                if (next_ptr == *tcb_queue_ptr)
    26f4:	a8 17       	cp	r26, r24
    26f6:	b9 07       	cpc	r27, r25
    26f8:	39 f4       	brne	.+14     	; 0x2708 <tcbDequeueEntry+0x3e>
                {
                    /* We're removing the list head */
                    *tcb_queue_ptr = next_ptr->next_tcb;
    26fa:	f9 83       	std	Y+1, r31	; 0x01
    26fc:	e8 83       	st	Y, r30
                    if (*tcb_queue_ptr)
    26fe:	30 97       	sbiw	r30, 0x00	; 0
    2700:	71 f0       	breq	.+28     	; 0x271e <tcbDequeueEntry+0x54>
                        (*tcb_queue_ptr)->prev_tcb = NULL;
    2702:	12 86       	std	Z+10, r1	; 0x0a
    2704:	11 86       	std	Z+9, r1	; 0x09
    2706:	0b c0       	rjmp	.+22     	; 0x271e <tcbDequeueEntry+0x54>
                }
                else
                {
                    /* We're removing a mid or tail TCB */
                    prev_ptr->next_tcb = next_ptr->next_tcb;
    2708:	e9 01       	movw	r28, r18
    270a:	fc 87       	std	Y+12, r31	; 0x0c
    270c:	eb 87       	std	Y+11, r30	; 0x0b
                    if (next_ptr->next_tcb)
    270e:	1b 96       	adiw	r26, 0x0b	; 11
    2710:	ed 91       	ld	r30, X+
    2712:	fc 91       	ld	r31, X
    2714:	1c 97       	sbiw	r26, 0x0c	; 12
    2716:	30 97       	sbiw	r30, 0x00	; 0
    2718:	11 f0       	breq	.+4      	; 0x271e <tcbDequeueEntry+0x54>
                        next_ptr->next_tcb->prev_tcb = prev_ptr;
    271a:	32 87       	std	Z+10, r19	; 0x0a
    271c:	21 87       	std	Z+9, r18	; 0x09
                }
                ret_ptr = next_ptr;
                ret_ptr->prev_tcb = ret_ptr->next_tcb = NULL;
    271e:	1c 96       	adiw	r26, 0x0c	; 12
    2720:	1c 92       	st	X, r1
    2722:	1e 92       	st	-X, r1
    2724:	1b 97       	sbiw	r26, 0x0b	; 11
    2726:	1a 96       	adiw	r26, 0x0a	; 10
    2728:	1c 92       	st	X, r1
    272a:	1e 92       	st	-X, r1
    272c:	19 97       	sbiw	r26, 0x09	; 9
                break;
    272e:	cd 01       	movw	r24, r26
    2730:	09 c0       	rjmp	.+18     	; 0x2744 <tcbDequeueEntry+0x7a>
            }

            /* Move on to the next in the list */
            prev_ptr = next_ptr;
            next_ptr = next_ptr->next_tcb;
    2732:	1b 96       	adiw	r26, 0x0b	; 11
    2734:	4d 91       	ld	r20, X+
    2736:	5c 91       	ld	r21, X
    2738:	1c 97       	sbiw	r26, 0x0c	; 12
    /* Find and remove/return the specified entry */
    else
    {
        ret_ptr = NULL;
        prev_ptr = next_ptr = *tcb_queue_ptr;
        while (next_ptr)
    273a:	41 15       	cp	r20, r1
    273c:	51 05       	cpc	r21, r1
    273e:	89 f6       	brne	.-94     	; 0x26e2 <tcbDequeueEntry+0x18>
    }
    /* Check for an empty queue */
    else if (*tcb_queue_ptr == NULL)
    {
        /* Return NULL */
        ret_ptr = NULL;
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
            next_ptr = next_ptr->next_tcb;
        }
    }

    return (ret_ptr);
}
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	08 95       	ret

0000274a <tcbDequeuePriority>:
 * @param[in] priority Minimum priority to qualify for dequeue
 *
 * @return Pointer to the dequeued TCB, or NULL if none found within priority
 */
ATOM_TCB *tcbDequeuePriority (ATOM_TCB **tcb_queue_ptr, uint8_t priority)
{
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	dc 01       	movw	r26, r24
    ATOM_TCB *ret_ptr;

    /* Parameter check */
    if (tcb_queue_ptr == NULL)
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	a1 f0       	breq	.+40     	; 0x277c <tcbDequeuePriority+0x32>
    {
        /* Return NULL */
        ret_ptr = NULL;
    }
    /* Check for an empty queue */
    else if (*tcb_queue_ptr == NULL)
    2754:	ed 91       	ld	r30, X+
    2756:	fc 91       	ld	r31, X
    2758:	11 97       	sbiw	r26, 0x01	; 1
    275a:	30 97       	sbiw	r30, 0x00	; 0
    275c:	89 f0       	breq	.+34     	; 0x2780 <tcbDequeuePriority+0x36>
    {
        /* Return NULL */
        ret_ptr = NULL;
    }
    /* Check if the list head priority is within our range */
    else if ((*tcb_queue_ptr)->priority <= priority)
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	68 17       	cp	r22, r24
    2762:	60 f0       	brcs	.+24     	; 0x277c <tcbDequeuePriority+0x32>
    {
       /* Remove the list head */
        ret_ptr = *tcb_queue_ptr;
        *tcb_queue_ptr = (*tcb_queue_ptr)->next_tcb;
    2764:	c3 85       	ldd	r28, Z+11	; 0x0b
    2766:	d4 85       	ldd	r29, Z+12	; 0x0c
    2768:	11 96       	adiw	r26, 0x01	; 1
    276a:	dc 93       	st	X, r29
    276c:	ce 93       	st	-X, r28
        if (*tcb_queue_ptr)
    276e:	20 97       	sbiw	r28, 0x00	; 0
    2770:	39 f0       	breq	.+14     	; 0x2780 <tcbDequeuePriority+0x36>
        {
            (*tcb_queue_ptr)->prev_tcb = NULL;
    2772:	1a 86       	std	Y+10, r1	; 0x0a
    2774:	19 86       	std	Y+9, r1	; 0x09
            ret_ptr->next_tcb = NULL;
    2776:	14 86       	std	Z+12, r1	; 0x0c
    2778:	13 86       	std	Z+11, r1	; 0x0b
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <tcbDequeuePriority+0x36>
        }
    }
    else
    {
        /* No higher priority ready threads found */
        ret_ptr = NULL;
    277c:	e0 e0       	ldi	r30, 0x00	; 0
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    }

    return (ret_ptr);
}
    2780:	cf 01       	movw	r24, r30
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	08 95       	ret

00002788 <atomOSStart>:
    /**
     * Enable the OS started flag. This stops routines like atomThreadCreate()
     * attempting to schedule in a newly-created thread until the scheduler is
     * up and running.
     */
    atomOSStarted = TRUE;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	80 93 44 04 	sts	0x0444, r24
     * thread to the ready queue. Take the highest priority one off and
     * schedule it in. If no threads were created, the OS will simply start
     * the idle thread (the lowest priority allowed to be scheduled is the
     * idle thread's priority, 255).
     */
    new_tcb = tcbDequeuePriority (&tcbReadyQ, 255);
    278e:	85 e4       	ldi	r24, 0x45	; 69
    2790:	94 e0       	ldi	r25, 0x04	; 4
    2792:	6f ef       	ldi	r22, 0xFF	; 255
    2794:	0e 94 a5 13 	call	0x274a	; 0x274a <tcbDequeuePriority>
    if (new_tcb)
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	31 f0       	breq	.+12     	; 0x27a8 <atomOSStart+0x20>
    {
        /* Set the new currently-running thread pointer */
        curr_tcb = new_tcb;
    279c:	90 93 48 04 	sts	0x0448, r25
    27a0:	80 93 47 04 	sts	0x0447, r24

        /* Restore and run the first thread */
        archFirstThreadRestore (new_tcb);
    27a4:	0e 94 be 00 	call	0x17c	; 0x17c <archFirstThreadRestore>
    27a8:	08 95       	ret

000027aa <atomSched>:
 * @param[in] timer_tick Should be TRUE when called from the system tick
 *
 * @return None
 */
void atomSched (uint8_t timer_tick)
{
    27aa:	ff 92       	push	r15
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    /**
     * Check the OS has actually started. As long as the proper initialisation
     * sequence is followed there should be no calls here until the OS is
     * started, but we check to handle badly-behaved ports.
     */
    if (atomOSStarted == FALSE)
    27b4:	90 91 44 04 	lds	r25, 0x0444
    27b8:	99 23       	and	r25, r25
    27ba:	e9 f1       	breq	.+122    	; 0x2836 <atomSched+0x8c>
        /* Don't schedule anything in until the OS is started */
        return;
    }

    /* Enter critical section */
    CRITICAL_START ();
    27bc:	ff b6       	in	r15, 0x3f	; 63
    27be:	f8 94       	cli

    /**
     * If the current thread is going into suspension, then
     * unconditionally dequeue the next thread for execution.
     */
    if (curr_tcb->suspended == TRUE)
    27c0:	00 91 47 04 	lds	r16, 0x0447
    27c4:	10 91 48 04 	lds	r17, 0x0448
    27c8:	f8 01       	movw	r30, r16
    27ca:	95 85       	ldd	r25, Z+13	; 0x0d
    27cc:	91 30       	cpi	r25, 0x01	; 1
    27ce:	71 f4       	brne	.+28     	; 0x27ec <atomSched+0x42>
         * Dequeue the next ready to run thread. There will always be
         * at least the idle thread waiting. Note that this could
         * actually be the suspending thread if it was unsuspended
         * before the scheduler was called.
         */
        new_tcb = tcbDequeueHead (&tcbReadyQ);
    27d0:	85 e4       	ldi	r24, 0x45	; 69
    27d2:	94 e0       	ldi	r25, 0x04	; 4
    27d4:	0e 94 47 13 	call	0x268e	; 0x268e <tcbDequeueHead>
    27d8:	bc 01       	movw	r22, r24
     * Check if the new thread is actually the current one, in which
     * case we don't need to do any context switch. This can happen
     * if a thread goes into suspend but is unsuspended again before
     * it is fully scheduled out.
     */
    if (old_tcb != new_tcb)
    27da:	08 17       	cp	r16, r24
    27dc:	19 07       	cpc	r17, r25
    27de:	41 f1       	breq	.+80     	; 0x2830 <atomSched+0x86>
    {
        /* Set the new currently-running thread pointer */
        curr_tcb = new_tcb;
    27e0:	90 93 48 04 	sts	0x0448, r25
    27e4:	80 93 47 04 	sts	0x0447, r24

        /* Call the architecture-specific context switch */
        archContextSwitch (old_tcb, new_tcb);
    27e8:	c8 01       	movw	r24, r16
    27ea:	20 c0       	rjmp	.+64     	; 0x282c <atomSched+0x82>
    27ec:	f8 01       	movw	r30, r16
    27ee:	62 81       	ldd	r22, Z+2	; 0x02
     * if any other threads are ready.
     */
    else
    {
        /* Calculate which priority is allowed to be scheduled in */
        if (timer_tick == TRUE)
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	39 f0       	breq	.+14     	; 0x2802 <atomSched+0x58>
        {
            /* Same priority or higher threads can preempt */
            lowest_pri = (int16_t)curr_tcb->priority;
        }
        else if (curr_tcb->priority > 0)
    27f4:	66 23       	and	r22, r22
    27f6:	f1 f0       	breq	.+60     	; 0x2834 <atomSched+0x8a>
        {
            /* Only higher priority threads can preempt, invalid for 0 (highest) */
            lowest_pri = (int16_t)(curr_tcb->priority - 1);
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	61 50       	subi	r22, 0x01	; 1
    27fc:	70 40       	sbci	r23, 0x00	; 0
             */
            lowest_pri = -1;
        }

        /* Check if a reschedule is allowed */
        if (lowest_pri >= 0)
    27fe:	77 fd       	sbrc	r23, 7
    2800:	19 c0       	rjmp	.+50     	; 0x2834 <atomSched+0x8a>
        {
            /* Check for a thread at the given minimum priority level or higher */
            new_tcb = tcbDequeuePriority (&tcbReadyQ, (uint8_t)lowest_pri);
    2802:	85 e4       	ldi	r24, 0x45	; 69
    2804:	94 e0       	ldi	r25, 0x04	; 4
    2806:	0e 94 a5 13 	call	0x274a	; 0x274a <tcbDequeuePriority>
    280a:	ec 01       	movw	r28, r24

            /* If a thread was found, schedule it in */
            if (new_tcb)
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	91 f0       	breq	.+36     	; 0x2834 <atomSched+0x8a>
            {
                /* Add the current thread to the ready queue */
                (void)tcbEnqueuePriority (&tcbReadyQ, curr_tcb);
    2810:	85 e4       	ldi	r24, 0x45	; 69
    2812:	94 e0       	ldi	r25, 0x04	; 4
    2814:	b8 01       	movw	r22, r16
    2816:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
     * Check if the new thread is actually the current one, in which
     * case we don't need to do any context switch. This can happen
     * if a thread goes into suspend but is unsuspended again before
     * it is fully scheduled out.
     */
    if (old_tcb != new_tcb)
    281a:	0c 17       	cp	r16, r28
    281c:	1d 07       	cpc	r17, r29
    281e:	41 f0       	breq	.+16     	; 0x2830 <atomSched+0x86>
    {
        /* Set the new currently-running thread pointer */
        curr_tcb = new_tcb;
    2820:	d0 93 48 04 	sts	0x0448, r29
    2824:	c0 93 47 04 	sts	0x0447, r28

        /* Call the architecture-specific context switch */
        archContextSwitch (old_tcb, new_tcb);
    2828:	c8 01       	movw	r24, r16
    282a:	be 01       	movw	r22, r28
    282c:	0e 94 8d 00 	call	0x11a	; 0x11a <archContextSwitch>
    /**
     * The context switch shifted execution to a different thread. By the time
     * we get back here, we are running in old_tcb context again. Clear its
     * suspend status now that we're back.
     */
    old_tcb->suspended = FALSE;
    2830:	f8 01       	movw	r30, r16
    2832:	15 86       	std	Z+13, r1	; 0x0d
            }
        }
    }

    /* Exit critical section */
    CRITICAL_END ();
    2834:	ff be       	out	0x3f, r15	; 63
}
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	ff 90       	pop	r15
    2840:	08 95       	ret

00002842 <atomIntExit>:
 * @return None
 */
void atomIntExit (uint8_t timer_tick)
{
    /* Decrement the interrupt count */
    atomIntCnt--;
    2842:	20 91 49 04 	lds	r18, 0x0449
    2846:	30 91 4a 04 	lds	r19, 0x044A
    284a:	21 50       	subi	r18, 0x01	; 1
    284c:	30 40       	sbci	r19, 0x00	; 0
    284e:	30 93 4a 04 	sts	0x044A, r19
    2852:	20 93 49 04 	sts	0x0449, r18

    /* Call the scheduler */
    atomSched (timer_tick);
    2856:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
}
    285a:	08 95       	ret

0000285c <atomThreadCreate>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 * @retval ATOM_ERR_QUEUE Error putting the thread on the ready queue
 */
uint8_t atomThreadCreate (ATOM_TCB *tcb_ptr, uint8_t priority, void (*entry_point)(uint32_t), uint32_t entry_param, void *stack_top, uint32_t stack_size)
{
    285c:	af 92       	push	r10
    285e:	bf 92       	push	r11
    2860:	cf 92       	push	r12
    2862:	df 92       	push	r13
    2864:	ef 92       	push	r14
    2866:	ff 92       	push	r15
    2868:	0f 93       	push	r16
    286a:	1f 93       	push	r17
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	ec 01       	movw	r28, r24
    2872:	e6 2f       	mov	r30, r22
    2874:	b7 01       	movw	r22, r14
    CRITICAL_STORE;
    uint8_t status;

    if ((tcb_ptr == NULL) || (entry_point == NULL) || (stack_top == NULL)
    2876:	20 97       	sbiw	r28, 0x00	; 0
    2878:	a1 f1       	breq	.+104    	; 0x28e2 <atomThreadCreate+0x86>
    287a:	41 15       	cp	r20, r1
    287c:	51 05       	cpc	r21, r1
    287e:	89 f1       	breq	.+98     	; 0x28e2 <atomThreadCreate+0x86>
    2880:	e1 14       	cp	r14, r1
    2882:	f1 04       	cpc	r15, r1
    2884:	71 f1       	breq	.+92     	; 0x28e2 <atomThreadCreate+0x86>
        || (stack_size == 0))
    2886:	a1 14       	cp	r10, r1
    2888:	b1 04       	cpc	r11, r1
    288a:	c1 04       	cpc	r12, r1
    288c:	d1 04       	cpc	r13, r1
    288e:	49 f1       	breq	.+82     	; 0x28e2 <atomThreadCreate+0x86>
    }
    else
    {

        /* Set up the TCB initial values */
        tcb_ptr->suspended = FALSE;
    2890:	1d 86       	std	Y+13, r1	; 0x0d
        tcb_ptr->priority = priority;
    2892:	ea 83       	std	Y+2, r30	; 0x02
        tcb_ptr->prev_tcb = NULL;
    2894:	1a 86       	std	Y+10, r1	; 0x0a
    2896:	19 86       	std	Y+9, r1	; 0x09
        tcb_ptr->next_tcb = NULL;
    2898:	1c 86       	std	Y+12, r1	; 0x0c
    289a:	1b 86       	std	Y+11, r1	; 0x0b
        tcb_ptr->suspend_timo_cb = NULL;
    289c:	18 8a       	std	Y+16, r1	; 0x10
    289e:	1f 86       	std	Y+15, r1	; 0x0f
        /**
         * Store the thread entry point and parameter in the TCB. This may
         * not be necessary for all architecture ports if they put all of
         * this information in the initial thread stack.
         */
        tcb_ptr->entry_point = entry_point;
    28a0:	5c 83       	std	Y+4, r21	; 0x04
    28a2:	4b 83       	std	Y+3, r20	; 0x03
        tcb_ptr->entry_param = entry_param;
    28a4:	0d 83       	std	Y+5, r16	; 0x05
    28a6:	1e 83       	std	Y+6, r17	; 0x06
    28a8:	2f 83       	std	Y+7, r18	; 0x07
    28aa:	38 87       	std	Y+8, r19	; 0x08
         * archContextSwitch() call when this thread gets scheduled in the
         * first time will then restore the program counter to the thread
         * entry point, and any other necessary register values ready for
         * it to start running.
         */
        archThreadContextInit (tcb_ptr, stack_top, entry_point, entry_param);
    28ac:	ce 01       	movw	r24, r28
    28ae:	0e 94 22 16 	call	0x2c44	; 0x2c44 <archThreadContextInit>

        /* Protect access to the OS queue */
        CRITICAL_START ();
    28b2:	0f b7       	in	r16, 0x3f	; 63
    28b4:	f8 94       	cli

        /* Put this thread on the ready queue */
        if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    28b6:	85 e4       	ldi	r24, 0x45	; 69
    28b8:	94 e0       	ldi	r25, 0x04	; 4
    28ba:	be 01       	movw	r22, r28
    28bc:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
        {
            /* Exit critical region */
            CRITICAL_END ();
    28c0:	0f bf       	out	0x3f, r16	; 63

        /* Protect access to the OS queue */
        CRITICAL_START ();

        /* Put this thread on the ready queue */
        if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    28c2:	88 23       	and	r24, r24
    28c4:	11 f0       	breq	.+4      	; 0x28ca <atomThreadCreate+0x6e>
        {
            /* Exit critical region */
            CRITICAL_END ();

            /* Queue-related error */
            status = ATOM_ERR_QUEUE;
    28c6:	8c ec       	ldi	r24, 0xCC	; 204
    28c8:	0f c0       	rjmp	.+30     	; 0x28e8 <atomThreadCreate+0x8c>

            /**
             * If the OS is started and we're in thread context, check if we
             * should be scheduled in now.
             */
            if ((atomOSStarted == TRUE) && atomCurrentContext())
    28ca:	80 91 44 04 	lds	r24, 0x0444
    28ce:	81 30       	cpi	r24, 0x01	; 1
    28d0:	51 f4       	brne	.+20     	; 0x28e6 <atomThreadCreate+0x8a>
    28d2:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	31 f0       	breq	.+12     	; 0x28e6 <atomThreadCreate+0x8a>
                atomSched (FALSE);
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <atomThreadCreate+0x8a>

    if ((tcb_ptr == NULL) || (entry_point == NULL) || (stack_top == NULL)
        || (stack_size == 0))
    {
        /* Bad parameters */
        status = ATOM_ERR_PARAM;
    28e2:	89 ec       	ldi	r24, 0xC9	; 201
    28e4:	01 c0       	rjmp	.+2      	; 0x28e8 <atomThreadCreate+0x8c>
             */
            if ((atomOSStarted == TRUE) && atomCurrentContext())
                atomSched (FALSE);

            /* Success */
            status = ATOM_OK;
    28e6:	80 e0       	ldi	r24, 0x00	; 0
        }
    }

    return (status);
}
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	ff 90       	pop	r15
    28f2:	ef 90       	pop	r14
    28f4:	df 90       	pop	r13
    28f6:	cf 90       	pop	r12
    28f8:	bf 90       	pop	r11
    28fa:	af 90       	pop	r10
    28fc:	08 95       	ret

000028fe <atomOSInit>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERROR Initialisation error
 */
uint8_t atomOSInit (void *idle_thread_stack_top, uint32_t idle_thread_stack_size)
{
    28fe:	af 92       	push	r10
    2900:	bf 92       	push	r11
    2902:	cf 92       	push	r12
    2904:	df 92       	push	r13
    2906:	ef 92       	push	r14
    2908:	ff 92       	push	r15
    290a:	0f 93       	push	r16
    290c:	1f 93       	push	r17
    290e:	7c 01       	movw	r14, r24
    2910:	5a 01       	movw	r10, r20
    2912:	6b 01       	movw	r12, r22
    uint8_t status;

    /* Initialise data */
    curr_tcb = NULL;
    2914:	10 92 48 04 	sts	0x0448, r1
    2918:	10 92 47 04 	sts	0x0447, r1
    tcbReadyQ = NULL;
    291c:	10 92 46 04 	sts	0x0446, r1
    2920:	10 92 45 04 	sts	0x0445, r1
    atomOSStarted = FALSE;
    2924:	10 92 44 04 	sts	0x0444, r1

    /* Create the idle thread */
    status = atomThreadCreate(&idle_tcb,
    2928:	8b e4       	ldi	r24, 0x4B	; 75
    292a:	94 e0       	ldi	r25, 0x04	; 4
    292c:	6f ef       	ldi	r22, 0xFF	; 255
    292e:	4f ee       	ldi	r20, 0xEF	; 239
    2930:	52 e1       	ldi	r21, 0x12	; 18
    2932:	00 e0       	ldi	r16, 0x00	; 0
    2934:	10 e0       	ldi	r17, 0x00	; 0
    2936:	98 01       	movw	r18, r16
    2938:	0e 94 2e 14 	call	0x285c	; 0x285c <atomThreadCreate>
                 idle_thread_stack_size);

    /* Return status */
    return (status);

}
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	ff 90       	pop	r15
    2942:	ef 90       	pop	r14
    2944:	df 90       	pop	r13
    2946:	cf 90       	pop	r12
    2948:	bf 90       	pop	r11
    294a:	af 90       	pop	r10
    294c:	08 95       	ret

0000294e <atomMutexTimerCallback>:
 * mutex details.
 *
 * @param[in] cb_data Pointer to a MUTEX_TIMER object
 */
static void atomMutexTimerCallback (POINTER cb_data)
{
    294e:	1f 93       	push	r17
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	ec 01       	movw	r28, r24

    /* Get the MUTEX_TIMER structure pointer */
    timer_data_ptr = (MUTEX_TIMER *)cb_data;

    /* Check parameter is valid */
    if (timer_data_ptr)
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	b1 f0       	breq	.+44     	; 0x2986 <atomMutexTimerCallback+0x38>
    {
        /* Enter critical region */
        CRITICAL_START ();
    295a:	1f b7       	in	r17, 0x3f	; 63
    295c:	f8 94       	cli

        /* Set status to indicate to the waiting thread that it timed out */
        timer_data_ptr->tcb_ptr->suspend_wake_status = ATOM_TIMEOUT;
    295e:	e8 81       	ld	r30, Y
    2960:	f9 81       	ldd	r31, Y+1	; 0x01
    2962:	82 e0       	ldi	r24, 0x02	; 2
    2964:	86 87       	std	Z+14, r24	; 0x0e

        /* Flag as no timeout registered */
        timer_data_ptr->tcb_ptr->suspend_timo_cb = NULL;
    2966:	68 81       	ld	r22, Y
    2968:	79 81       	ldd	r23, Y+1	; 0x01
    296a:	fb 01       	movw	r30, r22
    296c:	10 8a       	std	Z+16, r1	; 0x10
    296e:	17 86       	std	Z+15, r1	; 0x0f

        /* Remove this thread from the mutex's suspend list */
        (void)tcbDequeueEntry (&timer_data_ptr->mutex_ptr->suspQ, timer_data_ptr->tcb_ptr);
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	9b 81       	ldd	r25, Y+3	; 0x03
    2974:	0e 94 65 13 	call	0x26ca	; 0x26ca <tcbDequeueEntry>

        /* Put the thread on the ready queue */
        (void)tcbEnqueuePriority (&tcbReadyQ, timer_data_ptr->tcb_ptr);
    2978:	68 81       	ld	r22, Y
    297a:	79 81       	ldd	r23, Y+1	; 0x01
    297c:	85 e4       	ldi	r24, 0x45	; 69
    297e:	94 e0       	ldi	r25, 0x04	; 4
    2980:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>

        /* Exit critical region */
        CRITICAL_END ();
    2984:	1f bf       	out	0x3f, r17	; 63
        /**
         * Note that we don't call the scheduler now as it will be called
         * when we exit the ISR by atomIntExit().
         */
    }
}
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	08 95       	ret

0000298e <atomMutexCreate>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t atomMutexCreate (ATOM_MUTEX *mutex)
{
    298e:	fc 01       	movw	r30, r24
    uint8_t status;

    /* Parameter check */
    if (mutex == NULL)
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	39 f0       	breq	.+14     	; 0x29a2 <atomMutexCreate+0x14>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Start with no owner (unlocked) */
        mutex->owner = NULL;
    2994:	13 82       	std	Z+3, r1	; 0x03
    2996:	12 82       	std	Z+2, r1	; 0x02

        /* Reset the initial lock count */
        mutex->count = 0;
    2998:	14 82       	std	Z+4, r1	; 0x04

        /* Initialise the suspended threads queue */
        mutex->suspQ = NULL;
    299a:	11 82       	std	Z+1, r1	; 0x01
    299c:	10 82       	st	Z, r1

        /* Successful */
        status = ATOM_OK;
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	08 95       	ret

    /* Parameter check */
    if (mutex == NULL)
    {
        /* Bad mutex pointer */
        status = ATOM_ERR_PARAM;
    29a2:	89 ec       	ldi	r24, 0xC9	; 201
        /* Successful */
        status = ATOM_OK;
    }

    return (status);
}
    29a4:	08 95       	ret

000029a6 <atomMutexDelete>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_QUEUE Problem putting a woken thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout on a woken thread
 */
uint8_t atomMutexDelete (ATOM_MUTEX *mutex)
{
    29a6:	cf 92       	push	r12
    29a8:	df 92       	push	r13
    29aa:	ef 92       	push	r14
    29ac:	ff 92       	push	r15
    29ae:	0f 93       	push	r16
    29b0:	1f 93       	push	r17
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	0f 92       	push	r0
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	8c 01       	movw	r16, r24
    CRITICAL_STORE;
    ATOM_TCB *tcb_ptr;
    uint8_t woken_threads = FALSE;

    /* Parameter check */
    if (mutex == NULL)
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	b9 f1       	breq	.+110    	; 0x2a30 <atomMutexDelete+0x8a>
    29c2:	19 82       	std	Y+1, r1	; 0x01

            /* A thread is suspended on the mutex */
            if (tcb_ptr)
            {
                /* Return error status to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_ERR_DELETED;
    29c4:	8a ec       	ldi	r24, 0xCA	; 202
    29c6:	e8 2e       	mov	r14, r24

        /* Wake up all suspended tasks */
        while (1)
        {
            /* Enter critical region */
            CRITICAL_START ();
    29c8:	ff b6       	in	r15, 0x3f	; 63
    29ca:	f8 94       	cli

            /* Check if any threads are suspended */
            tcb_ptr = tcbDequeueHead (&mutex->suspQ);
    29cc:	c8 01       	movw	r24, r16
    29ce:	0e 94 47 13 	call	0x268e	; 0x268e <tcbDequeueHead>
    29d2:	6c 01       	movw	r12, r24

            /* A thread is suspended on the mutex */
            if (tcb_ptr)
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	f9 f0       	breq	.+62     	; 0x2a16 <atomMutexDelete+0x70>
            {
                /* Return error status to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_ERR_DELETED;
    29d8:	fc 01       	movw	r30, r24
    29da:	e6 86       	std	Z+14, r14	; 0x0e

                /* Put the thread on the ready queue */
                if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    29dc:	85 e4       	ldi	r24, 0x45	; 69
    29de:	94 e0       	ldi	r25, 0x04	; 4
    29e0:	b6 01       	movw	r22, r12
    29e2:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
    29e6:	88 23       	and	r24, r24
    29e8:	19 f0       	breq	.+6      	; 0x29f0 <atomMutexDelete+0x4a>
                {
                    /* Exit critical region */
                    CRITICAL_END ();
    29ea:	ff be       	out	0x3f, r15	; 63

                    /* Quit the loop, returning error */
                    status = ATOM_ERR_QUEUE;
    29ec:	0c ec       	ldi	r16, 0xCC	; 204
                    break;
    29ee:	15 c0       	rjmp	.+42     	; 0x2a1a <atomMutexDelete+0x74>
                }

                /* If there's a timeout on this suspension, cancel it */
                if (tcb_ptr->suspend_timo_cb)
    29f0:	f6 01       	movw	r30, r12
    29f2:	87 85       	ldd	r24, Z+15	; 0x0f
    29f4:	90 89       	ldd	r25, Z+16	; 0x10
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	51 f0       	breq	.+20     	; 0x2a0e <atomMutexDelete+0x68>
                {
                    /* Cancel the callback */
                    if (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK)
    29fa:	0e 94 14 1b 	call	0x3628	; 0x3628 <atomTimerCancel>
    29fe:	88 23       	and	r24, r24
    2a00:	19 f0       	breq	.+6      	; 0x2a08 <atomMutexDelete+0x62>
                    {
                        /* Exit critical region */
                        CRITICAL_END ();
    2a02:	ff be       	out	0x3f, r15	; 63

                        /* Quit the loop, returning error */
                        status = ATOM_ERR_TIMER;
    2a04:	0d ec       	ldi	r16, 0xCD	; 205
                        break;
    2a06:	09 c0       	rjmp	.+18     	; 0x2a1a <atomMutexDelete+0x74>
                    }

                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
    2a08:	f6 01       	movw	r30, r12
    2a0a:	10 8a       	std	Z+16, r1	; 0x10
    2a0c:	17 86       	std	Z+15, r1	; 0x0f

                }

                /* Exit critical region */
                CRITICAL_END ();
    2a0e:	ff be       	out	0x3f, r15	; 63

                /* Request a reschedule */
                woken_threads = TRUE;
    2a10:	f1 e0       	ldi	r31, 0x01	; 1
    2a12:	f9 83       	std	Y+1, r31	; 0x01
            {
                /* Exit critical region and quit the loop */
                CRITICAL_END ();
                break;
            }
        }
    2a14:	d9 cf       	rjmp	.-78     	; 0x29c8 <atomMutexDelete+0x22>

            /* No more suspended threads */
            else
            {
                /* Exit critical region and quit the loop */
                CRITICAL_END ();
    2a16:	ff be       	out	0x3f, r15	; 63
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Default to success status unless errors occur during wakeup */
        status = ATOM_OK;
    2a18:	00 e0       	ldi	r16, 0x00	; 0
                break;
            }
        }

        /* Call scheduler if any threads were woken up */
        if (woken_threads == TRUE)
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	81 30       	cpi	r24, 0x01	; 1
    2a1e:	49 f4       	brne	.+18     	; 0x2a32 <atomMutexDelete+0x8c>
        {
            /**
             * Only call the scheduler if we are in thread context, otherwise
             * it will be called on exiting the ISR by atomIntExit().
             */
            if (atomCurrentContext())
    2a20:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	29 f0       	breq	.+10     	; 0x2a32 <atomMutexDelete+0x8c>
                atomSched (FALSE);
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <atomMutexDelete+0x8c>

    /* Parameter check */
    if (mutex == NULL)
    {
        /* Bad mutex pointer */
        status = ATOM_ERR_PARAM;
    2a30:	09 ec       	ldi	r16, 0xC9	; 201
                atomSched (FALSE);
        }
    }

    return (status);
}
    2a32:	80 2f       	mov	r24, r16
    2a34:	0f 90       	pop	r0
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	ff 90       	pop	r15
    2a40:	ef 90       	pop	r14
    2a42:	df 90       	pop	r13
    2a44:	cf 90       	pop	r12
    2a46:	08 95       	ret

00002a48 <atomMutexGet>:
 * @retval ATOM_ERR_QUEUE Problem putting the thread on the suspend queue
 * @retval ATOM_ERR_TIMER Problem registering the timeout
 * @retval ATOM_ERR_OVF The recursive lock count would have overflowed (>255)
 */
uint8_t atomMutexGet (ATOM_MUTEX *mutex, int32_t timeout)
{
    2a48:	8f 92       	push	r8
    2a4a:	9f 92       	push	r9
    2a4c:	af 92       	push	r10
    2a4e:	bf 92       	push	r11
    2a50:	df 92       	push	r13
    2a52:	ef 92       	push	r14
    2a54:	ff 92       	push	r15
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	2e 97       	sbiw	r28, 0x0e	; 14
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	f8 94       	cli
    2a68:	de bf       	out	0x3e, r29	; 62
    2a6a:	0f be       	out	0x3f, r0	; 63
    2a6c:	cd bf       	out	0x3d, r28	; 61
    2a6e:	7c 01       	movw	r14, r24
    2a70:	4a 01       	movw	r8, r20
    2a72:	5b 01       	movw	r10, r22
    MUTEX_TIMER timer_data;
    ATOM_TIMER timer_cb;
    ATOM_TCB *curr_tcb_ptr;

    /* Check parameters */
    if (mutex == NULL)
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <atomMutexGet+0x32>
    2a78:	6e c0       	rjmp	.+220    	; 0x2b56 <atomMutexGet+0x10e>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Get the current TCB */
        curr_tcb_ptr = atomCurrentContext();
    2a7a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    2a7e:	8c 01       	movw	r16, r24

        /* Protect access to the mutex object and OS queues */
        CRITICAL_START ();
    2a80:	df b6       	in	r13, 0x3f	; 63
    2a82:	f8 94       	cli
        /**
         * Check we are at thread context. Because mutexes have the concept of
         * owner threads, it is never valid to call here from an ISR,
         * regardless of whether we will block.
         */
        if (curr_tcb_ptr == NULL)
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	19 f4       	brne	.+6      	; 0x2a8e <atomMutexGet+0x46>
        {
            /* Exit critical region */
            CRITICAL_END ();
    2a88:	df be       	out	0x3f, r13	; 63

            /* Not currently in thread context, can't suspend */
            status = ATOM_ERR_CONTEXT;
    2a8a:	88 ec       	ldi	r24, 0xC8	; 200
    2a8c:	65 c0       	rjmp	.+202    	; 0x2b58 <atomMutexGet+0x110>
        }

        /* Otherwise if mutex is owned by another thread, block the calling thread */
        else if ((mutex->owner != NULL) && (mutex->owner != curr_tcb_ptr))
    2a8e:	f7 01       	movw	r30, r14
    2a90:	82 81       	ldd	r24, Z+2	; 0x02
    2a92:	93 81       	ldd	r25, Z+3	; 0x03
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <atomMutexGet+0x52>
    2a98:	4e c0       	rjmp	.+156    	; 0x2b36 <atomMutexGet+0xee>
    2a9a:	80 17       	cp	r24, r16
    2a9c:	91 07       	cpc	r25, r17
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <atomMutexGet+0x5a>
    2aa0:	4a c0       	rjmp	.+148    	; 0x2b36 <atomMutexGet+0xee>
        {
            /* If called with timeout >= 0, we should block */
            if (timeout >= 0)
    2aa2:	b7 fc       	sbrc	r11, 7
    2aa4:	45 c0       	rjmp	.+138    	; 0x2b30 <atomMutexGet+0xe8>
            {
                /* Add current thread to the suspend list on this mutex */
                if (tcbEnqueuePriority (&mutex->suspQ, curr_tcb_ptr) != ATOM_OK)
    2aa6:	c7 01       	movw	r24, r14
    2aa8:	b8 01       	movw	r22, r16
    2aaa:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
    2aae:	88 23       	and	r24, r24
    2ab0:	19 f0       	breq	.+6      	; 0x2ab8 <atomMutexGet+0x70>
                {
                    /* Exit critical region */
                    CRITICAL_END ();
    2ab2:	df be       	out	0x3f, r13	; 63

                    /* There was an error putting this thread on the suspend list */
                    status = ATOM_ERR_QUEUE;
    2ab4:	8c ec       	ldi	r24, 0xCC	; 204
    2ab6:	50 c0       	rjmp	.+160    	; 0x2b58 <atomMutexGet+0x110>
                }
                else
                {
                    /* Set suspended status for the current thread */
                    curr_tcb_ptr->suspended = TRUE;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	f8 01       	movw	r30, r16
    2abc:	85 87       	std	Z+13, r24	; 0x0d

                    /* Track errors */
                    status = ATOM_OK;

                    /* Register a timer callback if requested */
                    if (timeout)
    2abe:	81 14       	cp	r8, r1
    2ac0:	91 04       	cpc	r9, r1
    2ac2:	a1 04       	cpc	r10, r1
    2ac4:	b1 04       	cpc	r11, r1
    2ac6:	11 f1       	breq	.+68     	; 0x2b0c <atomMutexGet+0xc4>
                    {
                        /* Fill out the data needed by the callback to wake us up */
                        timer_data.tcb_ptr = curr_tcb_ptr;
    2ac8:	1a 83       	std	Y+2, r17	; 0x02
    2aca:	09 83       	std	Y+1, r16	; 0x01
                        timer_data.mutex_ptr = mutex;
    2acc:	fc 82       	std	Y+4, r15	; 0x04
    2ace:	eb 82       	std	Y+3, r14	; 0x03

                        /* Fill out the timer callback request structure */
                        timer_cb.cb_func = atomMutexTimerCallback;
    2ad0:	87 ea       	ldi	r24, 0xA7	; 167
    2ad2:	94 e1       	ldi	r25, 0x14	; 20
    2ad4:	9e 83       	std	Y+6, r25	; 0x06
    2ad6:	8d 83       	std	Y+5, r24	; 0x05
                        timer_cb.cb_data = (POINTER)&timer_data;
    2ad8:	ce 01       	movw	r24, r28
    2ada:	01 96       	adiw	r24, 0x01	; 1
    2adc:	98 87       	std	Y+8, r25	; 0x08
    2ade:	8f 83       	std	Y+7, r24	; 0x07
                        timer_cb.cb_ticks = timeout;
    2ae0:	89 86       	std	Y+9, r8	; 0x09
    2ae2:	9a 86       	std	Y+10, r9	; 0x0a
    2ae4:	ab 86       	std	Y+11, r10	; 0x0b
    2ae6:	bc 86       	std	Y+12, r11	; 0x0c
                        /**
                         * Store the timer details in the TCB so that we can
                         * cancel the timer callback if the mutex is put
                         * before the timeout occurs.
                         */
                        curr_tcb_ptr->suspend_timo_cb = &timer_cb;
    2ae8:	ce 01       	movw	r24, r28
    2aea:	05 96       	adiw	r24, 0x05	; 5
    2aec:	90 8b       	std	Z+16, r25	; 0x10
    2aee:	87 87       	std	Z+15, r24	; 0x0f

                        /* Register a callback on timeout */
                        if (atomTimerRegister (&timer_cb) != ATOM_OK)
    2af0:	0e 94 ed 1a 	call	0x35da	; 0x35da <atomTimerRegister>
    2af4:	88 23       	and	r24, r24
    2af6:	69 f0       	breq	.+26     	; 0x2b12 <atomMutexGet+0xca>
                        {
                            /* Timer registration failed */
                            status = ATOM_ERR_TIMER;

                            /* Clean up and return to the caller */
                            (void)tcbDequeueEntry (&mutex->suspQ, curr_tcb_ptr);
    2af8:	c7 01       	movw	r24, r14
    2afa:	b8 01       	movw	r22, r16
    2afc:	0e 94 65 13 	call	0x26ca	; 0x26ca <tcbDequeueEntry>
                            curr_tcb_ptr->suspended = FALSE;
    2b00:	f8 01       	movw	r30, r16
    2b02:	15 86       	std	Z+13, r1	; 0x0d
                            curr_tcb_ptr->suspend_timo_cb = NULL;
    2b04:	10 8a       	std	Z+16, r1	; 0x10
    2b06:	17 86       	std	Z+15, r1	; 0x0f

                        /* Register a callback on timeout */
                        if (atomTimerRegister (&timer_cb) != ATOM_OK)
                        {
                            /* Timer registration failed */
                            status = ATOM_ERR_TIMER;
    2b08:	8d ec       	ldi	r24, 0xCD	; 205
    2b0a:	04 c0       	rjmp	.+8      	; 0x2b14 <atomMutexGet+0xcc>

                    /* Set no timeout requested */
                    else
                    {
                        /* No need to cancel timeouts on this one */
                        curr_tcb_ptr->suspend_timo_cb = NULL;
    2b0c:	f8 01       	movw	r30, r16
    2b0e:	10 8a       	std	Z+16, r1	; 0x10
    2b10:	17 86       	std	Z+15, r1	; 0x0f
                {
                    /* Set suspended status for the current thread */
                    curr_tcb_ptr->suspended = TRUE;

                    /* Track errors */
                    status = ATOM_OK;
    2b12:	80 e0       	ldi	r24, 0x00	; 0
                        /* No need to cancel timeouts on this one */
                        curr_tcb_ptr->suspend_timo_cb = NULL;
                    }

                    /* Exit critical region */
                    CRITICAL_END ();
    2b14:	df be       	out	0x3f, r13	; 63

                    /* Check no errors have occurred */
                    if (status == ATOM_OK)
    2b16:	88 23       	and	r24, r24
    2b18:	f9 f4       	brne	.+62     	; 0x2b58 <atomMutexGet+0x110>
                        /**
                         * Current thread now blocking, schedule in a new
                         * one. We already know we are in thread context
                         * so can call the scheduler from here.
                         */
                        atomSched (FALSE);
    2b1a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>

                        /**
                         * Normal atomMutexPut() wakeups will set ATOM_OK status,
                         * while timeouts will set ATOM_TIMEOUT and mutex
                         * deletions will set ATOM_ERR_DELETED. */
                        status = curr_tcb_ptr->suspend_wake_status;
    2b1e:	f8 01       	movw	r30, r16
    2b20:	86 85       	ldd	r24, Z+14	; 0x0e
                         * owner before waking the thread ensures that no other
                         * thread can preempt and take ownership of the mutex
                         * between this thread being made ready to run, and
                         * actually being scheduled back in here.
                         */
                        if (status == ATOM_OK)
    2b22:	88 23       	and	r24, r24
    2b24:	c9 f4       	brne	.+50     	; 0x2b58 <atomMutexGet+0x110>
                            /**
                             * Since this thread has just gained ownership, the
                             * lock count is zero and should be incremented
                             * once for this call.
                             */
                            mutex->count++;
    2b26:	f7 01       	movw	r30, r14
    2b28:	94 81       	ldd	r25, Z+4	; 0x04
    2b2a:	9f 5f       	subi	r25, 0xFF	; 255
    2b2c:	94 83       	std	Z+4, r25	; 0x04
    2b2e:	14 c0       	rjmp	.+40     	; 0x2b58 <atomMutexGet+0x110>
                }
            }
            else
            {
                /* timeout == -1, requested not to block and mutex is owned by another thread */
                CRITICAL_END();
    2b30:	df be       	out	0x3f, r13	; 63
                status = ATOM_WOULDBLOCK;
    2b32:	83 e0       	ldi	r24, 0x03	; 3
    2b34:	11 c0       	rjmp	.+34     	; 0x2b58 <atomMutexGet+0x110>
        else
        {
            /* Thread is not owned or is owned by us, we can claim ownership */

            /* Increment the lock count, checking for count overflow */
            if (mutex->count == 255)
    2b36:	f7 01       	movw	r30, r14
    2b38:	24 81       	ldd	r18, Z+4	; 0x04
    2b3a:	2f 3f       	cpi	r18, 0xFF	; 255
    2b3c:	39 f0       	breq	.+14     	; 0x2b4c <atomMutexGet+0x104>
                status = ATOM_ERR_OVF;
            }
            else
            {
                /* Increment the count and return to the calling thread */
                mutex->count++;
    2b3e:	2f 5f       	subi	r18, 0xFF	; 255
    2b40:	24 83       	std	Z+4, r18	; 0x04

                /* If the mutex is not locked, mark the calling thread as the new owner */
                if (mutex->owner == NULL)
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	29 f4       	brne	.+10     	; 0x2b50 <atomMutexGet+0x108>
                {
                    mutex->owner = curr_tcb_ptr;
    2b46:	13 83       	std	Z+3, r17	; 0x03
    2b48:	02 83       	std	Z+2, r16	; 0x02
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <atomMutexGet+0x108>

            /* Increment the lock count, checking for count overflow */
            if (mutex->count == 255)
            {
                /* Don't increment, just return error status */
                status = ATOM_ERR_OVF;
    2b4c:	8b ec       	ldi	r24, 0xCB	; 203
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <atomMutexGet+0x10a>
                {
                    mutex->owner = curr_tcb_ptr;
                }

                /* Successful */
                status = ATOM_OK;
    2b50:	80 e0       	ldi	r24, 0x00	; 0
            }

            /* Exit critical region */
            CRITICAL_END ();
    2b52:	df be       	out	0x3f, r13	; 63
    2b54:	01 c0       	rjmp	.+2      	; 0x2b58 <atomMutexGet+0x110>

    /* Check parameters */
    if (mutex == NULL)
    {
        /* Bad mutex pointer */
        status = ATOM_ERR_PARAM;
    2b56:	89 ec       	ldi	r24, 0xC9	; 201
            CRITICAL_END ();
        }
    }

    return (status);
}
    2b58:	2e 96       	adiw	r28, 0x0e	; 14
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	1f 91       	pop	r17
    2b6a:	0f 91       	pop	r16
    2b6c:	ff 90       	pop	r15
    2b6e:	ef 90       	pop	r14
    2b70:	df 90       	pop	r13
    2b72:	bf 90       	pop	r11
    2b74:	af 90       	pop	r10
    2b76:	9f 90       	pop	r9
    2b78:	8f 90       	pop	r8
    2b7a:	08 95       	ret

00002b7c <atomMutexPut>:
 * @retval ATOM_ERR_QUEUE Problem putting a woken thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout for a woken thread
 * @retval ATOM_ERR_OWNERSHIP Attempt to unlock mutex not owned by this thread
 */
uint8_t atomMutexPut (ATOM_MUTEX * mutex)
{
    2b7c:	ff 92       	push	r15
    2b7e:	0f 93       	push	r16
    2b80:	1f 93       	push	r17
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	ec 01       	movw	r28, r24
    uint8_t status;
    CRITICAL_STORE;
    ATOM_TCB *tcb_ptr, *curr_tcb_ptr;

    /* Check parameters */
    if (mutex == NULL)
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <atomMutexPut+0x12>
    2b8c:	3f c0       	rjmp	.+126    	; 0x2c0c <atomMutexPut+0x90>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Get the current TCB */
        curr_tcb_ptr = atomCurrentContext();
    2b8e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>

        /* Protect access to the mutex object and OS queues */
        CRITICAL_START ();
    2b92:	ff b6       	in	r15, 0x3f	; 63
    2b94:	f8 94       	cli

        /* Check if the calling thread owns this mutex */
        if (mutex->owner != curr_tcb_ptr)
    2b96:	2a 81       	ldd	r18, Y+2	; 0x02
    2b98:	3b 81       	ldd	r19, Y+3	; 0x03
    2b9a:	28 17       	cp	r18, r24
    2b9c:	39 07       	cpc	r19, r25
    2b9e:	19 f0       	breq	.+6      	; 0x2ba6 <atomMutexPut+0x2a>
        {
            /* Exit critical region */
            CRITICAL_END ();
    2ba0:	ff be       	out	0x3f, r15	; 63

            /* Attempt to unlock by non-owning thread */
            status = ATOM_ERR_OWNERSHIP;
    2ba2:	cf ec       	ldi	r28, 0xCF	; 207
    2ba4:	34 c0       	rjmp	.+104    	; 0x2c0e <atomMutexPut+0x92>
        }
        else
        {
            /* Lock is owned by this thread, decrement the recursive lock count */
            mutex->count--;
    2ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba8:	81 50       	subi	r24, 0x01	; 1
    2baa:	8c 83       	std	Y+4, r24	; 0x04

            /* Once recursive lock count reaches zero, we relinquish ownership */
            if (mutex->count == 0)
    2bac:	88 23       	and	r24, r24
    2bae:	59 f5       	brne	.+86     	; 0x2c06 <atomMutexPut+0x8a>
            {
                /* Relinquish ownership */
                mutex->owner = NULL;
    2bb0:	1b 82       	std	Y+3, r1	; 0x03
    2bb2:	1a 82       	std	Y+2, r1	; 0x02

                /* If any threads are blocking on this mutex, wake them now */
                if (mutex->suspQ)
    2bb4:	88 81       	ld	r24, Y
    2bb6:	99 81       	ldd	r25, Y+1	; 0x01
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	29 f1       	breq	.+74     	; 0x2c06 <atomMutexPut+0x8a>
                    /**
                     * Threads are woken up in priority order, with a FIFO system
                     * used on same priority threads. We always take the head,
                     * ordering is taken care of by an ordered list enqueue.
                     */
                    tcb_ptr = tcbDequeueHead (&mutex->suspQ);
    2bbc:	ce 01       	movw	r24, r28
    2bbe:	0e 94 47 13 	call	0x268e	; 0x268e <tcbDequeueHead>
    2bc2:	8c 01       	movw	r16, r24
                    if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    2bc4:	85 e4       	ldi	r24, 0x45	; 69
    2bc6:	94 e0       	ldi	r25, 0x04	; 4
    2bc8:	b8 01       	movw	r22, r16
    2bca:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
    2bce:	88 23       	and	r24, r24
    2bd0:	19 f0       	breq	.+6      	; 0x2bd8 <atomMutexPut+0x5c>
                    {
                        /* Exit critical region */
                        CRITICAL_END ();
    2bd2:	ff be       	out	0x3f, r15	; 63

                        /* There was a problem putting the thread on the ready queue */
                        status = ATOM_ERR_QUEUE;
    2bd4:	cc ec       	ldi	r28, 0xCC	; 204
    2bd6:	1b c0       	rjmp	.+54     	; 0x2c0e <atomMutexPut+0x92>
                    }
                    else
                    {
                        /* Set OK status to be returned to the waiting thread */
                        tcb_ptr->suspend_wake_status = ATOM_OK;
    2bd8:	f8 01       	movw	r30, r16
    2bda:	16 86       	std	Z+14, r1	; 0x0e

                        /* Set this thread as the new owner of the mutex */
                        mutex->owner = tcb_ptr;
    2bdc:	1b 83       	std	Y+3, r17	; 0x03
    2bde:	0a 83       	std	Y+2, r16	; 0x02

                        /* If there's a timeout on this suspension, cancel it */
                        if ((tcb_ptr->suspend_timo_cb != NULL)
    2be0:	87 85       	ldd	r24, Z+15	; 0x0f
    2be2:	90 89       	ldd	r25, Z+16	; 0x10
    2be4:	00 97       	sbiw	r24, 0x00	; 0
    2be6:	21 f0       	breq	.+8      	; 0x2bf0 <atomMutexPut+0x74>
                            && (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK))
    2be8:	0e 94 14 1b 	call	0x3628	; 0x3628 <atomTimerCancel>
    2bec:	88 23       	and	r24, r24
    2bee:	29 f4       	brne	.+10     	; 0x2bfa <atomMutexPut+0x7e>
                            status = ATOM_ERR_TIMER;
                        }
                        else
                        {
                            /* Flag as no timeout registered */
                            tcb_ptr->suspend_timo_cb = NULL;
    2bf0:	f8 01       	movw	r30, r16
    2bf2:	10 8a       	std	Z+16, r1	; 0x10
    2bf4:	17 86       	std	Z+15, r1	; 0x0f

                            /* Successful */
                            status = ATOM_OK;
    2bf6:	c0 e0       	ldi	r28, 0x00	; 0
    2bf8:	01 c0       	rjmp	.+2      	; 0x2bfc <atomMutexPut+0x80>
                        /* If there's a timeout on this suspension, cancel it */
                        if ((tcb_ptr->suspend_timo_cb != NULL)
                            && (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK))
                        {
                            /* There was a problem cancelling a timeout on this mutex */
                            status = ATOM_ERR_TIMER;
    2bfa:	cd ec       	ldi	r28, 0xCD	; 205
                            /* Successful */
                            status = ATOM_OK;
                        }

                        /* Exit critical region */
                        CRITICAL_END ();
    2bfc:	ff be       	out	0x3f, r15	; 63
                        /**
                         * The scheduler may now make a policy decision to
                         * thread switch. We already know we are in thread
                         * context so can call the scheduler from here.
                         */
                        atomSched (FALSE);
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
    2c04:	04 c0       	rjmp	.+8      	; 0x2c0e <atomMutexPut+0x92>
                 * Decremented lock but still retain ownership due to
                 * recursion. Nothing to do.
                 */

                /* Exit critical region */
                CRITICAL_END ();
    2c06:	ff be       	out	0x3f, r15	; 63

                /* Successful */
                status = ATOM_OK;
    2c08:	c0 e0       	ldi	r28, 0x00	; 0
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <atomMutexPut+0x92>

    /* Check parameters */
    if (mutex == NULL)
    {
        /* Bad mutex pointer */
        status = ATOM_ERR_PARAM;
    2c0c:	c9 ec       	ldi	r28, 0xC9	; 201
            }
        }
    }

    return (status);
}
    2c0e:	8c 2f       	mov	r24, r28
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	ff 90       	pop	r15
    2c1a:	08 95       	ret

00002c1c <thread_shell>:
static void thread_shell (void)
{
    ATOM_TCB *curr_tcb;

    /* Get the TCB of the thread being started */
    curr_tcb = atomCurrentContext();
    2c1c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    2c20:	dc 01       	movw	r26, r24

    /**
     * Enable interrupts - these will not be enabled when a thread
     * is first restored.
     */
    sei();
    2c22:	78 94       	sei

    /* Call the thread entry point */
    if (curr_tcb && curr_tcb->entry_point)
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	69 f0       	breq	.+26     	; 0x2c42 <thread_shell+0x26>
    2c28:	13 96       	adiw	r26, 0x03	; 3
    2c2a:	ed 91       	ld	r30, X+
    2c2c:	fc 91       	ld	r31, X
    2c2e:	14 97       	sbiw	r26, 0x04	; 4
    2c30:	30 97       	sbiw	r30, 0x00	; 0
    2c32:	39 f0       	breq	.+14     	; 0x2c42 <thread_shell+0x26>
    {
        curr_tcb->entry_point(curr_tcb->entry_param);
    2c34:	15 96       	adiw	r26, 0x05	; 5
    2c36:	6d 91       	ld	r22, X+
    2c38:	7d 91       	ld	r23, X+
    2c3a:	8d 91       	ld	r24, X+
    2c3c:	9c 91       	ld	r25, X
    2c3e:	18 97       	sbiw	r26, 0x08	; 8
    2c40:	09 95       	icall
    2c42:	08 95       	ret

00002c44 <archThreadContextInit>:
 * @param[in] entry_param Parameter to be passed to the thread entry point
 *
 * @return None
 */
void archThreadContextInit (ATOM_TCB *tcb_ptr, void *stack_top, void (*entry_point)(uint32_t), uint32_t entry_param)
{
    2c44:	dc 01       	movw	r26, r24
     * and call it directly from the thread restore routines.
     *
     * Because we are filling the stack from top to bottom, this goes
     * on the stack first (at the top).
     */
    *stack_ptr-- = (uint8_t)((uint16_t)thread_shell & 0xFF);
    2c46:	8e e0       	ldi	r24, 0x0E	; 14
    2c48:	96 e1       	ldi	r25, 0x16	; 22
    2c4a:	fb 01       	movw	r30, r22
    2c4c:	80 83       	st	Z, r24
    *stack_ptr-- = (uint8_t)(((uint16_t)thread_shell >> 8) & 0xFF);
    2c4e:	31 97       	sbiw	r30, 0x01	; 1
    2c50:	90 83       	st	Z, r25
     */

    /**
     * Store starting register values for R2-R17, R28-R29
     */
    *stack_ptr-- = 0x00;    /* R2 */
    2c52:	fb 01       	movw	r30, r22
    2c54:	32 97       	sbiw	r30, 0x02	; 2
    2c56:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R3 */
    2c58:	fb 01       	movw	r30, r22
    2c5a:	33 97       	sbiw	r30, 0x03	; 3
    2c5c:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R4 */
    2c5e:	fb 01       	movw	r30, r22
    2c60:	34 97       	sbiw	r30, 0x04	; 4
    2c62:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R5 */
    2c64:	fb 01       	movw	r30, r22
    2c66:	35 97       	sbiw	r30, 0x05	; 5
    2c68:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R6 */
    2c6a:	fb 01       	movw	r30, r22
    2c6c:	36 97       	sbiw	r30, 0x06	; 6
    2c6e:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R7 */
    2c70:	fb 01       	movw	r30, r22
    2c72:	37 97       	sbiw	r30, 0x07	; 7
    2c74:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R8 */
    2c76:	fb 01       	movw	r30, r22
    2c78:	38 97       	sbiw	r30, 0x08	; 8
    2c7a:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R9 */
    2c7c:	fb 01       	movw	r30, r22
    2c7e:	39 97       	sbiw	r30, 0x09	; 9
    2c80:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R10 */
    2c82:	fb 01       	movw	r30, r22
    2c84:	3a 97       	sbiw	r30, 0x0a	; 10
    2c86:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R11 */
    2c88:	fb 01       	movw	r30, r22
    2c8a:	3b 97       	sbiw	r30, 0x0b	; 11
    2c8c:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R12 */
    2c8e:	fb 01       	movw	r30, r22
    2c90:	3c 97       	sbiw	r30, 0x0c	; 12
    2c92:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R13 */
    2c94:	fb 01       	movw	r30, r22
    2c96:	3d 97       	sbiw	r30, 0x0d	; 13
    2c98:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R14 */
    2c9a:	fb 01       	movw	r30, r22
    2c9c:	3e 97       	sbiw	r30, 0x0e	; 14
    2c9e:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R15 */
    2ca0:	fb 01       	movw	r30, r22
    2ca2:	3f 97       	sbiw	r30, 0x0f	; 15
    2ca4:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R16 */
    2ca6:	fb 01       	movw	r30, r22
    2ca8:	70 97       	sbiw	r30, 0x10	; 16
    2caa:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R17 */
    2cac:	fb 01       	movw	r30, r22
    2cae:	71 97       	sbiw	r30, 0x11	; 17
    2cb0:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R28 */
    2cb2:	fb 01       	movw	r30, r22
    2cb4:	72 97       	sbiw	r30, 0x12	; 18
    2cb6:	10 82       	st	Z, r1
    *stack_ptr-- = 0x00;    /* R29 */
    2cb8:	fb 01       	movw	r30, r22
    2cba:	73 97       	sbiw	r30, 0x13	; 19
    2cbc:	10 82       	st	Z, r1
    2cbe:	64 51       	subi	r22, 0x14	; 20
    2cc0:	70 40       	sbci	r23, 0x00	; 0
    /**
     * All thread context has now been initialised. Save the current
     * stack pointer to the thread's TCB so it knows where to start
     * looking when the thread is started.
     */
    tcb_ptr->sp_save_ptr = stack_ptr;
    2cc2:	11 96       	adiw	r26, 0x01	; 1
    2cc4:	7c 93       	st	X, r23
    2cc6:	6e 93       	st	-X, r22

}
    2cc8:	08 95       	ret

00002cca <avrInitSystemTickTimer>:
{
    /* Set timer 1 compare match value for configured system tick,
     * with a prescaler of 256. We will get a compare match 1A
     * interrupt on every system tick, in which we must call the
     * OS's system tick handler. */
    OCR1A = (AVR_CPU_HZ / 256 / SYSTEM_TICKS_PER_SEC);
    2cca:	87 e2       	ldi	r24, 0x27	; 39
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	90 93 89 00 	sts	0x0089, r25
    2cd2:	80 93 88 00 	sts	0x0088, r24

    /* Enable compare match 1A interrupt */
#ifdef TIMSK
    TIMSK = _BV(OCIE1A);
#else
    TIMSK1 = _BV(OCIE1A);
    2cd6:	82 e0       	ldi	r24, 0x02	; 2
    2cd8:	80 93 6f 00 	sts	0x006F, r24
#endif

    /* Set prescaler 256 */
    TCCR1B = _BV(CS12) | _BV(WGM12);
    2cdc:	8c e0       	ldi	r24, 0x0C	; 12
    2cde:	80 93 81 00 	sts	0x0081, r24
}
    2ce2:	08 95       	ret

00002ce4 <__vector_11>:
 * in case the interrupt handler makes more than one thread ready.
 *
 * @return None
 */
ISR (TIMER1_COMPA_vect)
{
    2ce4:	1f 92       	push	r1
    2ce6:	0f 92       	push	r0
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	0f 92       	push	r0
    2cec:	11 24       	eor	r1, r1
    2cee:	2f 93       	push	r18
    2cf0:	3f 93       	push	r19
    2cf2:	4f 93       	push	r20
    2cf4:	5f 93       	push	r21
    2cf6:	6f 93       	push	r22
    2cf8:	7f 93       	push	r23
    2cfa:	8f 93       	push	r24
    2cfc:	9f 93       	push	r25
    2cfe:	af 93       	push	r26
    2d00:	bf 93       	push	r27
    2d02:	ef 93       	push	r30
    2d04:	ff 93       	push	r31
    /* Call the interrupt entry routine */
    atomIntEnter();
    2d06:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <atomIntEnter>

    /* Call the OS system tick handler */
    atomTimerTick();
    2d0a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <atomTimerTick>

    /* Call the interrupt exit routine */
    atomIntExit(TRUE);
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	0e 94 21 14 	call	0x2842	; 0x2842 <atomIntExit>
}
    2d14:	ff 91       	pop	r31
    2d16:	ef 91       	pop	r30
    2d18:	bf 91       	pop	r27
    2d1a:	af 91       	pop	r26
    2d1c:	9f 91       	pop	r25
    2d1e:	8f 91       	pop	r24
    2d20:	7f 91       	pop	r23
    2d22:	6f 91       	pop	r22
    2d24:	5f 91       	pop	r21
    2d26:	4f 91       	pop	r20
    2d28:	3f 91       	pop	r19
    2d2a:	2f 91       	pop	r18
    2d2c:	0f 90       	pop	r0
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	0f 90       	pop	r0
    2d32:	1f 90       	pop	r1
    2d34:	18 95       	reti

00002d36 <__vector_default>:
 * tick interrupt.
 *
 * @return None
 */
ISR (BADISR_vect)
{
    2d36:	1f 92       	push	r1
    2d38:	0f 92       	push	r0
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	0f 92       	push	r0
    2d3e:	11 24       	eor	r1, r1
    /* Empty */
}
    2d40:	0f 90       	pop	r0
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	0f 90       	pop	r0
    2d46:	1f 90       	pop	r1
    2d48:	18 95       	reti

00002d4a <atomQueueTimerCallback>:
 * queue details.
 *
 * @param[in] cb_data Pointer to a QUEUE_TIMER object
 */
static void atomQueueTimerCallback (POINTER cb_data)
{
    2d4a:	1f 93       	push	r17
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    2d50:	ec 01       	movw	r28, r24

    /* Get the QUEUE_TIMER structure pointer */
    timer_data_ptr = (QUEUE_TIMER *)cb_data;

    /* Check parameter is valid */
    if (timer_data_ptr)
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	b1 f0       	breq	.+44     	; 0x2d82 <atomQueueTimerCallback+0x38>
    {
        /* Enter critical region */
        CRITICAL_START ();
    2d56:	1f b7       	in	r17, 0x3f	; 63
    2d58:	f8 94       	cli

        /* Set status to indicate to the waiting thread that it timed out */
        timer_data_ptr->tcb_ptr->suspend_wake_status = ATOM_TIMEOUT;
    2d5a:	e8 81       	ld	r30, Y
    2d5c:	f9 81       	ldd	r31, Y+1	; 0x01
    2d5e:	82 e0       	ldi	r24, 0x02	; 2
    2d60:	86 87       	std	Z+14, r24	; 0x0e

        /* Flag as no timeout registered */
        timer_data_ptr->tcb_ptr->suspend_timo_cb = NULL;
    2d62:	68 81       	ld	r22, Y
    2d64:	79 81       	ldd	r23, Y+1	; 0x01
    2d66:	fb 01       	movw	r30, r22
    2d68:	10 8a       	std	Z+16, r1	; 0x10
    2d6a:	17 86       	std	Z+15, r1	; 0x0f

        /**
         * Remove this thread from the queue's suspend list. Handles threads
         * suspended on the receive list as well as the send list.
         */
        (void)tcbDequeueEntry (timer_data_ptr->suspQ, timer_data_ptr->tcb_ptr);
    2d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d70:	0e 94 65 13 	call	0x26ca	; 0x26ca <tcbDequeueEntry>

        /* Put the thread on the ready queue */
        (void)tcbEnqueuePriority (&tcbReadyQ, timer_data_ptr->tcb_ptr);
    2d74:	68 81       	ld	r22, Y
    2d76:	79 81       	ldd	r23, Y+1	; 0x01
    2d78:	85 e4       	ldi	r24, 0x45	; 69
    2d7a:	94 e0       	ldi	r25, 0x04	; 4
    2d7c:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>

        /* Exit critical region */
        CRITICAL_END ();
    2d80:	1f bf       	out	0x3f, r17	; 63
        /**
         * Note that we don't call the scheduler now as it will be called
         * when we exit the ISR by atomIntExit().
         */
    }
}
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	1f 91       	pop	r17
    2d88:	08 95       	ret

00002d8a <queue_insert.part.0>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameter
 * @retval ATOM_ERR_QUEUE Problem putting a thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout
 */
static uint8_t queue_insert (ATOM_QUEUE *qptr, uint8_t* msgptr)
    2d8a:	cf 92       	push	r12
    2d8c:	df 92       	push	r13
    2d8e:	ef 92       	push	r14
    2d90:	ff 92       	push	r15
    2d92:	0f 93       	push	r16
    2d94:	1f 93       	push	r17
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
    2d9a:	ec 01       	movw	r28, r24
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* There is space in the queue, copy it in */
        memcpy ((qptr->buff_ptr + qptr->insert_index), msgptr, qptr->unit_size);
    2d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2da0:	2e 85       	ldd	r18, Y+14	; 0x0e
    2da2:	3f 85       	ldd	r19, Y+15	; 0x0f
    2da4:	82 0f       	add	r24, r18
    2da6:	93 1f       	adc	r25, r19
    2da8:	4e 81       	ldd	r20, Y+6	; 0x06
    2daa:	5f 81       	ldd	r21, Y+7	; 0x07
    2dac:	0e 94 4e 21 	call	0x429c	; 0x429c <memcpy>
        qptr->insert_index += qptr->unit_size;
    2db0:	4e 81       	ldd	r20, Y+6	; 0x06
    2db2:	5f 81       	ldd	r21, Y+7	; 0x07
    2db4:	68 85       	ldd	r22, Y+8	; 0x08
    2db6:	79 85       	ldd	r23, Y+9	; 0x09
    2db8:	ce 84       	ldd	r12, Y+14	; 0x0e
    2dba:	df 84       	ldd	r13, Y+15	; 0x0f
    2dbc:	e8 88       	ldd	r14, Y+16	; 0x10
    2dbe:	f9 88       	ldd	r15, Y+17	; 0x11
    2dc0:	c4 0e       	add	r12, r20
    2dc2:	d5 1e       	adc	r13, r21
    2dc4:	e6 1e       	adc	r14, r22
    2dc6:	f7 1e       	adc	r15, r23
    2dc8:	ce 86       	std	Y+14, r12	; 0x0e
    2dca:	df 86       	std	Y+15, r13	; 0x0f
    2dcc:	e8 8a       	std	Y+16, r14	; 0x10
    2dce:	f9 8a       	std	Y+17, r15	; 0x11
        qptr->num_msgs_stored++;
    2dd0:	8e 89       	ldd	r24, Y+22	; 0x16
    2dd2:	9f 89       	ldd	r25, Y+23	; 0x17
    2dd4:	a8 8d       	ldd	r26, Y+24	; 0x18
    2dd6:	b9 8d       	ldd	r27, Y+25	; 0x19
    2dd8:	01 96       	adiw	r24, 0x01	; 1
    2dda:	a1 1d       	adc	r26, r1
    2ddc:	b1 1d       	adc	r27, r1
    2dde:	8e 8b       	std	Y+22, r24	; 0x16
    2de0:	9f 8b       	std	Y+23, r25	; 0x17
    2de2:	a8 8f       	std	Y+24, r26	; 0x18
    2de4:	b9 8f       	std	Y+25, r27	; 0x19

        /* Check if the insert index should now wrap to the beginning */
        if (qptr->insert_index >= (qptr->unit_size * qptr->max_num_msgs))
    2de6:	0a 85       	ldd	r16, Y+10	; 0x0a
    2de8:	1b 85       	ldd	r17, Y+11	; 0x0b
    2dea:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dec:	3d 85       	ldd	r19, Y+13	; 0x0d
    2dee:	cb 01       	movw	r24, r22
    2df0:	ba 01       	movw	r22, r20
    2df2:	a9 01       	movw	r20, r18
    2df4:	98 01       	movw	r18, r16
    2df6:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__mulsi3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	c8 16       	cp	r12, r24
    2e00:	d9 06       	cpc	r13, r25
    2e02:	ea 06       	cpc	r14, r26
    2e04:	fb 06       	cpc	r15, r27
    2e06:	20 f0       	brcs	.+8      	; 0x2e10 <queue_insert.part.0+0x86>
            qptr->insert_index = 0;
    2e08:	1e 86       	std	Y+14, r1	; 0x0e
    2e0a:	1f 86       	std	Y+15, r1	; 0x0f
    2e0c:	18 8a       	std	Y+16, r1	; 0x10
    2e0e:	19 8a       	std	Y+17, r1	; 0x11
        /**
         * If there are threads waiting to receive, wake one up now. Waiting
         * threads are woken up in priority order, with same-priority
         * threads woken up in FIFO order.
         */
        tcb_ptr = tcbDequeueHead (&qptr->getSuspQ);
    2e10:	ce 01       	movw	r24, r28
    2e12:	02 96       	adiw	r24, 0x02	; 2
    2e14:	0e 94 47 13 	call	0x268e	; 0x268e <tcbDequeueHead>
    2e18:	ec 01       	movw	r28, r24
        if (tcb_ptr)
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	91 f0       	breq	.+36     	; 0x2e42 <queue_insert.part.0+0xb8>
        {
            /* Move the waiting thread to the ready queue */
            if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) == ATOM_OK)
    2e1e:	85 e4       	ldi	r24, 0x45	; 69
    2e20:	94 e0       	ldi	r25, 0x04	; 4
    2e22:	be 01       	movw	r22, r28
    2e24:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
    2e28:	88 23       	and	r24, r24
    2e2a:	69 f4       	brne	.+26     	; 0x2e46 <queue_insert.part.0+0xbc>
            {
                /* Set OK status to be returned to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_OK;
    2e2c:	1e 86       	std	Y+14, r1	; 0x0e

                /* If there's a timeout on this suspension, cancel it */
                if ((tcb_ptr->suspend_timo_cb != NULL)
    2e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e30:	98 89       	ldd	r25, Y+16	; 0x10
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	21 f0       	breq	.+8      	; 0x2e3e <queue_insert.part.0+0xb4>
                    && (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK))
    2e36:	0e 94 14 1b 	call	0x3628	; 0x3628 <atomTimerCancel>
    2e3a:	88 23       	and	r24, r24
    2e3c:	31 f4       	brne	.+12     	; 0x2e4a <queue_insert.part.0+0xc0>
                    status = ATOM_ERR_TIMER;
                }
                else
                {
                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
    2e3e:	18 8a       	std	Y+16, r1	; 0x10
    2e40:	1f 86       	std	Y+15, r1	; 0x0f
            }
        }
        else
        {
            /* There were no threads waiting to send */
            status = ATOM_OK;
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	03 c0       	rjmp	.+6      	; 0x2e4c <queue_insert.part.0+0xc2>
            {
                /**
                 * There was a problem putting the thread on the ready
                 * queue.
                 */
                status = ATOM_ERR_QUEUE;
    2e46:	8c ec       	ldi	r24, 0xCC	; 204
    2e48:	01 c0       	rjmp	.+2      	; 0x2e4c <queue_insert.part.0+0xc2>
                /* If there's a timeout on this suspension, cancel it */
                if ((tcb_ptr->suspend_timo_cb != NULL)
                    && (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK))
                {
                    /* There was a problem cancelling a timeout */
                    status = ATOM_ERR_TIMER;
    2e4a:	8d ec       	ldi	r24, 0xCD	; 205
            status = ATOM_OK;
        }
    }

    return (status);
}
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	ff 90       	pop	r15
    2e56:	ef 90       	pop	r14
    2e58:	df 90       	pop	r13
    2e5a:	cf 90       	pop	r12
    2e5c:	08 95       	ret

00002e5e <queue_remove.part.1>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameter
 * @retval ATOM_ERR_QUEUE Problem putting a thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout
 */
static uint8_t queue_remove (ATOM_QUEUE *qptr, uint8_t* msgptr)
    2e5e:	cf 92       	push	r12
    2e60:	df 92       	push	r13
    2e62:	ef 92       	push	r14
    2e64:	ff 92       	push	r15
    2e66:	0f 93       	push	r16
    2e68:	1f 93       	push	r17
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	ec 01       	movw	r28, r24
    2e70:	cb 01       	movw	r24, r22
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* There is a message on the queue, copy it out */
        memcpy (msgptr, (qptr->buff_ptr + qptr->remove_index), qptr->unit_size);
    2e72:	2c 81       	ldd	r18, Y+4	; 0x04
    2e74:	3d 81       	ldd	r19, Y+5	; 0x05
    2e76:	4a 89       	ldd	r20, Y+18	; 0x12
    2e78:	5b 89       	ldd	r21, Y+19	; 0x13
    2e7a:	24 0f       	add	r18, r20
    2e7c:	35 1f       	adc	r19, r21
    2e7e:	4e 81       	ldd	r20, Y+6	; 0x06
    2e80:	5f 81       	ldd	r21, Y+7	; 0x07
    2e82:	b9 01       	movw	r22, r18
    2e84:	0e 94 4e 21 	call	0x429c	; 0x429c <memcpy>
        qptr->remove_index += qptr->unit_size;
    2e88:	4e 81       	ldd	r20, Y+6	; 0x06
    2e8a:	5f 81       	ldd	r21, Y+7	; 0x07
    2e8c:	68 85       	ldd	r22, Y+8	; 0x08
    2e8e:	79 85       	ldd	r23, Y+9	; 0x09
    2e90:	ca 88       	ldd	r12, Y+18	; 0x12
    2e92:	db 88       	ldd	r13, Y+19	; 0x13
    2e94:	ec 88       	ldd	r14, Y+20	; 0x14
    2e96:	fd 88       	ldd	r15, Y+21	; 0x15
    2e98:	c4 0e       	add	r12, r20
    2e9a:	d5 1e       	adc	r13, r21
    2e9c:	e6 1e       	adc	r14, r22
    2e9e:	f7 1e       	adc	r15, r23
    2ea0:	ca 8a       	std	Y+18, r12	; 0x12
    2ea2:	db 8a       	std	Y+19, r13	; 0x13
    2ea4:	ec 8a       	std	Y+20, r14	; 0x14
    2ea6:	fd 8a       	std	Y+21, r15	; 0x15
        qptr->num_msgs_stored--;
    2ea8:	8e 89       	ldd	r24, Y+22	; 0x16
    2eaa:	9f 89       	ldd	r25, Y+23	; 0x17
    2eac:	a8 8d       	ldd	r26, Y+24	; 0x18
    2eae:	b9 8d       	ldd	r27, Y+25	; 0x19
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	a1 09       	sbc	r26, r1
    2eb4:	b1 09       	sbc	r27, r1
    2eb6:	8e 8b       	std	Y+22, r24	; 0x16
    2eb8:	9f 8b       	std	Y+23, r25	; 0x17
    2eba:	a8 8f       	std	Y+24, r26	; 0x18
    2ebc:	b9 8f       	std	Y+25, r27	; 0x19

        /* Check if the remove index should now wrap to the beginning */
        if (qptr->remove_index >= (qptr->unit_size * qptr->max_num_msgs))
    2ebe:	0a 85       	ldd	r16, Y+10	; 0x0a
    2ec0:	1b 85       	ldd	r17, Y+11	; 0x0b
    2ec2:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ec4:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	ba 01       	movw	r22, r20
    2eca:	a9 01       	movw	r20, r18
    2ecc:	98 01       	movw	r18, r16
    2ece:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__mulsi3>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	c8 16       	cp	r12, r24
    2ed8:	d9 06       	cpc	r13, r25
    2eda:	ea 06       	cpc	r14, r26
    2edc:	fb 06       	cpc	r15, r27
    2ede:	20 f0       	brcs	.+8      	; 0x2ee8 <queue_remove.part.1+0x8a>
            qptr->remove_index = 0;
    2ee0:	1a 8a       	std	Y+18, r1	; 0x12
    2ee2:	1b 8a       	std	Y+19, r1	; 0x13
    2ee4:	1c 8a       	std	Y+20, r1	; 0x14
    2ee6:	1d 8a       	std	Y+21, r1	; 0x15
        /**
         * If there are threads waiting to send, wake one up now. Waiting
         * threads are woken up in priority order, with same-priority
         * threads woken up in FIFO order.
         */
        tcb_ptr = tcbDequeueHead (&qptr->putSuspQ);
    2ee8:	ce 01       	movw	r24, r28
    2eea:	0e 94 47 13 	call	0x268e	; 0x268e <tcbDequeueHead>
    2eee:	ec 01       	movw	r28, r24
        if (tcb_ptr)
    2ef0:	00 97       	sbiw	r24, 0x00	; 0
    2ef2:	91 f0       	breq	.+36     	; 0x2f18 <queue_remove.part.1+0xba>
        {
            /* Move the waiting thread to the ready queue */
            if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) == ATOM_OK)
    2ef4:	85 e4       	ldi	r24, 0x45	; 69
    2ef6:	94 e0       	ldi	r25, 0x04	; 4
    2ef8:	be 01       	movw	r22, r28
    2efa:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
    2efe:	88 23       	and	r24, r24
    2f00:	69 f4       	brne	.+26     	; 0x2f1c <queue_remove.part.1+0xbe>
            {
                /* Set OK status to be returned to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_OK;
    2f02:	1e 86       	std	Y+14, r1	; 0x0e

                /* If there's a timeout on this suspension, cancel it */
                if ((tcb_ptr->suspend_timo_cb != NULL)
    2f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f06:	98 89       	ldd	r25, Y+16	; 0x10
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	21 f0       	breq	.+8      	; 0x2f14 <queue_remove.part.1+0xb6>
                    && (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK))
    2f0c:	0e 94 14 1b 	call	0x3628	; 0x3628 <atomTimerCancel>
    2f10:	88 23       	and	r24, r24
    2f12:	31 f4       	brne	.+12     	; 0x2f20 <queue_remove.part.1+0xc2>
                    status = ATOM_ERR_TIMER;
                }
                else
                {
                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
    2f14:	18 8a       	std	Y+16, r1	; 0x10
    2f16:	1f 86       	std	Y+15, r1	; 0x0f
            }
        }
        else
        {
            /* There were no threads waiting to send */
            status = ATOM_OK;
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	03 c0       	rjmp	.+6      	; 0x2f22 <queue_remove.part.1+0xc4>
            {
                /**
                 * There was a problem putting the thread on the ready
                 * queue.
                 */
                status = ATOM_ERR_QUEUE;
    2f1c:	8c ec       	ldi	r24, 0xCC	; 204
    2f1e:	01 c0       	rjmp	.+2      	; 0x2f22 <queue_remove.part.1+0xc4>
                /* If there's a timeout on this suspension, cancel it */
                if ((tcb_ptr->suspend_timo_cb != NULL)
                    && (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK))
                {
                    /* There was a problem cancelling a timeout */
                    status = ATOM_ERR_TIMER;
    2f20:	8d ec       	ldi	r24, 0xCD	; 205
            status = ATOM_OK;
        }
    }

    return (status);
}
    2f22:	df 91       	pop	r29
    2f24:	cf 91       	pop	r28
    2f26:	1f 91       	pop	r17
    2f28:	0f 91       	pop	r16
    2f2a:	ff 90       	pop	r15
    2f2c:	ef 90       	pop	r14
    2f2e:	df 90       	pop	r13
    2f30:	cf 90       	pop	r12
    2f32:	08 95       	ret

00002f34 <atomQueueCreate>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t atomQueueCreate (ATOM_QUEUE *qptr, uint8_t *buff_ptr, uint32_t unit_size, uint32_t max_num_msgs)
{
    2f34:	ef 92       	push	r14
    2f36:	ff 92       	push	r15
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	fc 01       	movw	r30, r24
    2f42:	eb 01       	movw	r28, r22
    2f44:	ba 01       	movw	r22, r20
    2f46:	a9 01       	movw	r20, r18
    uint8_t status;

    /* Parameter check */
    if ((qptr == NULL) || (buff_ptr == NULL))
    2f48:	30 97       	sbiw	r30, 0x00	; 0
    2f4a:	41 f1       	breq	.+80     	; 0x2f9c <atomQueueCreate+0x68>
    2f4c:	20 97       	sbiw	r28, 0x00	; 0
    2f4e:	31 f1       	breq	.+76     	; 0x2f9c <atomQueueCreate+0x68>
    {
        /* Bad pointers */
        status = ATOM_ERR_PARAM;
    }
    else if ((unit_size == 0) || (max_num_msgs == 0))
    2f50:	41 15       	cp	r20, r1
    2f52:	51 05       	cpc	r21, r1
    2f54:	61 05       	cpc	r22, r1
    2f56:	71 05       	cpc	r23, r1
    2f58:	09 f1       	breq	.+66     	; 0x2f9c <atomQueueCreate+0x68>
    2f5a:	e1 14       	cp	r14, r1
    2f5c:	f1 04       	cpc	r15, r1
    2f5e:	01 05       	cpc	r16, r1
    2f60:	11 05       	cpc	r17, r1
    2f62:	e1 f0       	breq	.+56     	; 0x2f9c <atomQueueCreate+0x68>
        status = ATOM_ERR_PARAM;
    }
    else
    {
       /* Store the queue details */
        qptr->buff_ptr = buff_ptr;
    2f64:	d5 83       	std	Z+5, r29	; 0x05
    2f66:	c4 83       	std	Z+4, r28	; 0x04
        qptr->unit_size = unit_size;
    2f68:	46 83       	std	Z+6, r20	; 0x06
    2f6a:	57 83       	std	Z+7, r21	; 0x07
    2f6c:	60 87       	std	Z+8, r22	; 0x08
    2f6e:	71 87       	std	Z+9, r23	; 0x09
        qptr->max_num_msgs = max_num_msgs;
    2f70:	e2 86       	std	Z+10, r14	; 0x0a
    2f72:	f3 86       	std	Z+11, r15	; 0x0b
    2f74:	04 87       	std	Z+12, r16	; 0x0c
    2f76:	15 87       	std	Z+13, r17	; 0x0d

        /* Initialise the suspended threads queues */
        qptr->putSuspQ = NULL;
    2f78:	11 82       	std	Z+1, r1	; 0x01
    2f7a:	10 82       	st	Z, r1
        qptr->getSuspQ = NULL;
    2f7c:	13 82       	std	Z+3, r1	; 0x03
    2f7e:	12 82       	std	Z+2, r1	; 0x02

        /* Initialise the insert/remove pointers */
        qptr->insert_index = 0;
    2f80:	16 86       	std	Z+14, r1	; 0x0e
    2f82:	17 86       	std	Z+15, r1	; 0x0f
    2f84:	10 8a       	std	Z+16, r1	; 0x10
    2f86:	11 8a       	std	Z+17, r1	; 0x11
        qptr->remove_index = 0;
    2f88:	12 8a       	std	Z+18, r1	; 0x12
    2f8a:	13 8a       	std	Z+19, r1	; 0x13
    2f8c:	14 8a       	std	Z+20, r1	; 0x14
    2f8e:	15 8a       	std	Z+21, r1	; 0x15
        qptr->num_msgs_stored = 0;
    2f90:	16 8a       	std	Z+22, r1	; 0x16
    2f92:	17 8a       	std	Z+23, r1	; 0x17
    2f94:	10 8e       	std	Z+24, r1	; 0x18
    2f96:	11 8e       	std	Z+25, r1	; 0x19

        /* Successful */
        status = ATOM_OK;
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	01 c0       	rjmp	.+2      	; 0x2f9e <atomQueueCreate+0x6a>
        status = ATOM_ERR_PARAM;
    }
    else if ((unit_size == 0) || (max_num_msgs == 0))
    {
        /* Bad values */
        status = ATOM_ERR_PARAM;
    2f9c:	89 ec       	ldi	r24, 0xC9	; 201
        /* Successful */
        status = ATOM_OK;
    }

    return (status);
}
    2f9e:	df 91       	pop	r29
    2fa0:	cf 91       	pop	r28
    2fa2:	1f 91       	pop	r17
    2fa4:	0f 91       	pop	r16
    2fa6:	ff 90       	pop	r15
    2fa8:	ef 90       	pop	r14
    2faa:	08 95       	ret

00002fac <atomQueueDelete>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_QUEUE Problem putting a woken thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout on a woken thread
 */
uint8_t atomQueueDelete (ATOM_QUEUE *qptr)
{
    2fac:	af 92       	push	r10
    2fae:	bf 92       	push	r11
    2fb0:	df 92       	push	r13
    2fb2:	ef 92       	push	r14
    2fb4:	ff 92       	push	r15
    2fb6:	0f 93       	push	r16
    2fb8:	1f 93       	push	r17
    2fba:	cf 93       	push	r28
    2fbc:	df 93       	push	r29
    2fbe:	7c 01       	movw	r14, r24
    CRITICAL_STORE;
    ATOM_TCB *tcb_ptr;
    uint8_t woken_threads = FALSE;

    /* Parameter check */
    if (qptr == NULL)
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	e9 f1       	breq	.+122    	; 0x303e <atomQueueDelete+0x92>
    2fc4:	00 e0       	ldi	r16, 0x00	; 0
        {
            /* Enter critical region */
            CRITICAL_START ();

            /* Check if any threads are suspended */
            if (((tcb_ptr = tcbDequeueHead (&qptr->getSuspQ)) != NULL)
    2fc6:	82 e0       	ldi	r24, 0x02	; 2
    2fc8:	a8 2e       	mov	r10, r24
    2fca:	b1 2c       	mov	r11, r1
    2fcc:	ae 0c       	add	r10, r14
    2fce:	bf 1c       	adc	r11, r15
                || ((tcb_ptr = tcbDequeueHead (&qptr->putSuspQ)) != NULL))
            {
                /* A thread is waiting on a suspend queue */

                /* Return error status to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_ERR_DELETED;
    2fd0:	9a ec       	ldi	r25, 0xCA	; 202
    2fd2:	d9 2e       	mov	r13, r25

        /* Wake up all suspended tasks */
        while (1)
        {
            /* Enter critical region */
            CRITICAL_START ();
    2fd4:	1f b7       	in	r17, 0x3f	; 63
    2fd6:	f8 94       	cli

            /* Check if any threads are suspended */
            if (((tcb_ptr = tcbDequeueHead (&qptr->getSuspQ)) != NULL)
    2fd8:	c5 01       	movw	r24, r10
    2fda:	0e 94 47 13 	call	0x268e	; 0x268e <tcbDequeueHead>
    2fde:	ec 01       	movw	r28, r24
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	31 f4       	brne	.+12     	; 0x2ff0 <atomQueueDelete+0x44>
                || ((tcb_ptr = tcbDequeueHead (&qptr->putSuspQ)) != NULL))
    2fe4:	c7 01       	movw	r24, r14
    2fe6:	0e 94 47 13 	call	0x268e	; 0x268e <tcbDequeueHead>
    2fea:	ec 01       	movw	r28, r24
    2fec:	00 97       	sbiw	r24, 0x00	; 0
    2fee:	d9 f0       	breq	.+54     	; 0x3026 <atomQueueDelete+0x7a>
            {
                /* A thread is waiting on a suspend queue */

                /* Return error status to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_ERR_DELETED;
    2ff0:	de 86       	std	Y+14, r13	; 0x0e

                /* Put the thread on the ready queue */
                if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    2ff2:	85 e4       	ldi	r24, 0x45	; 69
    2ff4:	94 e0       	ldi	r25, 0x04	; 4
    2ff6:	be 01       	movw	r22, r28
    2ff8:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
    2ffc:	88 23       	and	r24, r24
    2ffe:	19 f0       	breq	.+6      	; 0x3006 <atomQueueDelete+0x5a>
                {
                    /* Exit critical region */
                    CRITICAL_END ();
    3000:	1f bf       	out	0x3f, r17	; 63

                    /* Quit the loop, returning error */
                    status = ATOM_ERR_QUEUE;
    3002:	cc ec       	ldi	r28, 0xCC	; 204
                    break;
    3004:	12 c0       	rjmp	.+36     	; 0x302a <atomQueueDelete+0x7e>
                }

                /* If there's a timeout on this suspension, cancel it */
                if (tcb_ptr->suspend_timo_cb)
    3006:	8f 85       	ldd	r24, Y+15	; 0x0f
    3008:	98 89       	ldd	r25, Y+16	; 0x10
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	49 f0       	breq	.+18     	; 0x3020 <atomQueueDelete+0x74>
                {
                    /* Cancel the callback */
                    if (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK)
    300e:	0e 94 14 1b 	call	0x3628	; 0x3628 <atomTimerCancel>
    3012:	88 23       	and	r24, r24
    3014:	19 f0       	breq	.+6      	; 0x301c <atomQueueDelete+0x70>
                    {
                        /* Exit critical region */
                        CRITICAL_END ();
    3016:	1f bf       	out	0x3f, r17	; 63

                        /* Quit the loop, returning error */
                        status = ATOM_ERR_TIMER;
    3018:	cd ec       	ldi	r28, 0xCD	; 205
                        break;
    301a:	07 c0       	rjmp	.+14     	; 0x302a <atomQueueDelete+0x7e>
                    }

                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
    301c:	18 8a       	std	Y+16, r1	; 0x10
    301e:	1f 86       	std	Y+15, r1	; 0x0f

                }

                /* Exit critical region */
                CRITICAL_END ();
    3020:	1f bf       	out	0x3f, r17	; 63

                /* Request a reschedule */
                woken_threads = TRUE;
    3022:	01 e0       	ldi	r16, 0x01	; 1
            {
                /* Exit critical region and quit the loop */
                CRITICAL_END ();
                break;
            }
        }
    3024:	d7 cf       	rjmp	.-82     	; 0x2fd4 <atomQueueDelete+0x28>

            /* No more suspended threads */
            else
            {
                /* Exit critical region and quit the loop */
                CRITICAL_END ();
    3026:	1f bf       	out	0x3f, r17	; 63
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Default to success status unless errors occur during wakeup */
        status = ATOM_OK;
    3028:	c0 e0       	ldi	r28, 0x00	; 0
                break;
            }
        }

        /* Call scheduler if any threads were woken up */
        if (woken_threads == TRUE)
    302a:	01 30       	cpi	r16, 0x01	; 1
    302c:	49 f4       	brne	.+18     	; 0x3040 <atomQueueDelete+0x94>
        {
            /**
             * Only call the scheduler if we are in thread context, otherwise
             * it will be called on exiting the ISR by atomIntExit().
             */
            if (atomCurrentContext())
    302e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	29 f0       	breq	.+10     	; 0x3040 <atomQueueDelete+0x94>
                atomSched (FALSE);
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
    303c:	01 c0       	rjmp	.+2      	; 0x3040 <atomQueueDelete+0x94>

    /* Parameter check */
    if (qptr == NULL)
    {
        /* Bad pointer */
        status = ATOM_ERR_PARAM;
    303e:	c9 ec       	ldi	r28, 0xC9	; 201
                atomSched (FALSE);
        }
    }

    return (status);
}
    3040:	8c 2f       	mov	r24, r28
    3042:	df 91       	pop	r29
    3044:	cf 91       	pop	r28
    3046:	1f 91       	pop	r17
    3048:	0f 91       	pop	r16
    304a:	ff 90       	pop	r15
    304c:	ef 90       	pop	r14
    304e:	df 90       	pop	r13
    3050:	bf 90       	pop	r11
    3052:	af 90       	pop	r10
    3054:	08 95       	ret

00003056 <atomQueueGet>:
 * @retval ATOM_ERR_PARAM Bad parameter
 * @retval ATOM_ERR_QUEUE Problem putting the thread on the suspend queue
 * @retval ATOM_ERR_TIMER Problem registering the timeout
 */
uint8_t atomQueueGet (ATOM_QUEUE *qptr, int32_t timeout, uint8_t *msgptr)
{
    3056:	4f 92       	push	r4
    3058:	5f 92       	push	r5
    305a:	6f 92       	push	r6
    305c:	7f 92       	push	r7
    305e:	8f 92       	push	r8
    3060:	9f 92       	push	r9
    3062:	af 92       	push	r10
    3064:	bf 92       	push	r11
    3066:	cf 92       	push	r12
    3068:	df 92       	push	r13
    306a:	ff 92       	push	r15
    306c:	0f 93       	push	r16
    306e:	1f 93       	push	r17
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
    3078:	61 97       	sbiw	r28, 0x11	; 17
    307a:	0f b6       	in	r0, 0x3f	; 63
    307c:	f8 94       	cli
    307e:	de bf       	out	0x3e, r29	; 62
    3080:	0f be       	out	0x3f, r0	; 63
    3082:	cd bf       	out	0x3d, r28	; 61
    3084:	6c 01       	movw	r12, r24
    3086:	4a 01       	movw	r8, r20
    3088:	5b 01       	movw	r10, r22
    308a:	29 01       	movw	r4, r18
    QUEUE_TIMER timer_data;
    ATOM_TIMER timer_cb;
    ATOM_TCB *curr_tcb_ptr;

    /* Check parameters */
    if ((qptr == NULL) || (msgptr == NULL))
    308c:	00 97       	sbiw	r24, 0x00	; 0
    308e:	09 f4       	brne	.+2      	; 0x3092 <atomQueueGet+0x3c>
    3090:	80 c0       	rjmp	.+256    	; 0x3192 <atomQueueGet+0x13c>
    3092:	21 15       	cp	r18, r1
    3094:	31 05       	cpc	r19, r1
    3096:	09 f4       	brne	.+2      	; 0x309a <atomQueueGet+0x44>
    3098:	7c c0       	rjmp	.+248    	; 0x3192 <atomQueueGet+0x13c>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Protect access to the queue object and OS queues */
        CRITICAL_START ();
    309a:	ff b6       	in	r15, 0x3f	; 63
    309c:	f8 94       	cli

        /* If no messages on the queue, block the calling thread */
        if (qptr->num_msgs_stored == 0)
    309e:	fc 01       	movw	r30, r24
    30a0:	86 89       	ldd	r24, Z+22	; 0x16
    30a2:	97 89       	ldd	r25, Z+23	; 0x17
    30a4:	a0 8d       	ldd	r26, Z+24	; 0x18
    30a6:	b1 8d       	ldd	r27, Z+25	; 0x19
    30a8:	00 97       	sbiw	r24, 0x00	; 0
    30aa:	a1 05       	cpc	r26, r1
    30ac:	b1 05       	cpc	r27, r1
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <atomQueueGet+0x5c>
    30b0:	60 c0       	rjmp	.+192    	; 0x3172 <atomQueueGet+0x11c>
        {
            /* If called with timeout >= 0, we should block */
            if (timeout >= 0)
    30b2:	77 fd       	sbrc	r23, 7
    30b4:	5b c0       	rjmp	.+182    	; 0x316c <atomQueueGet+0x116>
            {
                /* Queue is empty, block the calling thread */

                /* Get the current TCB */
                curr_tcb_ptr = atomCurrentContext();
    30b6:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    30ba:	8c 01       	movw	r16, r24

                /* Check we are actually in thread context */
                if (curr_tcb_ptr)
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	09 f4       	brne	.+2      	; 0x30c2 <atomQueueGet+0x6c>
    30c0:	52 c0       	rjmp	.+164    	; 0x3166 <atomQueueGet+0x110>
                {
                    /* Add current thread to the list suspended on receives */
                    if (tcbEnqueuePriority (&qptr->getSuspQ, curr_tcb_ptr) == ATOM_OK)
    30c2:	22 e0       	ldi	r18, 0x02	; 2
    30c4:	62 2e       	mov	r6, r18
    30c6:	71 2c       	mov	r7, r1
    30c8:	6c 0c       	add	r6, r12
    30ca:	7d 1c       	adc	r7, r13
    30cc:	c3 01       	movw	r24, r6
    30ce:	b8 01       	movw	r22, r16
    30d0:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
    30d4:	88 23       	and	r24, r24
    30d6:	09 f0       	breq	.+2      	; 0x30da <atomQueueGet+0x84>
    30d8:	43 c0       	rjmp	.+134    	; 0x3160 <atomQueueGet+0x10a>
                    {
                        /* Set suspended status for the current thread */
                        curr_tcb_ptr->suspended = TRUE;
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	f8 01       	movw	r30, r16
    30de:	85 87       	std	Z+13, r24	; 0x0d

                        /* Track errors */
                        status = ATOM_OK;

                        /* Register a timer callback if requested */
                        if (timeout)
    30e0:	81 14       	cp	r8, r1
    30e2:	91 04       	cpc	r9, r1
    30e4:	a1 04       	cpc	r10, r1
    30e6:	b1 04       	cpc	r11, r1
    30e8:	21 f1       	breq	.+72     	; 0x3132 <atomQueueGet+0xdc>
                        {
                            /**
                             * Fill out the data needed by the callback to
                             * wake us up.
                             */
                            timer_data.tcb_ptr = curr_tcb_ptr;
    30ea:	1a 83       	std	Y+2, r17	; 0x02
    30ec:	09 83       	std	Y+1, r16	; 0x01
                            timer_data.queue_ptr = qptr;
    30ee:	dc 82       	std	Y+4, r13	; 0x04
    30f0:	cb 82       	std	Y+3, r12	; 0x03
                            timer_data.suspQ = &qptr->getSuspQ;
    30f2:	7e 82       	std	Y+6, r7	; 0x06
    30f4:	6d 82       	std	Y+5, r6	; 0x05

                            /* Fill out the timer callback request structure */
                            timer_cb.cb_func = atomQueueTimerCallback;
    30f6:	85 ea       	ldi	r24, 0xA5	; 165
    30f8:	96 e1       	ldi	r25, 0x16	; 22
    30fa:	98 87       	std	Y+8, r25	; 0x08
    30fc:	8f 83       	std	Y+7, r24	; 0x07
                            timer_cb.cb_data = (POINTER)&timer_data;
    30fe:	ce 01       	movw	r24, r28
    3100:	01 96       	adiw	r24, 0x01	; 1
    3102:	9a 87       	std	Y+10, r25	; 0x0a
    3104:	89 87       	std	Y+9, r24	; 0x09
                            timer_cb.cb_ticks = timeout;
    3106:	8b 86       	std	Y+11, r8	; 0x0b
    3108:	9c 86       	std	Y+12, r9	; 0x0c
    310a:	ad 86       	std	Y+13, r10	; 0x0d
    310c:	be 86       	std	Y+14, r11	; 0x0e
                            /**
                             * Store the timer details in the TCB so that we
                             * can cancel the timer callback if the queue is
                             * put before the timeout occurs.
                             */
                            curr_tcb_ptr->suspend_timo_cb = &timer_cb;
    310e:	ce 01       	movw	r24, r28
    3110:	07 96       	adiw	r24, 0x07	; 7
    3112:	90 8b       	std	Z+16, r25	; 0x10
    3114:	87 87       	std	Z+15, r24	; 0x0f

                            /* Register a callback on timeout */
                            if (atomTimerRegister (&timer_cb) != ATOM_OK)
    3116:	0e 94 ed 1a 	call	0x35da	; 0x35da <atomTimerRegister>
    311a:	88 23       	and	r24, r24
    311c:	69 f0       	breq	.+26     	; 0x3138 <atomQueueGet+0xe2>
                            {
                                /* Timer registration failed */
                                status = ATOM_ERR_TIMER;

                                /* Clean up and return to the caller */
                                (void)tcbDequeueEntry (&qptr->getSuspQ, curr_tcb_ptr);
    311e:	c3 01       	movw	r24, r6
    3120:	b8 01       	movw	r22, r16
    3122:	0e 94 65 13 	call	0x26ca	; 0x26ca <tcbDequeueEntry>
                                curr_tcb_ptr->suspended = FALSE;
    3126:	f8 01       	movw	r30, r16
    3128:	15 86       	std	Z+13, r1	; 0x0d
                                curr_tcb_ptr->suspend_timo_cb = NULL;
    312a:	10 8a       	std	Z+16, r1	; 0x10
    312c:	17 86       	std	Z+15, r1	; 0x0f

                            /* Register a callback on timeout */
                            if (atomTimerRegister (&timer_cb) != ATOM_OK)
                            {
                                /* Timer registration failed */
                                status = ATOM_ERR_TIMER;
    312e:	2d ec       	ldi	r18, 0xCD	; 205
    3130:	04 c0       	rjmp	.+8      	; 0x313a <atomQueueGet+0xe4>

                        /* Set no timeout requested */
                        else
                        {
                            /* No need to cancel timeouts on this one */
                            curr_tcb_ptr->suspend_timo_cb = NULL;
    3132:	f8 01       	movw	r30, r16
    3134:	10 8a       	std	Z+16, r1	; 0x10
    3136:	17 86       	std	Z+15, r1	; 0x0f
                    {
                        /* Set suspended status for the current thread */
                        curr_tcb_ptr->suspended = TRUE;

                        /* Track errors */
                        status = ATOM_OK;
    3138:	20 e0       	ldi	r18, 0x00	; 0
                            /* No need to cancel timeouts on this one */
                            curr_tcb_ptr->suspend_timo_cb = NULL;
                        }

                        /* Exit critical region */
                        CRITICAL_END ();
    313a:	ff be       	out	0x3f, r15	; 63

                        /* Check no errors occurred */
                        if (status == ATOM_OK)
    313c:	22 23       	and	r18, r18
    313e:	51 f5       	brne	.+84     	; 0x3194 <atomQueueGet+0x13e>
                            /**
                             * Current thread now blocking, schedule in a new
                             * one. We already know we are in thread context
                             * so can call the scheduler from here.
                             */
                            atomSched (FALSE);
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
                            /**
                             * Normal atomQueuePut() wakeups will set ATOM_OK
                             * status, while timeouts will set ATOM_TIMEOUT
                             * and queue deletions will set ATOM_ERR_DELETED.
                             */
                            status = curr_tcb_ptr->suspend_wake_status;
    3146:	f8 01       	movw	r30, r16
    3148:	26 85       	ldd	r18, Z+14	; 0x0e
                             * put on the queue and we can now copy it out.
                             * Otherwise we were woken because we timed out
                             * waiting for a message, or the queue was
                             * deleted, so we should just quit.
                             */
                            if (status == ATOM_OK)
    314a:	22 23       	and	r18, r18
    314c:	19 f5       	brne	.+70     	; 0x3194 <atomQueueGet+0x13e>
                            {
                                /* Enter critical region */
                                CRITICAL_START();
    314e:	0f b7       	in	r16, 0x3f	; 63
    3150:	f8 94       	cli
    3152:	c6 01       	movw	r24, r12
    3154:	b2 01       	movw	r22, r4
    3156:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <queue_remove.part.1>
    315a:	28 2f       	mov	r18, r24

                                /* Copy the message out of the queue */
                                status = queue_remove (qptr, msgptr);

                                /* Exit critical region */
                                CRITICAL_END();
    315c:	0f bf       	out	0x3f, r16	; 63
    315e:	1a c0       	rjmp	.+52     	; 0x3194 <atomQueueGet+0x13e>
                        }
                    }
                    else
                    {
                        /* There was an error putting this thread on the suspend list */
                        CRITICAL_END ();
    3160:	ff be       	out	0x3f, r15	; 63
                        status = ATOM_ERR_QUEUE;
    3162:	2c ec       	ldi	r18, 0xCC	; 204
    3164:	17 c0       	rjmp	.+46     	; 0x3194 <atomQueueGet+0x13e>
                    }
                }
                else
                {
                    /* Not currently in thread context, can't suspend */
                    CRITICAL_END ();
    3166:	ff be       	out	0x3f, r15	; 63
                    status = ATOM_ERR_CONTEXT;
    3168:	28 ec       	ldi	r18, 0xC8	; 200
    316a:	14 c0       	rjmp	.+40     	; 0x3194 <atomQueueGet+0x13e>
                }
            }
            else
            {
                /* timeout == -1, requested not to block and queue is empty */
                CRITICAL_END();
    316c:	ff be       	out	0x3f, r15	; 63
                status = ATOM_WOULDBLOCK;
    316e:	23 e0       	ldi	r18, 0x03	; 3
    3170:	11 c0       	rjmp	.+34     	; 0x3194 <atomQueueGet+0x13e>
                }
            }
            else
            {
                /* timeout == -1, requested not to block and queue is empty */
                CRITICAL_END();
    3172:	c6 01       	movw	r24, r12
    3174:	b9 01       	movw	r22, r18
    3176:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <queue_remove.part.1>
        {
            /* No need to block, there is a message to copy out of the queue */
            status = queue_remove (qptr, msgptr);

            /* Exit critical region */
            CRITICAL_END ();
    317a:	ff be       	out	0x3f, r15	; 63
            /**
             * The scheduler may now make a policy decision to thread
             * switch if we are currently in thread context. If we are
             * in interrupt context it will be handled by atomIntExit().
             */
            if (atomCurrentContext())
    317c:	89 8b       	std	Y+17, r24	; 0x11
    317e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    3182:	29 89       	ldd	r18, Y+17	; 0x11
    3184:	00 97       	sbiw	r24, 0x00	; 0
    3186:	31 f0       	breq	.+12     	; 0x3194 <atomQueueGet+0x13e>
                atomSched (FALSE);
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
    318e:	29 89       	ldd	r18, Y+17	; 0x11
    3190:	01 c0       	rjmp	.+2      	; 0x3194 <atomQueueGet+0x13e>

    /* Check parameters */
    if ((qptr == NULL) || (msgptr == NULL))
    {
        /* Bad pointer */
        status = ATOM_ERR_PARAM;
    3192:	29 ec       	ldi	r18, 0xC9	; 201
                atomSched (FALSE);
        }
    }

    return (status);
}
    3194:	82 2f       	mov	r24, r18
    3196:	61 96       	adiw	r28, 0x11	; 17
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	df 91       	pop	r29
    31a4:	cf 91       	pop	r28
    31a6:	1f 91       	pop	r17
    31a8:	0f 91       	pop	r16
    31aa:	ff 90       	pop	r15
    31ac:	df 90       	pop	r13
    31ae:	cf 90       	pop	r12
    31b0:	bf 90       	pop	r11
    31b2:	af 90       	pop	r10
    31b4:	9f 90       	pop	r9
    31b6:	8f 90       	pop	r8
    31b8:	7f 90       	pop	r7
    31ba:	6f 90       	pop	r6
    31bc:	5f 90       	pop	r5
    31be:	4f 90       	pop	r4
    31c0:	08 95       	ret

000031c2 <atomQueuePut>:
 * @retval ATOM_ERR_PARAM Bad parameter
 * @retval ATOM_ERR_QUEUE Problem putting the thread on the suspend queue
 * @retval ATOM_ERR_TIMER Problem registering the timeout
 */
uint8_t atomQueuePut (ATOM_QUEUE *qptr, int32_t timeout, uint8_t *msgptr)
{
    31c2:	6f 92       	push	r6
    31c4:	7f 92       	push	r7
    31c6:	8f 92       	push	r8
    31c8:	9f 92       	push	r9
    31ca:	af 92       	push	r10
    31cc:	bf 92       	push	r11
    31ce:	df 92       	push	r13
    31d0:	ef 92       	push	r14
    31d2:	ff 92       	push	r15
    31d4:	0f 93       	push	r16
    31d6:	1f 93       	push	r17
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	61 97       	sbiw	r28, 0x11	; 17
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	7c 01       	movw	r14, r24
    31ee:	4a 01       	movw	r8, r20
    31f0:	5b 01       	movw	r10, r22
    31f2:	39 01       	movw	r6, r18
    QUEUE_TIMER timer_data;
    ATOM_TIMER timer_cb;
    ATOM_TCB *curr_tcb_ptr;

    /* Check parameters */
    if ((qptr == NULL) || (msgptr == NULL))
    31f4:	00 97       	sbiw	r24, 0x00	; 0
    31f6:	09 f4       	brne	.+2      	; 0x31fa <atomQueuePut+0x38>
    31f8:	80 c0       	rjmp	.+256    	; 0x32fa <atomQueuePut+0x138>
    31fa:	21 15       	cp	r18, r1
    31fc:	31 05       	cpc	r19, r1
    31fe:	09 f4       	brne	.+2      	; 0x3202 <atomQueuePut+0x40>
    3200:	7c c0       	rjmp	.+248    	; 0x32fa <atomQueuePut+0x138>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Protect access to the queue object and OS queues */
        CRITICAL_START ();
    3202:	df b6       	in	r13, 0x3f	; 63
    3204:	f8 94       	cli

        /* If queue is full, block the calling thread */
        if (qptr->num_msgs_stored == qptr->max_num_msgs)
    3206:	fc 01       	movw	r30, r24
    3208:	46 89       	ldd	r20, Z+22	; 0x16
    320a:	57 89       	ldd	r21, Z+23	; 0x17
    320c:	60 8d       	ldd	r22, Z+24	; 0x18
    320e:	71 8d       	ldd	r23, Z+25	; 0x19
    3210:	82 85       	ldd	r24, Z+10	; 0x0a
    3212:	93 85       	ldd	r25, Z+11	; 0x0b
    3214:	a4 85       	ldd	r26, Z+12	; 0x0c
    3216:	b5 85       	ldd	r27, Z+13	; 0x0d
    3218:	48 17       	cp	r20, r24
    321a:	59 07       	cpc	r21, r25
    321c:	6a 07       	cpc	r22, r26
    321e:	7b 07       	cpc	r23, r27
    3220:	09 f0       	breq	.+2      	; 0x3224 <atomQueuePut+0x62>
    3222:	5b c0       	rjmp	.+182    	; 0x32da <atomQueuePut+0x118>
        {
            /* If called with timeout >= 0, we should block */
            if (timeout >= 0)
    3224:	b7 fc       	sbrc	r11, 7
    3226:	56 c0       	rjmp	.+172    	; 0x32d4 <atomQueuePut+0x112>
            {
                /* Queue is full, block the calling thread */

                /* Get the current TCB */
                curr_tcb_ptr = atomCurrentContext();
    3228:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    322c:	8c 01       	movw	r16, r24

                /* Check we are actually in thread context */
                if (curr_tcb_ptr)
    322e:	00 97       	sbiw	r24, 0x00	; 0
    3230:	09 f4       	brne	.+2      	; 0x3234 <atomQueuePut+0x72>
    3232:	4d c0       	rjmp	.+154    	; 0x32ce <atomQueuePut+0x10c>
                {
                    /* Add current thread to the suspend list on sends */
                    if (tcbEnqueuePriority (&qptr->putSuspQ, curr_tcb_ptr) == ATOM_OK)
    3234:	c7 01       	movw	r24, r14
    3236:	b8 01       	movw	r22, r16
    3238:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
    323c:	88 23       	and	r24, r24
    323e:	09 f0       	breq	.+2      	; 0x3242 <atomQueuePut+0x80>
    3240:	43 c0       	rjmp	.+134    	; 0x32c8 <atomQueuePut+0x106>
                    {
                        /* Set suspended status for the current thread */
                        curr_tcb_ptr->suspended = TRUE;
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	f8 01       	movw	r30, r16
    3246:	85 87       	std	Z+13, r24	; 0x0d

                        /* Track errors */
                        status = ATOM_OK;

                        /* Register a timer callback if requested */
                        if (timeout)
    3248:	81 14       	cp	r8, r1
    324a:	91 04       	cpc	r9, r1
    324c:	a1 04       	cpc	r10, r1
    324e:	b1 04       	cpc	r11, r1
    3250:	21 f1       	breq	.+72     	; 0x329a <atomQueuePut+0xd8>
                        {
                            /**
                             * Fill out the data needed by the callback to
                             * wake us up.
                             */
                            timer_data.tcb_ptr = curr_tcb_ptr;
    3252:	1a 83       	std	Y+2, r17	; 0x02
    3254:	09 83       	std	Y+1, r16	; 0x01
                            timer_data.queue_ptr = qptr;
    3256:	fc 82       	std	Y+4, r15	; 0x04
    3258:	eb 82       	std	Y+3, r14	; 0x03
                            timer_data.suspQ = &qptr->putSuspQ;
    325a:	ed 82       	std	Y+5, r14	; 0x05
    325c:	fe 82       	std	Y+6, r15	; 0x06


                            /* Fill out the timer callback request structure */
                            timer_cb.cb_func = atomQueueTimerCallback;
    325e:	85 ea       	ldi	r24, 0xA5	; 165
    3260:	96 e1       	ldi	r25, 0x16	; 22
    3262:	98 87       	std	Y+8, r25	; 0x08
    3264:	8f 83       	std	Y+7, r24	; 0x07
                            timer_cb.cb_data = (POINTER)&timer_data;
    3266:	ce 01       	movw	r24, r28
    3268:	01 96       	adiw	r24, 0x01	; 1
    326a:	9a 87       	std	Y+10, r25	; 0x0a
    326c:	89 87       	std	Y+9, r24	; 0x09
                            timer_cb.cb_ticks = timeout;
    326e:	8b 86       	std	Y+11, r8	; 0x0b
    3270:	9c 86       	std	Y+12, r9	; 0x0c
    3272:	ad 86       	std	Y+13, r10	; 0x0d
    3274:	be 86       	std	Y+14, r11	; 0x0e
                             * Store the timer details in the TCB so that we
                             * can cancel the timer callback if a message is
                             * removed from the queue before the timeout
                             * occurs.
                             */
                            curr_tcb_ptr->suspend_timo_cb = &timer_cb;
    3276:	ce 01       	movw	r24, r28
    3278:	07 96       	adiw	r24, 0x07	; 7
    327a:	90 8b       	std	Z+16, r25	; 0x10
    327c:	87 87       	std	Z+15, r24	; 0x0f

                            /* Register a callback on timeout */
                            if (atomTimerRegister (&timer_cb) != ATOM_OK)
    327e:	0e 94 ed 1a 	call	0x35da	; 0x35da <atomTimerRegister>
    3282:	88 23       	and	r24, r24
    3284:	69 f0       	breq	.+26     	; 0x32a0 <atomQueuePut+0xde>
                            {
                                /* Timer registration failed */
                                status = ATOM_ERR_TIMER;

                                /* Clean up and return to the caller */
                                (void)tcbDequeueEntry (&qptr->putSuspQ, curr_tcb_ptr);
    3286:	c7 01       	movw	r24, r14
    3288:	b8 01       	movw	r22, r16
    328a:	0e 94 65 13 	call	0x26ca	; 0x26ca <tcbDequeueEntry>
                                curr_tcb_ptr->suspended = FALSE;
    328e:	f8 01       	movw	r30, r16
    3290:	15 86       	std	Z+13, r1	; 0x0d
                                curr_tcb_ptr->suspend_timo_cb = NULL;
    3292:	10 8a       	std	Z+16, r1	; 0x10
    3294:	17 86       	std	Z+15, r1	; 0x0f

                            /* Register a callback on timeout */
                            if (atomTimerRegister (&timer_cb) != ATOM_OK)
                            {
                                /* Timer registration failed */
                                status = ATOM_ERR_TIMER;
    3296:	2d ec       	ldi	r18, 0xCD	; 205
    3298:	04 c0       	rjmp	.+8      	; 0x32a2 <atomQueuePut+0xe0>

                        /* Set no timeout requested */
                        else
                        {
                            /* No need to cancel timeouts on this one */
                            curr_tcb_ptr->suspend_timo_cb = NULL;
    329a:	f8 01       	movw	r30, r16
    329c:	10 8a       	std	Z+16, r1	; 0x10
    329e:	17 86       	std	Z+15, r1	; 0x0f
                    {
                        /* Set suspended status for the current thread */
                        curr_tcb_ptr->suspended = TRUE;

                        /* Track errors */
                        status = ATOM_OK;
    32a0:	20 e0       	ldi	r18, 0x00	; 0
                            /* No need to cancel timeouts on this one */
                            curr_tcb_ptr->suspend_timo_cb = NULL;
                        }

                        /* Exit critical region */
                        CRITICAL_END ();
    32a2:	df be       	out	0x3f, r13	; 63

                        /* Check timer registration was successful */
                        if (status == ATOM_OK)
    32a4:	22 23       	and	r18, r18
    32a6:	51 f5       	brne	.+84     	; 0x32fc <atomQueuePut+0x13a>
                            /**
                             * Current thread now blocking, schedule in a new
                             * one. We already know we are in thread context
                             * so can call the scheduler from here.
                             */
                            atomSched (FALSE);
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
                            /**
                             * Normal atomQueueGet() wakeups will set ATOM_OK
                             * status, while timeouts will set ATOM_TIMEOUT
                             * and queue deletions will set ATOM_ERR_DELETED.
                             */
                            status = curr_tcb_ptr->suspend_wake_status;
    32ae:	f8 01       	movw	r30, r16
    32b0:	26 85       	ldd	r18, Z+14	; 0x0e
                             * removed from the queue and we can now add ours.
                             * Otherwise we were woken because we timed out
                             * waiting for a message, or the queue was
                             * deleted, so we should just quit.
                             */
                            if (status == ATOM_OK)
    32b2:	22 23       	and	r18, r18
    32b4:	19 f5       	brne	.+70     	; 0x32fc <atomQueuePut+0x13a>
                            {
                                /* Enter critical region */
                                CRITICAL_START();
    32b6:	0f b7       	in	r16, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	c7 01       	movw	r24, r14
    32bc:	b3 01       	movw	r22, r6
    32be:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <queue_insert.part.0>
    32c2:	28 2f       	mov	r18, r24

                                /* Copy the message into the queue */
                                status = queue_insert (qptr, msgptr);

                                /* Exit critical region */
                                CRITICAL_END();
    32c4:	0f bf       	out	0x3f, r16	; 63
    32c6:	1a c0       	rjmp	.+52     	; 0x32fc <atomQueuePut+0x13a>
                        }
                    }
                    else
                    {
                        /* There was an error putting this thread on the suspend list */
                        CRITICAL_END ();
    32c8:	df be       	out	0x3f, r13	; 63
                        status = ATOM_ERR_QUEUE;
    32ca:	2c ec       	ldi	r18, 0xCC	; 204
    32cc:	17 c0       	rjmp	.+46     	; 0x32fc <atomQueuePut+0x13a>
                    }
                }
                else
                {
                    /* Not currently in thread context, can't suspend */
                    CRITICAL_END ();
    32ce:	df be       	out	0x3f, r13	; 63
                    status = ATOM_ERR_CONTEXT;
    32d0:	28 ec       	ldi	r18, 0xC8	; 200
    32d2:	14 c0       	rjmp	.+40     	; 0x32fc <atomQueuePut+0x13a>
                }
            }
            else
            {
                /* timeout == -1, cannot block. Just return queue is full */
                CRITICAL_END();
    32d4:	df be       	out	0x3f, r13	; 63
                status = ATOM_WOULDBLOCK;
    32d6:	23 e0       	ldi	r18, 0x03	; 3
    32d8:	11 c0       	rjmp	.+34     	; 0x32fc <atomQueuePut+0x13a>
                }
            }
            else
            {
                /* timeout == -1, cannot block. Just return queue is full */
                CRITICAL_END();
    32da:	c7 01       	movw	r24, r14
    32dc:	b9 01       	movw	r22, r18
    32de:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <queue_insert.part.0>
        {
            /* No need to block, there is space to copy into the queue */
            status = queue_insert (qptr, msgptr);

            /* Exit critical region */
            CRITICAL_END ();
    32e2:	df be       	out	0x3f, r13	; 63
            /**
             * The scheduler may now make a policy decision to thread
             * switch if we are currently in thread context. If we are
             * in interrupt context it will be handled by atomIntExit().
             */
            if (atomCurrentContext())
    32e4:	89 8b       	std	Y+17, r24	; 0x11
    32e6:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    32ea:	29 89       	ldd	r18, Y+17	; 0x11
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	31 f0       	breq	.+12     	; 0x32fc <atomQueuePut+0x13a>
                atomSched (FALSE);
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
    32f6:	29 89       	ldd	r18, Y+17	; 0x11
    32f8:	01 c0       	rjmp	.+2      	; 0x32fc <atomQueuePut+0x13a>

    /* Check parameters */
    if ((qptr == NULL) || (msgptr == NULL))
    {
        /* Bad pointer */
        status = ATOM_ERR_PARAM;
    32fa:	29 ec       	ldi	r18, 0xC9	; 201
                atomSched (FALSE);
        }
    }

    return (status);
}
    32fc:	82 2f       	mov	r24, r18
    32fe:	61 96       	adiw	r28, 0x11	; 17
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	1f 91       	pop	r17
    3310:	0f 91       	pop	r16
    3312:	ff 90       	pop	r15
    3314:	ef 90       	pop	r14
    3316:	df 90       	pop	r13
    3318:	bf 90       	pop	r11
    331a:	af 90       	pop	r10
    331c:	9f 90       	pop	r9
    331e:	8f 90       	pop	r8
    3320:	7f 90       	pop	r7
    3322:	6f 90       	pop	r6
    3324:	08 95       	ret

00003326 <atomSemTimerCallback>:
 * semaphore details.
 *
 * @param[in] cb_data Pointer to a SEM_TIMER object
 */
static void atomSemTimerCallback (POINTER cb_data)
{
    3326:	1f 93       	push	r17
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	ec 01       	movw	r28, r24

    /* Get the SEM_TIMER structure pointer */
    timer_data_ptr = (SEM_TIMER *)cb_data;

    /* Check parameter is valid */
    if (timer_data_ptr)
    332e:	00 97       	sbiw	r24, 0x00	; 0
    3330:	b1 f0       	breq	.+44     	; 0x335e <atomSemTimerCallback+0x38>
    {
        /* Enter critical region */
        CRITICAL_START ();
    3332:	1f b7       	in	r17, 0x3f	; 63
    3334:	f8 94       	cli

        /* Set status to indicate to the waiting thread that it timed out */
        timer_data_ptr->tcb_ptr->suspend_wake_status = ATOM_TIMEOUT;
    3336:	e8 81       	ld	r30, Y
    3338:	f9 81       	ldd	r31, Y+1	; 0x01
    333a:	82 e0       	ldi	r24, 0x02	; 2
    333c:	86 87       	std	Z+14, r24	; 0x0e

        /* Flag as no timeout registered */
        timer_data_ptr->tcb_ptr->suspend_timo_cb = NULL;
    333e:	68 81       	ld	r22, Y
    3340:	79 81       	ldd	r23, Y+1	; 0x01
    3342:	fb 01       	movw	r30, r22
    3344:	10 8a       	std	Z+16, r1	; 0x10
    3346:	17 86       	std	Z+15, r1	; 0x0f

        /* Remove this thread from the semaphore's suspend list */
        (void)tcbDequeueEntry (&timer_data_ptr->sem_ptr->suspQ, timer_data_ptr->tcb_ptr);
    3348:	8a 81       	ldd	r24, Y+2	; 0x02
    334a:	9b 81       	ldd	r25, Y+3	; 0x03
    334c:	0e 94 65 13 	call	0x26ca	; 0x26ca <tcbDequeueEntry>

        /* Put the thread on the ready queue */
        (void)tcbEnqueuePriority (&tcbReadyQ, timer_data_ptr->tcb_ptr);
    3350:	68 81       	ld	r22, Y
    3352:	79 81       	ldd	r23, Y+1	; 0x01
    3354:	85 e4       	ldi	r24, 0x45	; 69
    3356:	94 e0       	ldi	r25, 0x04	; 4
    3358:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>

        /* Exit critical region */
        CRITICAL_END ();
    335c:	1f bf       	out	0x3f, r17	; 63
        /**
         * Note that we don't call the scheduler now as it will be called
         * when we exit the ISR by atomIntExit().
         */
    }
}
    335e:	df 91       	pop	r29
    3360:	cf 91       	pop	r28
    3362:	1f 91       	pop	r17
    3364:	08 95       	ret

00003366 <atomSemCreate>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t atomSemCreate (ATOM_SEM *sem, uint8_t initial_count)
{
    3366:	fc 01       	movw	r30, r24
    uint8_t status;

    /* Parameter check */
    if (sem == NULL)
    3368:	00 97       	sbiw	r24, 0x00	; 0
    336a:	29 f0       	breq	.+10     	; 0x3376 <atomSemCreate+0x10>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Set the initial count */
        sem->count = initial_count;
    336c:	62 83       	std	Z+2, r22	; 0x02

        /* Initialise the suspended threads queue */
        sem->suspQ = NULL;
    336e:	11 82       	std	Z+1, r1	; 0x01
    3370:	10 82       	st	Z, r1

        /* Successful */
        status = ATOM_OK;
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	08 95       	ret

    /* Parameter check */
    if (sem == NULL)
    {
        /* Bad semaphore pointer */
        status = ATOM_ERR_PARAM;
    3376:	89 ec       	ldi	r24, 0xC9	; 201
        /* Successful */
        status = ATOM_OK;
    }

    return (status);
}
    3378:	08 95       	ret

0000337a <atomSemDelete>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_QUEUE Problem putting a woken thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout on a woken thread
 */
uint8_t atomSemDelete (ATOM_SEM *sem)
{
    337a:	cf 92       	push	r12
    337c:	df 92       	push	r13
    337e:	ef 92       	push	r14
    3380:	ff 92       	push	r15
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	cf 93       	push	r28
    3388:	df 93       	push	r29
    338a:	0f 92       	push	r0
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
    3390:	8c 01       	movw	r16, r24
    CRITICAL_STORE;
    ATOM_TCB *tcb_ptr;
    uint8_t woken_threads = FALSE;

    /* Parameter check */
    if (sem == NULL)
    3392:	00 97       	sbiw	r24, 0x00	; 0
    3394:	b9 f1       	breq	.+110    	; 0x3404 <atomSemDelete+0x8a>
    3396:	19 82       	std	Y+1, r1	; 0x01

            /* A thread is suspended on the semaphore */
            if (tcb_ptr)
            {
                /* Return error status to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_ERR_DELETED;
    3398:	8a ec       	ldi	r24, 0xCA	; 202
    339a:	e8 2e       	mov	r14, r24

        /* Wake up all suspended tasks */
        while (1)
        {
            /* Enter critical region */
            CRITICAL_START ();
    339c:	ff b6       	in	r15, 0x3f	; 63
    339e:	f8 94       	cli

            /* Check if any threads are suspended */
            tcb_ptr = tcbDequeueHead (&sem->suspQ);
    33a0:	c8 01       	movw	r24, r16
    33a2:	0e 94 47 13 	call	0x268e	; 0x268e <tcbDequeueHead>
    33a6:	6c 01       	movw	r12, r24

            /* A thread is suspended on the semaphore */
            if (tcb_ptr)
    33a8:	00 97       	sbiw	r24, 0x00	; 0
    33aa:	f9 f0       	breq	.+62     	; 0x33ea <atomSemDelete+0x70>
            {
                /* Return error status to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_ERR_DELETED;
    33ac:	fc 01       	movw	r30, r24
    33ae:	e6 86       	std	Z+14, r14	; 0x0e

                /* Put the thread on the ready queue */
                if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    33b0:	85 e4       	ldi	r24, 0x45	; 69
    33b2:	94 e0       	ldi	r25, 0x04	; 4
    33b4:	b6 01       	movw	r22, r12
    33b6:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
    33ba:	88 23       	and	r24, r24
    33bc:	19 f0       	breq	.+6      	; 0x33c4 <atomSemDelete+0x4a>
                {
                    /* Exit critical region */
                    CRITICAL_END ();
    33be:	ff be       	out	0x3f, r15	; 63

                    /* Quit the loop, returning error */
                    status = ATOM_ERR_QUEUE;
    33c0:	0c ec       	ldi	r16, 0xCC	; 204
                    break;
    33c2:	15 c0       	rjmp	.+42     	; 0x33ee <atomSemDelete+0x74>
                }

                /* If there's a timeout on this suspension, cancel it */
                if (tcb_ptr->suspend_timo_cb)
    33c4:	f6 01       	movw	r30, r12
    33c6:	87 85       	ldd	r24, Z+15	; 0x0f
    33c8:	90 89       	ldd	r25, Z+16	; 0x10
    33ca:	00 97       	sbiw	r24, 0x00	; 0
    33cc:	51 f0       	breq	.+20     	; 0x33e2 <atomSemDelete+0x68>
                {
                    /* Cancel the callback */
                    if (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK)
    33ce:	0e 94 14 1b 	call	0x3628	; 0x3628 <atomTimerCancel>
    33d2:	88 23       	and	r24, r24
    33d4:	19 f0       	breq	.+6      	; 0x33dc <atomSemDelete+0x62>
                    {
                        /* Exit critical region */
                        CRITICAL_END ();
    33d6:	ff be       	out	0x3f, r15	; 63

                        /* Quit the loop, returning error */
                        status = ATOM_ERR_TIMER;
    33d8:	0d ec       	ldi	r16, 0xCD	; 205
                        break;
    33da:	09 c0       	rjmp	.+18     	; 0x33ee <atomSemDelete+0x74>
                    }

                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
    33dc:	f6 01       	movw	r30, r12
    33de:	10 8a       	std	Z+16, r1	; 0x10
    33e0:	17 86       	std	Z+15, r1	; 0x0f

                }

                /* Exit critical region */
                CRITICAL_END ();
    33e2:	ff be       	out	0x3f, r15	; 63

                /* Request a reschedule */
                woken_threads = TRUE;
    33e4:	f1 e0       	ldi	r31, 0x01	; 1
    33e6:	f9 83       	std	Y+1, r31	; 0x01
            {
                /* Exit critical region and quit the loop */
                CRITICAL_END ();
                break;
            }
        }
    33e8:	d9 cf       	rjmp	.-78     	; 0x339c <atomSemDelete+0x22>

            /* No more suspended threads */
            else
            {
                /* Exit critical region and quit the loop */
                CRITICAL_END ();
    33ea:	ff be       	out	0x3f, r15	; 63
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Default to success status unless errors occur during wakeup */
        status = ATOM_OK;
    33ec:	00 e0       	ldi	r16, 0x00	; 0
                break;
            }
        }

        /* Call scheduler if any threads were woken up */
        if (woken_threads == TRUE)
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	81 30       	cpi	r24, 0x01	; 1
    33f2:	49 f4       	brne	.+18     	; 0x3406 <atomSemDelete+0x8c>
        {
            /**
             * Only call the scheduler if we are in thread context, otherwise
             * it will be called on exiting the ISR by atomIntExit().
             */
            if (atomCurrentContext())
    33f4:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    33f8:	00 97       	sbiw	r24, 0x00	; 0
    33fa:	29 f0       	breq	.+10     	; 0x3406 <atomSemDelete+0x8c>
                atomSched (FALSE);
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
    3402:	01 c0       	rjmp	.+2      	; 0x3406 <atomSemDelete+0x8c>

    /* Parameter check */
    if (sem == NULL)
    {
        /* Bad semaphore pointer */
        status = ATOM_ERR_PARAM;
    3404:	09 ec       	ldi	r16, 0xC9	; 201
                atomSched (FALSE);
        }
    }

    return (status);
}
    3406:	80 2f       	mov	r24, r16
    3408:	0f 90       	pop	r0
    340a:	df 91       	pop	r29
    340c:	cf 91       	pop	r28
    340e:	1f 91       	pop	r17
    3410:	0f 91       	pop	r16
    3412:	ff 90       	pop	r15
    3414:	ef 90       	pop	r14
    3416:	df 90       	pop	r13
    3418:	cf 90       	pop	r12
    341a:	08 95       	ret

0000341c <atomSemGet>:
 * @retval ATOM_ERR_PARAM Bad parameter
 * @retval ATOM_ERR_QUEUE Problem putting the thread on the suspend queue
 * @retval ATOM_ERR_TIMER Problem registering the timeout
 */
uint8_t atomSemGet (ATOM_SEM *sem, int32_t timeout)
{
    341c:	8f 92       	push	r8
    341e:	9f 92       	push	r9
    3420:	af 92       	push	r10
    3422:	bf 92       	push	r11
    3424:	cf 92       	push	r12
    3426:	df 92       	push	r13
    3428:	ff 92       	push	r15
    342a:	0f 93       	push	r16
    342c:	1f 93       	push	r17
    342e:	cf 93       	push	r28
    3430:	df 93       	push	r29
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	2e 97       	sbiw	r28, 0x0e	; 14
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	f8 94       	cli
    343c:	de bf       	out	0x3e, r29	; 62
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	cd bf       	out	0x3d, r28	; 61
    3442:	6c 01       	movw	r12, r24
    3444:	4a 01       	movw	r8, r20
    3446:	5b 01       	movw	r10, r22
    SEM_TIMER timer_data;
    ATOM_TIMER timer_cb;
    ATOM_TCB *curr_tcb_ptr;

    /* Check parameters */
    if (sem == NULL)
    3448:	00 97       	sbiw	r24, 0x00	; 0
    344a:	09 f4       	brne	.+2      	; 0x344e <atomSemGet+0x32>
    344c:	5a c0       	rjmp	.+180    	; 0x3502 <atomSemGet+0xe6>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Protect access to the semaphore object and OS queues */
        CRITICAL_START ();
    344e:	ff b6       	in	r15, 0x3f	; 63
    3450:	f8 94       	cli

        /* If count is zero, block the calling thread */
        if (sem->count == 0)
    3452:	fc 01       	movw	r30, r24
    3454:	82 81       	ldd	r24, Z+2	; 0x02
    3456:	88 23       	and	r24, r24
    3458:	09 f0       	breq	.+2      	; 0x345c <atomSemGet+0x40>
    345a:	4d c0       	rjmp	.+154    	; 0x34f6 <atomSemGet+0xda>
        {
            /* If called with timeout >= 0, we should block */
            if (timeout >= 0)
    345c:	77 fd       	sbrc	r23, 7
    345e:	48 c0       	rjmp	.+144    	; 0x34f0 <atomSemGet+0xd4>
            {
                /* Count is zero, block the calling thread */

                /* Get the current TCB */
                curr_tcb_ptr = atomCurrentContext();
    3460:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    3464:	8c 01       	movw	r16, r24

                /* Check we are actually in thread context */
                if (curr_tcb_ptr)
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	09 f4       	brne	.+2      	; 0x346c <atomSemGet+0x50>
    346a:	3f c0       	rjmp	.+126    	; 0x34ea <atomSemGet+0xce>
                {
                    /* Add current thread to the suspend list on this semaphore */
                    if (tcbEnqueuePriority (&sem->suspQ, curr_tcb_ptr) != ATOM_OK)
    346c:	c6 01       	movw	r24, r12
    346e:	b8 01       	movw	r22, r16
    3470:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
    3474:	88 23       	and	r24, r24
    3476:	19 f0       	breq	.+6      	; 0x347e <atomSemGet+0x62>
                    {
                        /* Exit critical region */
                        CRITICAL_END ();
    3478:	ff be       	out	0x3f, r15	; 63

                        /* There was an error putting this thread on the suspend list */
                        status = ATOM_ERR_QUEUE;
    347a:	8c ec       	ldi	r24, 0xCC	; 204
    347c:	43 c0       	rjmp	.+134    	; 0x3504 <atomSemGet+0xe8>
                    }
                    else
                    {
                        /* Set suspended status for the current thread */
                        curr_tcb_ptr->suspended = TRUE;
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	f8 01       	movw	r30, r16
    3482:	85 87       	std	Z+13, r24	; 0x0d

                        /* Track errors */
                        status = ATOM_OK;

                        /* Register a timer callback if requested */
                        if (timeout)
    3484:	81 14       	cp	r8, r1
    3486:	91 04       	cpc	r9, r1
    3488:	a1 04       	cpc	r10, r1
    348a:	b1 04       	cpc	r11, r1
    348c:	11 f1       	breq	.+68     	; 0x34d2 <atomSemGet+0xb6>
                        {
                            /* Fill out the data needed by the callback to wake us up */
                            timer_data.tcb_ptr = curr_tcb_ptr;
    348e:	1a 83       	std	Y+2, r17	; 0x02
    3490:	09 83       	std	Y+1, r16	; 0x01
                            timer_data.sem_ptr = sem;
    3492:	dc 82       	std	Y+4, r13	; 0x04
    3494:	cb 82       	std	Y+3, r12	; 0x03

                            /* Fill out the timer callback request structure */
                            timer_cb.cb_func = atomSemTimerCallback;
    3496:	83 e9       	ldi	r24, 0x93	; 147
    3498:	99 e1       	ldi	r25, 0x19	; 25
    349a:	9e 83       	std	Y+6, r25	; 0x06
    349c:	8d 83       	std	Y+5, r24	; 0x05
                            timer_cb.cb_data = (POINTER)&timer_data;
    349e:	ce 01       	movw	r24, r28
    34a0:	01 96       	adiw	r24, 0x01	; 1
    34a2:	98 87       	std	Y+8, r25	; 0x08
    34a4:	8f 83       	std	Y+7, r24	; 0x07
                            timer_cb.cb_ticks = timeout;
    34a6:	89 86       	std	Y+9, r8	; 0x09
    34a8:	9a 86       	std	Y+10, r9	; 0x0a
    34aa:	ab 86       	std	Y+11, r10	; 0x0b
    34ac:	bc 86       	std	Y+12, r11	; 0x0c
                            /**
                             * Store the timer details in the TCB so that we can
                             * cancel the timer callback if the semaphore is put
                             * before the timeout occurs.
                             */
                            curr_tcb_ptr->suspend_timo_cb = &timer_cb;
    34ae:	ce 01       	movw	r24, r28
    34b0:	05 96       	adiw	r24, 0x05	; 5
    34b2:	90 8b       	std	Z+16, r25	; 0x10
    34b4:	87 87       	std	Z+15, r24	; 0x0f

                            /* Register a callback on timeout */
                            if (atomTimerRegister (&timer_cb) != ATOM_OK)
    34b6:	0e 94 ed 1a 	call	0x35da	; 0x35da <atomTimerRegister>
    34ba:	88 23       	and	r24, r24
    34bc:	69 f0       	breq	.+26     	; 0x34d8 <atomSemGet+0xbc>
                            {
                                /* Timer registration failed */
                                status = ATOM_ERR_TIMER;

                                /* Clean up and return to the caller */
                                (void)tcbDequeueEntry (&sem->suspQ, curr_tcb_ptr);
    34be:	c6 01       	movw	r24, r12
    34c0:	b8 01       	movw	r22, r16
    34c2:	0e 94 65 13 	call	0x26ca	; 0x26ca <tcbDequeueEntry>
                                curr_tcb_ptr->suspended = FALSE;
    34c6:	f8 01       	movw	r30, r16
    34c8:	15 86       	std	Z+13, r1	; 0x0d
                                curr_tcb_ptr->suspend_timo_cb = NULL;
    34ca:	10 8a       	std	Z+16, r1	; 0x10
    34cc:	17 86       	std	Z+15, r1	; 0x0f

                            /* Register a callback on timeout */
                            if (atomTimerRegister (&timer_cb) != ATOM_OK)
                            {
                                /* Timer registration failed */
                                status = ATOM_ERR_TIMER;
    34ce:	8d ec       	ldi	r24, 0xCD	; 205
    34d0:	04 c0       	rjmp	.+8      	; 0x34da <atomSemGet+0xbe>

                        /* Set no timeout requested */
                        else
                        {
                            /* No need to cancel timeouts on this one */
                            curr_tcb_ptr->suspend_timo_cb = NULL;
    34d2:	f8 01       	movw	r30, r16
    34d4:	10 8a       	std	Z+16, r1	; 0x10
    34d6:	17 86       	std	Z+15, r1	; 0x0f
                    {
                        /* Set suspended status for the current thread */
                        curr_tcb_ptr->suspended = TRUE;

                        /* Track errors */
                        status = ATOM_OK;
    34d8:	80 e0       	ldi	r24, 0x00	; 0
                            /* No need to cancel timeouts on this one */
                            curr_tcb_ptr->suspend_timo_cb = NULL;
                        }

                        /* Exit critical region */
                        CRITICAL_END ();
    34da:	ff be       	out	0x3f, r15	; 63

                        /* Check no errors have occurred */
                        if (status == ATOM_OK)
    34dc:	88 23       	and	r24, r24
    34de:	91 f4       	brne	.+36     	; 0x3504 <atomSemGet+0xe8>
                            /**
                             * Current thread now blocking, schedule in a new
                             * one. We already know we are in thread context
                             * so can call the scheduler from here.
                             */
                            atomSched (FALSE);
    34e0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
                            /**
                             * Normal atomSemPut() wakeups will set ATOM_OK status,
                             * while timeouts will set ATOM_TIMEOUT and semaphore
                             * deletions will set ATOM_ERR_DELETED.
                             */
                            status = curr_tcb_ptr->suspend_wake_status;
    34e4:	f8 01       	movw	r30, r16
    34e6:	86 85       	ldd	r24, Z+14	; 0x0e
    34e8:	0d c0       	rjmp	.+26     	; 0x3504 <atomSemGet+0xe8>
                    }
                }
                else
                {
                    /* Exit critical region */
                    CRITICAL_END ();
    34ea:	ff be       	out	0x3f, r15	; 63

                    /* Not currently in thread context, can't suspend */
                    status = ATOM_ERR_CONTEXT;
    34ec:	88 ec       	ldi	r24, 0xC8	; 200
    34ee:	0a c0       	rjmp	.+20     	; 0x3504 <atomSemGet+0xe8>
                }
            }
            else
            {
                /* timeout == -1, requested not to block and count is zero */
                CRITICAL_END();
    34f0:	ff be       	out	0x3f, r15	; 63
                status = ATOM_WOULDBLOCK;
    34f2:	83 e0       	ldi	r24, 0x03	; 3
    34f4:	07 c0       	rjmp	.+14     	; 0x3504 <atomSemGet+0xe8>
            }
        }
        else
        {
            /* Count is non-zero, just decrement it and return to calling thread */
            sem->count--;
    34f6:	81 50       	subi	r24, 0x01	; 1
    34f8:	f6 01       	movw	r30, r12
    34fa:	82 83       	std	Z+2, r24	; 0x02

            /* Exit critical region */
            CRITICAL_END ();
    34fc:	ff be       	out	0x3f, r15	; 63

            /* Successful */
            status = ATOM_OK;
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	01 c0       	rjmp	.+2      	; 0x3504 <atomSemGet+0xe8>

    /* Check parameters */
    if (sem == NULL)
    {
        /* Bad semaphore pointer */
        status = ATOM_ERR_PARAM;
    3502:	89 ec       	ldi	r24, 0xC9	; 201
            status = ATOM_OK;
        }
    }

    return (status);
}
    3504:	2e 96       	adiw	r28, 0x0e	; 14
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
    3510:	df 91       	pop	r29
    3512:	cf 91       	pop	r28
    3514:	1f 91       	pop	r17
    3516:	0f 91       	pop	r16
    3518:	ff 90       	pop	r15
    351a:	df 90       	pop	r13
    351c:	cf 90       	pop	r12
    351e:	bf 90       	pop	r11
    3520:	af 90       	pop	r10
    3522:	9f 90       	pop	r9
    3524:	8f 90       	pop	r8
    3526:	08 95       	ret

00003528 <atomSemPut>:
 * @retval ATOM_ERR_PARAM Bad parameter
 * @retval ATOM_ERR_QUEUE Problem putting a woken thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout for a woken thread
 */
uint8_t atomSemPut (ATOM_SEM * sem)
{
    3528:	1f 93       	push	r17
    352a:	cf 93       	push	r28
    352c:	df 93       	push	r29
    uint8_t status;
    CRITICAL_STORE;
    ATOM_TCB *tcb_ptr;

    /* Check parameters */
    if (sem == NULL)
    352e:	00 97       	sbiw	r24, 0x00	; 0
    3530:	b9 f1       	breq	.+110    	; 0x35a0 <atomSemPut+0x78>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Protect access to the semaphore object and OS queues */
        CRITICAL_START ();
    3532:	1f b7       	in	r17, 0x3f	; 63
    3534:	f8 94       	cli

        /* If any threads are blocking on the semaphore, wake up one */
        if (sem->suspQ)
    3536:	fc 01       	movw	r30, r24
    3538:	20 81       	ld	r18, Z
    353a:	31 81       	ldd	r19, Z+1	; 0x01
    353c:	21 15       	cp	r18, r1
    353e:	31 05       	cpc	r19, r1
    3540:	21 f1       	breq	.+72     	; 0x358a <atomSemPut+0x62>
            /**
             * Threads are woken up in priority order, with a FIFO system
             * used on same priority threads. We always take the head,
             * ordering is taken care of by an ordered list enqueue.
             */
            tcb_ptr = tcbDequeueHead (&sem->suspQ);
    3542:	0e 94 47 13 	call	0x268e	; 0x268e <tcbDequeueHead>
    3546:	ec 01       	movw	r28, r24
            if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    3548:	85 e4       	ldi	r24, 0x45	; 69
    354a:	94 e0       	ldi	r25, 0x04	; 4
    354c:	be 01       	movw	r22, r28
    354e:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>
    3552:	88 23       	and	r24, r24
    3554:	19 f0       	breq	.+6      	; 0x355c <atomSemPut+0x34>
            {
                /* Exit critical region */
                CRITICAL_END ();
    3556:	1f bf       	out	0x3f, r17	; 63

                /* There was a problem putting the thread on the ready queue */
                status = ATOM_ERR_QUEUE;
    3558:	cc ec       	ldi	r28, 0xCC	; 204
    355a:	23 c0       	rjmp	.+70     	; 0x35a2 <atomSemPut+0x7a>
            }
            else
            {
                /* Set OK status to be returned to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_OK;
    355c:	1e 86       	std	Y+14, r1	; 0x0e

                /* If there's a timeout on this suspension, cancel it */
                if ((tcb_ptr->suspend_timo_cb != NULL)
    355e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3560:	98 89       	ldd	r25, Y+16	; 0x10
    3562:	00 97       	sbiw	r24, 0x00	; 0
    3564:	21 f0       	breq	.+8      	; 0x356e <atomSemPut+0x46>
                    && (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK))
    3566:	0e 94 14 1b 	call	0x3628	; 0x3628 <atomTimerCancel>
    356a:	88 23       	and	r24, r24
    356c:	21 f4       	brne	.+8      	; 0x3576 <atomSemPut+0x4e>
                    status = ATOM_ERR_TIMER;
                }
                else
                {
                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
    356e:	18 8a       	std	Y+16, r1	; 0x10
    3570:	1f 86       	std	Y+15, r1	; 0x0f

                    /* Successful */
                    status = ATOM_OK;
    3572:	c0 e0       	ldi	r28, 0x00	; 0
    3574:	01 c0       	rjmp	.+2      	; 0x3578 <atomSemPut+0x50>
                /* If there's a timeout on this suspension, cancel it */
                if ((tcb_ptr->suspend_timo_cb != NULL)
                    && (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK))
                {
                    /* There was a problem cancelling a timeout on this semaphore */
                    status = ATOM_ERR_TIMER;
    3576:	cd ec       	ldi	r28, 0xCD	; 205
                    /* Successful */
                    status = ATOM_OK;
                }

                /* Exit critical region */
                CRITICAL_END ();
    3578:	1f bf       	out	0x3f, r17	; 63
                /**
                 * The scheduler may now make a policy decision to thread
                 * switch if we are currently in thread context. If we are
                 * in interrupt context it will be handled by atomIntExit().
                 */
                if (atomCurrentContext())
    357a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	81 f0       	breq	.+32     	; 0x35a2 <atomSemPut+0x7a>
                    atomSched (FALSE);
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
    3588:	0c c0       	rjmp	.+24     	; 0x35a2 <atomSemPut+0x7a>

        /* If no threads waiting, just increment the count and return */
        else
        {
            /* Check for count overflow */
            if (sem->count == 255)
    358a:	fc 01       	movw	r30, r24
    358c:	22 81       	ldd	r18, Z+2	; 0x02
    358e:	2f 3f       	cpi	r18, 0xFF	; 255
    3590:	21 f0       	breq	.+8      	; 0x359a <atomSemPut+0x72>
                status = ATOM_ERR_OVF;
            }
            else
            {
                /* Increment the count and return success */
                sem->count++;
    3592:	2f 5f       	subi	r18, 0xFF	; 255
    3594:	22 83       	std	Z+2, r18	; 0x02
                status = ATOM_OK;
    3596:	c0 e0       	ldi	r28, 0x00	; 0
    3598:	01 c0       	rjmp	.+2      	; 0x359c <atomSemPut+0x74>
        {
            /* Check for count overflow */
            if (sem->count == 255)
            {
                /* Don't increment, just return error status */
                status = ATOM_ERR_OVF;
    359a:	cb ec       	ldi	r28, 0xCB	; 203
                sem->count++;
                status = ATOM_OK;
            }

            /* Exit critical region */
            CRITICAL_END ();
    359c:	1f bf       	out	0x3f, r17	; 63
    359e:	01 c0       	rjmp	.+2      	; 0x35a2 <atomSemPut+0x7a>

    /* Check parameters */
    if (sem == NULL)
    {
        /* Bad semaphore pointer */
        status = ATOM_ERR_PARAM;
    35a0:	c9 ec       	ldi	r28, 0xC9	; 201
            CRITICAL_END ();
        }
    }

    return (status);
}
    35a2:	8c 2f       	mov	r24, r28
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	1f 91       	pop	r17
    35aa:	08 95       	ret

000035ac <atomSemResetCount>:
uint8_t atomSemResetCount (ATOM_SEM *sem, uint8_t count)
{
    uint8_t status;

    /* Parameter check */
    if (sem == NULL)
    35ac:	00 97       	sbiw	r24, 0x00	; 0
    35ae:	21 f0       	breq	.+8      	; 0x35b8 <atomSemResetCount+0xc>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Set the count */
        sem->count = count;
    35b0:	fc 01       	movw	r30, r24
    35b2:	62 83       	std	Z+2, r22	; 0x02

        /* Successful */
        status = ATOM_OK;
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	08 95       	ret

    /* Parameter check */
    if (sem == NULL)
    {
        /* Bad semaphore pointer */
        status = ATOM_ERR_PARAM;
    35b8:	89 ec       	ldi	r24, 0xC9	; 201
        status = ATOM_OK;
    }

    return (status);

}
    35ba:	08 95       	ret

000035bc <atomTimerDelayCallback>:
 * @param[in] cb_data Callback parameter (DELAY_TIMER ptr for sleeping thread)
 *
 * @return None
 */
static void atomTimerDelayCallback (POINTER cb_data)
{
    35bc:	cf 93       	push	r28

    /* Get the DELAY_TIMER structure pointer */
    timer_data_ptr = (DELAY_TIMER *)cb_data;

    /* Check parameter is valid */
    if (timer_data_ptr)
    35be:	00 97       	sbiw	r24, 0x00	; 0
    35c0:	51 f0       	breq	.+20     	; 0x35d6 <atomTimerDelayCallback+0x1a>
    {
        /* Enter critical region */
        CRITICAL_START ();
    35c2:	cf b7       	in	r28, 0x3f	; 63
    35c4:	f8 94       	cli

        /* Put the thread on the ready queue */
        (void)tcbEnqueuePriority (&tcbReadyQ, timer_data_ptr->tcb_ptr);
    35c6:	fc 01       	movw	r30, r24
    35c8:	60 81       	ld	r22, Z
    35ca:	71 81       	ldd	r23, Z+1	; 0x01
    35cc:	85 e4       	ldi	r24, 0x45	; 69
    35ce:	94 e0       	ldi	r25, 0x04	; 4
    35d0:	0e 94 08 13 	call	0x2610	; 0x2610 <tcbEnqueuePriority>

        /* Exit critical region */
        CRITICAL_END ();
    35d4:	cf bf       	out	0x3f, r28	; 63
         * Don't call the scheduler yet. The ISR exit routine will do this
         * in case there are other callbacks to be made, which may also make
         * threads ready.
         */
    }
}
    35d6:	cf 91       	pop	r28
    35d8:	08 95       	ret

000035da <atomTimerRegister>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t atomTimerRegister (ATOM_TIMER *timer_ptr)
{
    35da:	fc 01       	movw	r30, r24
    uint8_t status;
    CRITICAL_STORE;

    /* Parameter check */
    if ((timer_ptr == NULL) || (timer_ptr->cb_func == NULL)
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	01 f1       	breq	.+64     	; 0x3620 <atomTimerRegister+0x46>
    35e0:	80 81       	ld	r24, Z
    35e2:	91 81       	ldd	r25, Z+1	; 0x01
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	e1 f0       	breq	.+56     	; 0x3620 <atomTimerRegister+0x46>
        || (timer_ptr->cb_ticks == 0))
    35e8:	84 81       	ldd	r24, Z+4	; 0x04
    35ea:	95 81       	ldd	r25, Z+5	; 0x05
    35ec:	a6 81       	ldd	r26, Z+6	; 0x06
    35ee:	b7 81       	ldd	r27, Z+7	; 0x07
    35f0:	00 97       	sbiw	r24, 0x00	; 0
    35f2:	a1 05       	cpc	r26, r1
    35f4:	b1 05       	cpc	r27, r1
    35f6:	b1 f0       	breq	.+44     	; 0x3624 <atomTimerRegister+0x4a>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Protect the list */
        CRITICAL_START ();
    35f8:	2f b7       	in	r18, 0x3f	; 63
    35fa:	f8 94       	cli
         * of the list. On each system tick increment the list is walked
         * and the remaining ticks count for that timer is decremented.
         * Once the remaining ticks reaches zero, the timer callback is
         * made.
         */
        if (timer_queue == NULL)
    35fc:	80 91 5c 04 	lds	r24, 0x045C
    3600:	90 91 5d 04 	lds	r25, 0x045D
    3604:	00 97       	sbiw	r24, 0x00	; 0
    3606:	19 f4       	brne	.+6      	; 0x360e <atomTimerRegister+0x34>
        {
            /* List is empty, insert new head */
            timer_ptr->next_timer = NULL;
    3608:	11 86       	std	Z+9, r1	; 0x09
    360a:	10 86       	std	Z+8, r1	; 0x08
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <atomTimerRegister+0x38>
            timer_queue = timer_ptr;
        }
        else
        {
            /* List has at least one entry, enqueue new timer before */
            timer_ptr->next_timer = timer_queue;
    360e:	91 87       	std	Z+9, r25	; 0x09
    3610:	80 87       	std	Z+8, r24	; 0x08
            timer_queue = timer_ptr;
    3612:	f0 93 5d 04 	sts	0x045D, r31
    3616:	e0 93 5c 04 	sts	0x045C, r30
        }

        /* End of list protection */
        CRITICAL_END ();
    361a:	2f bf       	out	0x3f, r18	; 63

        /* Successful */
        status = ATOM_OK;
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	08 95       	ret
    /* Parameter check */
    if ((timer_ptr == NULL) || (timer_ptr->cb_func == NULL)
        || (timer_ptr->cb_ticks == 0))
    {
        /* Return error */
        status = ATOM_ERR_PARAM;
    3620:	89 ec       	ldi	r24, 0xC9	; 201
    3622:	08 95       	ret
    3624:	89 ec       	ldi	r24, 0xC9	; 201
        /* Successful */
        status = ATOM_OK;
    }

    return (status);
}
    3626:	08 95       	ret

00003628 <atomTimerCancel>:
    uint8_t status = ATOM_ERR_NOT_FOUND;
    ATOM_TIMER *prev_ptr, *next_ptr;
    CRITICAL_STORE;

    /* Parameter check */
    if (timer_ptr == NULL)
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	31 f1       	breq	.+76     	; 0x3678 <atomTimerCancel+0x50>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Protect the list */
        CRITICAL_START ();
    362c:	4f b7       	in	r20, 0x3f	; 63
    362e:	f8 94       	cli

        /* Walk the list to find the relevant timer */
        prev_ptr = next_ptr = timer_queue;
    3630:	20 91 5c 04 	lds	r18, 0x045C
    3634:	30 91 5d 04 	lds	r19, 0x045D
    3638:	f9 01       	movw	r30, r18
    363a:	d9 01       	movw	r26, r18
        while (next_ptr)
    363c:	18 c0       	rjmp	.+48     	; 0x366e <atomTimerCancel+0x46>
        {
            /* Is this entry the one we're looking for? */
            if (next_ptr == timer_ptr)
    363e:	e8 17       	cp	r30, r24
    3640:	f9 07       	cpc	r31, r25
    3642:	81 f4       	brne	.+32     	; 0x3664 <atomTimerCancel+0x3c>
    3644:	80 85       	ldd	r24, Z+8	; 0x08
    3646:	91 85       	ldd	r25, Z+9	; 0x09
            {
                if (next_ptr == timer_queue)
    3648:	e2 17       	cp	r30, r18
    364a:	f3 07       	cpc	r31, r19
    364c:	29 f4       	brne	.+10     	; 0x3658 <atomTimerCancel+0x30>
                {
                    /* We're removing the list head */
                    timer_queue = next_ptr->next_timer;
    364e:	90 93 5d 04 	sts	0x045D, r25
    3652:	80 93 5c 04 	sts	0x045C, r24
    3656:	04 c0       	rjmp	.+8      	; 0x3660 <atomTimerCancel+0x38>
                }
                else
                {
                    /* We're removing a mid or tail TCB */
                    prev_ptr->next_timer = next_ptr->next_timer;
    3658:	19 96       	adiw	r26, 0x09	; 9
    365a:	9c 93       	st	X, r25
    365c:	8e 93       	st	-X, r24
    365e:	18 97       	sbiw	r26, 0x08	; 8
                }

                /* Successful */
                status = ATOM_OK;
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	08 c0       	rjmp	.+16     	; 0x3674 <atomTimerCancel+0x4c>
                break;
            }

            /* Move on to the next in the list */
            prev_ptr = next_ptr;
            next_ptr = next_ptr->next_timer;
    3664:	60 85       	ldd	r22, Z+8	; 0x08
    3666:	51 85       	ldd	r21, Z+9	; 0x09
    3668:	df 01       	movw	r26, r30
    366a:	e6 2f       	mov	r30, r22
    366c:	f5 2f       	mov	r31, r21
        /* Protect the list */
        CRITICAL_START ();

        /* Walk the list to find the relevant timer */
        prev_ptr = next_ptr = timer_queue;
        while (next_ptr)
    366e:	30 97       	sbiw	r30, 0x00	; 0
    3670:	31 f7       	brne	.-52     	; 0x363e <atomTimerCancel+0x16>
 * @retval ATOM_ERR_PARAM Bad parameters
 * @retval ATOM_ERR_NOT_FOUND Timer registration was not found
 */
uint8_t atomTimerCancel (ATOM_TIMER *timer_ptr)
{
    uint8_t status = ATOM_ERR_NOT_FOUND;
    3672:	8e ec       	ldi	r24, 0xCE	; 206
            next_ptr = next_ptr->next_timer;

        }

        /* End of list protection */
        CRITICAL_END ();
    3674:	4f bf       	out	0x3f, r20	; 63
    3676:	08 95       	ret

    /* Parameter check */
    if (timer_ptr == NULL)
    {
        /* Return error */
        status = ATOM_ERR_PARAM;
    3678:	89 ec       	ldi	r24, 0xC9	; 201
        /* End of list protection */
        CRITICAL_END ();
     }

    return (status);
}
    367a:	08 95       	ret

0000367c <atomTimeGet>:
 * @retval Current system tick count

 */
uint32_t atomTimeGet(void)
{
    return (system_ticks);
    367c:	60 91 5e 04 	lds	r22, 0x045E
    3680:	70 91 5f 04 	lds	r23, 0x045F
}
    3684:	80 91 60 04 	lds	r24, 0x0460
    3688:	90 91 61 04 	lds	r25, 0x0461
    368c:	08 95       	ret

0000368e <atomTimeSet>:
 * @param[in] new_time New system tick time value
 *
 * @return None
 */
void atomTimeSet(uint32_t new_time)
{
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    system_ticks = new_time;
    3692:	80 93 5e 04 	sts	0x045E, r24
    3696:	90 93 5f 04 	sts	0x045F, r25
    369a:	a0 93 60 04 	sts	0x0460, r26
    369e:	b0 93 61 04 	sts	0x0461, r27
}
    36a2:	08 95       	ret

000036a4 <atomTimerTick>:
 *  2. Call back to any registered timer callbacks
 *
 * @return None
 */
void atomTimerTick (void)
{
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
    36a8:	cf 93       	push	r28
    36aa:	df 93       	push	r29
    /* Only do anything if the OS is started */
    if (atomOSStarted)
    36ac:	80 91 44 04 	lds	r24, 0x0444
    36b0:	88 23       	and	r24, r24
    36b2:	09 f4       	brne	.+2      	; 0x36b6 <atomTimerTick+0x12>
    36b4:	47 c0       	rjmp	.+142    	; 0x3744 <atomTimerTick+0xa0>
    {
        /* Increment the system tick count */
        system_ticks++;
    36b6:	80 91 5e 04 	lds	r24, 0x045E
    36ba:	90 91 5f 04 	lds	r25, 0x045F
    36be:	a0 91 60 04 	lds	r26, 0x0460
    36c2:	b0 91 61 04 	lds	r27, 0x0461
    36c6:	01 96       	adiw	r24, 0x01	; 1
    36c8:	a1 1d       	adc	r26, r1
    36ca:	b1 1d       	adc	r27, r1
    36cc:	80 93 5e 04 	sts	0x045E, r24
    36d0:	90 93 5f 04 	sts	0x045F, r25
    36d4:	a0 93 60 04 	sts	0x0460, r26
    36d8:	b0 93 61 04 	sts	0x0461, r27

    /*
     * Walk the list decrementing each timer's remaining ticks count and
     * looking for due callbacks.
     */
    prev_ptr = next_ptr = timer_queue;
    36dc:	c0 91 5c 04 	lds	r28, 0x045C
    36e0:	d0 91 5d 04 	lds	r29, 0x045D
    36e4:	8e 01       	movw	r16, r28
    36e6:	2c c0       	rjmp	.+88     	; 0x3740 <atomTimerTick+0x9c>
    while (next_ptr)
    {
        /* Is this entry due? */
        if (--(next_ptr->cb_ticks) == 0)
    36e8:	8c 81       	ldd	r24, Y+4	; 0x04
    36ea:	9d 81       	ldd	r25, Y+5	; 0x05
    36ec:	ae 81       	ldd	r26, Y+6	; 0x06
    36ee:	bf 81       	ldd	r27, Y+7	; 0x07
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	a1 09       	sbc	r26, r1
    36f4:	b1 09       	sbc	r27, r1
    36f6:	8c 83       	std	Y+4, r24	; 0x04
    36f8:	9d 83       	std	Y+5, r25	; 0x05
    36fa:	ae 83       	std	Y+6, r26	; 0x06
    36fc:	bf 83       	std	Y+7, r27	; 0x07
    36fe:	00 97       	sbiw	r24, 0x00	; 0
    3700:	a1 05       	cpc	r26, r1
    3702:	b1 05       	cpc	r27, r1
    3704:	c9 f4       	brne	.+50     	; 0x3738 <atomTimerTick+0x94>
        {
            /* Remove the entry from the timer list */
            if (next_ptr == timer_queue)
    3706:	80 91 5c 04 	lds	r24, 0x045C
    370a:	90 91 5d 04 	lds	r25, 0x045D
    370e:	28 85       	ldd	r18, Y+8	; 0x08
    3710:	39 85       	ldd	r19, Y+9	; 0x09
    3712:	c8 17       	cp	r28, r24
    3714:	d9 07       	cpc	r29, r25
    3716:	29 f4       	brne	.+10     	; 0x3722 <atomTimerTick+0x7e>
            {
                /* We're removing the list head */
                timer_queue = next_ptr->next_timer;
    3718:	30 93 5d 04 	sts	0x045D, r19
    371c:	20 93 5c 04 	sts	0x045C, r18
    3720:	03 c0       	rjmp	.+6      	; 0x3728 <atomTimerTick+0x84>
            }
            else
            {
                /* We're removing a mid or tail timer */
                prev_ptr->next_timer = next_ptr->next_timer;
    3722:	f8 01       	movw	r30, r16
    3724:	31 87       	std	Z+9, r19	; 0x09
    3726:	20 87       	std	Z+8, r18	; 0x08
            }

            /* Call the registered callback */
            if (next_ptr->cb_func)
    3728:	e8 81       	ld	r30, Y
    372a:	f9 81       	ldd	r31, Y+1	; 0x01
    372c:	30 97       	sbiw	r30, 0x00	; 0
    372e:	29 f0       	breq	.+10     	; 0x373a <atomTimerTick+0x96>
            {
                next_ptr->cb_func (next_ptr->cb_data);
    3730:	8a 81       	ldd	r24, Y+2	; 0x02
    3732:	9b 81       	ldd	r25, Y+3	; 0x03
    3734:	09 95       	icall
    3736:	01 c0       	rjmp	.+2      	; 0x373a <atomTimerTick+0x96>
     */
    prev_ptr = next_ptr = timer_queue;
    while (next_ptr)
    {
        /* Is this entry due? */
        if (--(next_ptr->cb_ticks) == 0)
    3738:	8e 01       	movw	r16, r28
             */
            prev_ptr = next_ptr;
        }

        /* Move on to the next in the list */
        next_ptr = next_ptr->next_timer;
    373a:	08 84       	ldd	r0, Y+8	; 0x08
    373c:	d9 85       	ldd	r29, Y+9	; 0x09
    373e:	c0 2d       	mov	r28, r0
    /*
     * Walk the list decrementing each timer's remaining ticks count and
     * looking for due callbacks.
     */
    prev_ptr = next_ptr = timer_queue;
    while (next_ptr)
    3740:	20 97       	sbiw	r28, 0x00	; 0
    3742:	91 f6       	brne	.-92     	; 0x36e8 <atomTimerTick+0x44>
        system_ticks++;

        /* Check for any callbacks that are due */
        atomTimerCallbacks ();
    }
}
    3744:	df 91       	pop	r29
    3746:	cf 91       	pop	r28
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    374c:	08 95       	ret

0000374e <atomTimerDelay>:
 * @retval ATOM_OK Successful delay
 * @retval ATOM_ERR_PARAM Bad parameter (ticks must be non-zero)
 * @retval ATOM_ERR_CONTEXT Not called from thread context
 */
uint8_t atomTimerDelay (uint32_t ticks)
{
    374e:	cf 92       	push	r12
    3750:	df 92       	push	r13
    3752:	ef 92       	push	r14
    3754:	ff 92       	push	r15
    3756:	1f 93       	push	r17
    3758:	cf 93       	push	r28
    375a:	df 93       	push	r29
    375c:	cd b7       	in	r28, 0x3d	; 61
    375e:	de b7       	in	r29, 0x3e	; 62
    3760:	2c 97       	sbiw	r28, 0x0c	; 12
    3762:	0f b6       	in	r0, 0x3f	; 63
    3764:	f8 94       	cli
    3766:	de bf       	out	0x3e, r29	; 62
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	cd bf       	out	0x3d, r28	; 61
    376c:	6b 01       	movw	r12, r22
    376e:	7c 01       	movw	r14, r24
    DELAY_TIMER timer_data;
    CRITICAL_STORE;
    uint8_t status;

    /* Get the current TCB  */
    curr_tcb_ptr = atomCurrentContext();
    3770:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <atomCurrentContext>
    3774:	fc 01       	movw	r30, r24

    /* Parameter check */
    if (ticks == 0)
    3776:	c1 14       	cp	r12, r1
    3778:	d1 04       	cpc	r13, r1
    377a:	e1 04       	cpc	r14, r1
    377c:	f1 04       	cpc	r15, r1
    377e:	21 f1       	breq	.+72     	; 0x37c8 <atomTimerDelay+0x7a>
        /* Return error */
        status = ATOM_ERR_PARAM;
    }

    /* Check we are actually in thread context */
    else if (curr_tcb_ptr == NULL)
    3780:	00 97       	sbiw	r24, 0x00	; 0
    3782:	21 f1       	breq	.+72     	; 0x37cc <atomTimerDelay+0x7e>

    /* Otherwise safe to proceed */
    else
    {
        /* Protect the system queues */
        CRITICAL_START ();
    3784:	1f b7       	in	r17, 0x3f	; 63
    3786:	f8 94       	cli

        /* Set suspended status for the current thread */
        curr_tcb_ptr->suspended = TRUE;
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	85 87       	std	Z+13, r24	; 0x0d

        /* Register the timer callback */

        /* Fill out the data needed by the callback to wake us up */
        timer_data.tcb_ptr = curr_tcb_ptr;
    378c:	fa 83       	std	Y+2, r31	; 0x02
    378e:	e9 83       	std	Y+1, r30	; 0x01

        /* Fill out the timer callback request structure */
        timer_cb.cb_func = atomTimerDelayCallback;
    3790:	8e ed       	ldi	r24, 0xDE	; 222
    3792:	9a e1       	ldi	r25, 0x1A	; 26
    3794:	9c 83       	std	Y+4, r25	; 0x04
    3796:	8b 83       	std	Y+3, r24	; 0x03
        timer_cb.cb_data = (POINTER)&timer_data;
    3798:	ce 01       	movw	r24, r28
    379a:	01 96       	adiw	r24, 0x01	; 1
    379c:	9e 83       	std	Y+6, r25	; 0x06
    379e:	8d 83       	std	Y+5, r24	; 0x05
        timer_cb.cb_ticks = ticks;
    37a0:	cf 82       	std	Y+7, r12	; 0x07
    37a2:	d8 86       	std	Y+8, r13	; 0x08
    37a4:	e9 86       	std	Y+9, r14	; 0x09
    37a6:	fa 86       	std	Y+10, r15	; 0x0a

        /* Store the timeout callback details, though we don't use it */
        curr_tcb_ptr->suspend_timo_cb = &timer_cb;
    37a8:	ce 01       	movw	r24, r28
    37aa:	03 96       	adiw	r24, 0x03	; 3
    37ac:	90 8b       	std	Z+16, r25	; 0x10
    37ae:	87 87       	std	Z+15, r24	; 0x0f

        /* Register the callback */
        if (atomTimerRegister (&timer_cb) != ATOM_OK)
    37b0:	0e 94 ed 1a 	call	0x35da	; 0x35da <atomTimerRegister>
        {
            /* Exit critical region */
            CRITICAL_END ();
    37b4:	1f bf       	out	0x3f, r17	; 63

        /* Store the timeout callback details, though we don't use it */
        curr_tcb_ptr->suspend_timo_cb = &timer_cb;

        /* Register the callback */
        if (atomTimerRegister (&timer_cb) != ATOM_OK)
    37b6:	88 23       	and	r24, r24
    37b8:	11 f0       	breq	.+4      	; 0x37be <atomTimerDelay+0x70>
        {
            /* Exit critical region */
            CRITICAL_END ();

            /* Timer registration didn't work, won't get a callback */
            status = ATOM_ERR_TIMER;
    37ba:	8d ec       	ldi	r24, 0xCD	; 205
    37bc:	08 c0       	rjmp	.+16     	; 0x37ce <atomTimerDelay+0x80>

            /* Successful timer registration */
            status = ATOM_OK;

            /* Current thread should now block, schedule in another */
            atomSched (FALSE);
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <atomSched>
        {
            /* Exit critical region */
            CRITICAL_END ();

            /* Successful timer registration */
            status = ATOM_OK;
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	03 c0       	rjmp	.+6      	; 0x37ce <atomTimerDelay+0x80>

    /* Parameter check */
    if (ticks == 0)
    {
        /* Return error */
        status = ATOM_ERR_PARAM;
    37c8:	89 ec       	ldi	r24, 0xC9	; 201
    37ca:	01 c0       	rjmp	.+2      	; 0x37ce <atomTimerDelay+0x80>

    /* Check we are actually in thread context */
    else if (curr_tcb_ptr == NULL)
    {
        /* Not currently in thread context, can't suspend */
        status = ATOM_ERR_CONTEXT;
    37cc:	88 ec       	ldi	r24, 0xC8	; 200
            atomSched (FALSE);
        }
    }

    return (status);
}
    37ce:	2c 96       	adiw	r28, 0x0c	; 12
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	df 91       	pop	r29
    37dc:	cf 91       	pop	r28
    37de:	1f 91       	pop	r17
    37e0:	ff 90       	pop	r15
    37e2:	ef 90       	pop	r14
    37e4:	df 90       	pop	r13
    37e6:	cf 90       	pop	r12
    37e8:	08 95       	ret

000037ea <test_start>:
    /* If threads are created, check for thread stack overflow */

    /* Quit */
    return failures;

    37ea:	60 e0       	ldi	r22, 0x00	; 0
    37ec:	70 e0       	ldi	r23, 0x00	; 0
    37ee:	cb 01       	movw	r24, r22
    37f0:	08 95       	ret

000037f2 <uart_init>:
/*
 * Initialize the UART to requested baudrate, tx/rx, 8N1.
 */
int
uart_init(uint32_t baudrate)
{
    37f2:	9b 01       	movw	r18, r22
    37f4:	ac 01       	movw	r20, r24
  /* Set up the UART device with the selected baudrate */
#if AVR_CPU_HZ < 2000000UL && defined(U2X)
  REG_UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
  REG_UBRRL = (AVR_CPU_HZ / (8UL * baudrate)) - 1;
#else
  REG_UBRRL = (AVR_CPU_HZ / (16UL * baudrate)) - 1;
    37f6:	e4 e0       	ldi	r30, 0x04	; 4
    37f8:	22 0f       	add	r18, r18
    37fa:	33 1f       	adc	r19, r19
    37fc:	44 1f       	adc	r20, r20
    37fe:	55 1f       	adc	r21, r21
    3800:	ea 95       	dec	r30
    3802:	d1 f7       	brne	.-12     	; 0x37f8 <uart_init+0x6>
    3804:	60 e4       	ldi	r22, 0x40	; 64
    3806:	72 e4       	ldi	r23, 0x42	; 66
    3808:	8f e0       	ldi	r24, 0x0F	; 15
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <__udivmodsi4>
    3810:	21 50       	subi	r18, 0x01	; 1
    3812:	20 93 c4 00 	sts	0x00C4, r18
#endif
  REG_UCSRB = _BV(BIT_TXEN) | _BV(BIT_RXEN); /* tx/rx enable */
    3816:	88 e1       	ldi	r24, 0x18	; 24
    3818:	80 93 c1 00 	sts	0x00C1, r24

  /* Create a mutex for single-threaded putchar() access */
  if (atomMutexCreate (&uart_mutex) != ATOM_OK)
    381c:	82 e6       	ldi	r24, 0x62	; 98
    381e:	94 e0       	ldi	r25, 0x04	; 4
    3820:	0e 94 c7 14 	call	0x298e	; 0x298e <atomMutexCreate>
    3824:	88 23       	and	r24, r24
    3826:	19 f0       	breq	.+6      	; 0x382e <uart_init+0x3c>
  {
    status = -1;
    3828:	8f ef       	ldi	r24, 0xFF	; 255
    382a:	9f ef       	ldi	r25, 0xFF	; 255
    382c:	08 95       	ret
  }
  else
  {
    status = 0;
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	90 e0       	ldi	r25, 0x00	; 0
  }

  /* Finished */
  return (status);
}
    3832:	08 95       	ret

00003834 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    3834:	1f 93       	push	r17
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	18 2f       	mov	r17, r24
    383c:	eb 01       	movw	r28, r22

  /* Block on private access to the UART */
  if (atomMutexGet(&uart_mutex, 0) == ATOM_OK)
    383e:	82 e6       	ldi	r24, 0x62	; 98
    3840:	94 e0       	ldi	r25, 0x04	; 4
    3842:	40 e0       	ldi	r20, 0x00	; 0
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	ba 01       	movw	r22, r20
    3848:	0e 94 24 15 	call	0x2a48	; 0x2a48 <atomMutexGet>
    384c:	88 23       	and	r24, r24
    384e:	81 f4       	brne	.+32     	; 0x3870 <uart_putchar+0x3c>
  {
    /* Convert \n to \r\n */
    if (c == '\n')
    3850:	1a 30       	cpi	r17, 0x0A	; 10
    3852:	21 f4       	brne	.+8      	; 0x385c <uart_putchar+0x28>
      uart_putchar('\r', stream);
    3854:	8d e0       	ldi	r24, 0x0D	; 13
    3856:	be 01       	movw	r22, r28
    3858:	0e 94 1a 1c 	call	0x3834	; 0x3834 <uart_putchar>

    /* Wait until the UART is ready then send the character out */
    loop_until_bit_is_set(REG_UCSRA, BIT_UDRE);
    385c:	80 91 c0 00 	lds	r24, 0x00C0
    3860:	85 ff       	sbrs	r24, 5
    3862:	fc cf       	rjmp	.-8      	; 0x385c <uart_putchar+0x28>
    REG_UDR = c;
    3864:	10 93 c6 00 	sts	0x00C6, r17

    /* Return mutex access */
    atomMutexPut(&uart_mutex);
    3868:	82 e6       	ldi	r24, 0x62	; 98
    386a:	94 e0       	ldi	r25, 0x04	; 4
    386c:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <atomMutexPut>
  }

  return 0;
}
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	df 91       	pop	r29
    3876:	cf 91       	pop	r28
    3878:	1f 91       	pop	r17
    387a:	08 95       	ret

0000387c <__subsf3>:
    387c:	50 58       	subi	r21, 0x80	; 128

0000387e <__addsf3>:
    387e:	bb 27       	eor	r27, r27
    3880:	aa 27       	eor	r26, r26
    3882:	0e d0       	rcall	.+28     	; 0x38a0 <__addsf3x>
    3884:	75 c1       	rjmp	.+746    	; 0x3b70 <__fp_round>
    3886:	66 d1       	rcall	.+716    	; 0x3b54 <__fp_pscA>
    3888:	30 f0       	brcs	.+12     	; 0x3896 <__addsf3+0x18>
    388a:	6b d1       	rcall	.+726    	; 0x3b62 <__fp_pscB>
    388c:	20 f0       	brcs	.+8      	; 0x3896 <__addsf3+0x18>
    388e:	31 f4       	brne	.+12     	; 0x389c <__addsf3+0x1e>
    3890:	9f 3f       	cpi	r25, 0xFF	; 255
    3892:	11 f4       	brne	.+4      	; 0x3898 <__addsf3+0x1a>
    3894:	1e f4       	brtc	.+6      	; 0x389c <__addsf3+0x1e>
    3896:	5b c1       	rjmp	.+694    	; 0x3b4e <__fp_nan>
    3898:	0e f4       	brtc	.+2      	; 0x389c <__addsf3+0x1e>
    389a:	e0 95       	com	r30
    389c:	e7 fb       	bst	r30, 7
    389e:	51 c1       	rjmp	.+674    	; 0x3b42 <__fp_inf>

000038a0 <__addsf3x>:
    38a0:	e9 2f       	mov	r30, r25
    38a2:	77 d1       	rcall	.+750    	; 0x3b92 <__fp_split3>
    38a4:	80 f3       	brcs	.-32     	; 0x3886 <__addsf3+0x8>
    38a6:	ba 17       	cp	r27, r26
    38a8:	62 07       	cpc	r22, r18
    38aa:	73 07       	cpc	r23, r19
    38ac:	84 07       	cpc	r24, r20
    38ae:	95 07       	cpc	r25, r21
    38b0:	18 f0       	brcs	.+6      	; 0x38b8 <__addsf3x+0x18>
    38b2:	71 f4       	brne	.+28     	; 0x38d0 <__addsf3x+0x30>
    38b4:	9e f5       	brtc	.+102    	; 0x391c <__addsf3x+0x7c>
    38b6:	8f c1       	rjmp	.+798    	; 0x3bd6 <__fp_zero>
    38b8:	0e f4       	brtc	.+2      	; 0x38bc <__addsf3x+0x1c>
    38ba:	e0 95       	com	r30
    38bc:	0b 2e       	mov	r0, r27
    38be:	ba 2f       	mov	r27, r26
    38c0:	a0 2d       	mov	r26, r0
    38c2:	0b 01       	movw	r0, r22
    38c4:	b9 01       	movw	r22, r18
    38c6:	90 01       	movw	r18, r0
    38c8:	0c 01       	movw	r0, r24
    38ca:	ca 01       	movw	r24, r20
    38cc:	a0 01       	movw	r20, r0
    38ce:	11 24       	eor	r1, r1
    38d0:	ff 27       	eor	r31, r31
    38d2:	59 1b       	sub	r21, r25
    38d4:	99 f0       	breq	.+38     	; 0x38fc <__addsf3x+0x5c>
    38d6:	59 3f       	cpi	r21, 0xF9	; 249
    38d8:	50 f4       	brcc	.+20     	; 0x38ee <__addsf3x+0x4e>
    38da:	50 3e       	cpi	r21, 0xE0	; 224
    38dc:	68 f1       	brcs	.+90     	; 0x3938 <__addsf3x+0x98>
    38de:	1a 16       	cp	r1, r26
    38e0:	f0 40       	sbci	r31, 0x00	; 0
    38e2:	a2 2f       	mov	r26, r18
    38e4:	23 2f       	mov	r18, r19
    38e6:	34 2f       	mov	r19, r20
    38e8:	44 27       	eor	r20, r20
    38ea:	58 5f       	subi	r21, 0xF8	; 248
    38ec:	f3 cf       	rjmp	.-26     	; 0x38d4 <__addsf3x+0x34>
    38ee:	46 95       	lsr	r20
    38f0:	37 95       	ror	r19
    38f2:	27 95       	ror	r18
    38f4:	a7 95       	ror	r26
    38f6:	f0 40       	sbci	r31, 0x00	; 0
    38f8:	53 95       	inc	r21
    38fa:	c9 f7       	brne	.-14     	; 0x38ee <__addsf3x+0x4e>
    38fc:	7e f4       	brtc	.+30     	; 0x391c <__addsf3x+0x7c>
    38fe:	1f 16       	cp	r1, r31
    3900:	ba 0b       	sbc	r27, r26
    3902:	62 0b       	sbc	r22, r18
    3904:	73 0b       	sbc	r23, r19
    3906:	84 0b       	sbc	r24, r20
    3908:	ba f0       	brmi	.+46     	; 0x3938 <__addsf3x+0x98>
    390a:	91 50       	subi	r25, 0x01	; 1
    390c:	a1 f0       	breq	.+40     	; 0x3936 <__addsf3x+0x96>
    390e:	ff 0f       	add	r31, r31
    3910:	bb 1f       	adc	r27, r27
    3912:	66 1f       	adc	r22, r22
    3914:	77 1f       	adc	r23, r23
    3916:	88 1f       	adc	r24, r24
    3918:	c2 f7       	brpl	.-16     	; 0x390a <__addsf3x+0x6a>
    391a:	0e c0       	rjmp	.+28     	; 0x3938 <__addsf3x+0x98>
    391c:	ba 0f       	add	r27, r26
    391e:	62 1f       	adc	r22, r18
    3920:	73 1f       	adc	r23, r19
    3922:	84 1f       	adc	r24, r20
    3924:	48 f4       	brcc	.+18     	; 0x3938 <__addsf3x+0x98>
    3926:	87 95       	ror	r24
    3928:	77 95       	ror	r23
    392a:	67 95       	ror	r22
    392c:	b7 95       	ror	r27
    392e:	f7 95       	ror	r31
    3930:	9e 3f       	cpi	r25, 0xFE	; 254
    3932:	08 f0       	brcs	.+2      	; 0x3936 <__addsf3x+0x96>
    3934:	b3 cf       	rjmp	.-154    	; 0x389c <__addsf3+0x1e>
    3936:	93 95       	inc	r25
    3938:	88 0f       	add	r24, r24
    393a:	08 f0       	brcs	.+2      	; 0x393e <__addsf3x+0x9e>
    393c:	99 27       	eor	r25, r25
    393e:	ee 0f       	add	r30, r30
    3940:	97 95       	ror	r25
    3942:	87 95       	ror	r24
    3944:	08 95       	ret

00003946 <__cmpsf2>:
    3946:	d9 d0       	rcall	.+434    	; 0x3afa <__fp_cmp>
    3948:	08 f4       	brcc	.+2      	; 0x394c <__cmpsf2+0x6>
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	08 95       	ret

0000394e <__divsf3>:
    394e:	0c d0       	rcall	.+24     	; 0x3968 <__divsf3x>
    3950:	0f c1       	rjmp	.+542    	; 0x3b70 <__fp_round>
    3952:	07 d1       	rcall	.+526    	; 0x3b62 <__fp_pscB>
    3954:	40 f0       	brcs	.+16     	; 0x3966 <__divsf3+0x18>
    3956:	fe d0       	rcall	.+508    	; 0x3b54 <__fp_pscA>
    3958:	30 f0       	brcs	.+12     	; 0x3966 <__divsf3+0x18>
    395a:	21 f4       	brne	.+8      	; 0x3964 <__divsf3+0x16>
    395c:	5f 3f       	cpi	r21, 0xFF	; 255
    395e:	19 f0       	breq	.+6      	; 0x3966 <__divsf3+0x18>
    3960:	f0 c0       	rjmp	.+480    	; 0x3b42 <__fp_inf>
    3962:	51 11       	cpse	r21, r1
    3964:	39 c1       	rjmp	.+626    	; 0x3bd8 <__fp_szero>
    3966:	f3 c0       	rjmp	.+486    	; 0x3b4e <__fp_nan>

00003968 <__divsf3x>:
    3968:	14 d1       	rcall	.+552    	; 0x3b92 <__fp_split3>
    396a:	98 f3       	brcs	.-26     	; 0x3952 <__divsf3+0x4>

0000396c <__divsf3_pse>:
    396c:	99 23       	and	r25, r25
    396e:	c9 f3       	breq	.-14     	; 0x3962 <__divsf3+0x14>
    3970:	55 23       	and	r21, r21
    3972:	b1 f3       	breq	.-20     	; 0x3960 <__divsf3+0x12>
    3974:	95 1b       	sub	r25, r21
    3976:	55 0b       	sbc	r21, r21
    3978:	bb 27       	eor	r27, r27
    397a:	aa 27       	eor	r26, r26
    397c:	62 17       	cp	r22, r18
    397e:	73 07       	cpc	r23, r19
    3980:	84 07       	cpc	r24, r20
    3982:	38 f0       	brcs	.+14     	; 0x3992 <__divsf3_pse+0x26>
    3984:	9f 5f       	subi	r25, 0xFF	; 255
    3986:	5f 4f       	sbci	r21, 0xFF	; 255
    3988:	22 0f       	add	r18, r18
    398a:	33 1f       	adc	r19, r19
    398c:	44 1f       	adc	r20, r20
    398e:	aa 1f       	adc	r26, r26
    3990:	a9 f3       	breq	.-22     	; 0x397c <__divsf3_pse+0x10>
    3992:	33 d0       	rcall	.+102    	; 0x39fa <__divsf3_pse+0x8e>
    3994:	0e 2e       	mov	r0, r30
    3996:	3a f0       	brmi	.+14     	; 0x39a6 <__divsf3_pse+0x3a>
    3998:	e0 e8       	ldi	r30, 0x80	; 128
    399a:	30 d0       	rcall	.+96     	; 0x39fc <__divsf3_pse+0x90>
    399c:	91 50       	subi	r25, 0x01	; 1
    399e:	50 40       	sbci	r21, 0x00	; 0
    39a0:	e6 95       	lsr	r30
    39a2:	00 1c       	adc	r0, r0
    39a4:	ca f7       	brpl	.-14     	; 0x3998 <__divsf3_pse+0x2c>
    39a6:	29 d0       	rcall	.+82     	; 0x39fa <__divsf3_pse+0x8e>
    39a8:	fe 2f       	mov	r31, r30
    39aa:	27 d0       	rcall	.+78     	; 0x39fa <__divsf3_pse+0x8e>
    39ac:	66 0f       	add	r22, r22
    39ae:	77 1f       	adc	r23, r23
    39b0:	88 1f       	adc	r24, r24
    39b2:	bb 1f       	adc	r27, r27
    39b4:	26 17       	cp	r18, r22
    39b6:	37 07       	cpc	r19, r23
    39b8:	48 07       	cpc	r20, r24
    39ba:	ab 07       	cpc	r26, r27
    39bc:	b0 e8       	ldi	r27, 0x80	; 128
    39be:	09 f0       	breq	.+2      	; 0x39c2 <__divsf3_pse+0x56>
    39c0:	bb 0b       	sbc	r27, r27
    39c2:	80 2d       	mov	r24, r0
    39c4:	bf 01       	movw	r22, r30
    39c6:	ff 27       	eor	r31, r31
    39c8:	93 58       	subi	r25, 0x83	; 131
    39ca:	5f 4f       	sbci	r21, 0xFF	; 255
    39cc:	2a f0       	brmi	.+10     	; 0x39d8 <__divsf3_pse+0x6c>
    39ce:	9e 3f       	cpi	r25, 0xFE	; 254
    39d0:	51 05       	cpc	r21, r1
    39d2:	68 f0       	brcs	.+26     	; 0x39ee <__divsf3_pse+0x82>
    39d4:	b6 c0       	rjmp	.+364    	; 0x3b42 <__fp_inf>
    39d6:	00 c1       	rjmp	.+512    	; 0x3bd8 <__fp_szero>
    39d8:	5f 3f       	cpi	r21, 0xFF	; 255
    39da:	ec f3       	brlt	.-6      	; 0x39d6 <__divsf3_pse+0x6a>
    39dc:	98 3e       	cpi	r25, 0xE8	; 232
    39de:	dc f3       	brlt	.-10     	; 0x39d6 <__divsf3_pse+0x6a>
    39e0:	86 95       	lsr	r24
    39e2:	77 95       	ror	r23
    39e4:	67 95       	ror	r22
    39e6:	b7 95       	ror	r27
    39e8:	f7 95       	ror	r31
    39ea:	9f 5f       	subi	r25, 0xFF	; 255
    39ec:	c9 f7       	brne	.-14     	; 0x39e0 <__divsf3_pse+0x74>
    39ee:	88 0f       	add	r24, r24
    39f0:	91 1d       	adc	r25, r1
    39f2:	96 95       	lsr	r25
    39f4:	87 95       	ror	r24
    39f6:	97 f9       	bld	r25, 7
    39f8:	08 95       	ret
    39fa:	e1 e0       	ldi	r30, 0x01	; 1
    39fc:	66 0f       	add	r22, r22
    39fe:	77 1f       	adc	r23, r23
    3a00:	88 1f       	adc	r24, r24
    3a02:	bb 1f       	adc	r27, r27
    3a04:	62 17       	cp	r22, r18
    3a06:	73 07       	cpc	r23, r19
    3a08:	84 07       	cpc	r24, r20
    3a0a:	ba 07       	cpc	r27, r26
    3a0c:	20 f0       	brcs	.+8      	; 0x3a16 <__divsf3_pse+0xaa>
    3a0e:	62 1b       	sub	r22, r18
    3a10:	73 0b       	sbc	r23, r19
    3a12:	84 0b       	sbc	r24, r20
    3a14:	ba 0b       	sbc	r27, r26
    3a16:	ee 1f       	adc	r30, r30
    3a18:	88 f7       	brcc	.-30     	; 0x39fc <__divsf3_pse+0x90>
    3a1a:	e0 95       	com	r30
    3a1c:	08 95       	ret

00003a1e <__fixsfsi>:
    3a1e:	04 d0       	rcall	.+8      	; 0x3a28 <__fixunssfsi>
    3a20:	68 94       	set
    3a22:	b1 11       	cpse	r27, r1
    3a24:	d9 c0       	rjmp	.+434    	; 0x3bd8 <__fp_szero>
    3a26:	08 95       	ret

00003a28 <__fixunssfsi>:
    3a28:	bc d0       	rcall	.+376    	; 0x3ba2 <__fp_splitA>
    3a2a:	88 f0       	brcs	.+34     	; 0x3a4e <__fixunssfsi+0x26>
    3a2c:	9f 57       	subi	r25, 0x7F	; 127
    3a2e:	90 f0       	brcs	.+36     	; 0x3a54 <__fixunssfsi+0x2c>
    3a30:	b9 2f       	mov	r27, r25
    3a32:	99 27       	eor	r25, r25
    3a34:	b7 51       	subi	r27, 0x17	; 23
    3a36:	a0 f0       	brcs	.+40     	; 0x3a60 <__fixunssfsi+0x38>
    3a38:	d1 f0       	breq	.+52     	; 0x3a6e <__fixunssfsi+0x46>
    3a3a:	66 0f       	add	r22, r22
    3a3c:	77 1f       	adc	r23, r23
    3a3e:	88 1f       	adc	r24, r24
    3a40:	99 1f       	adc	r25, r25
    3a42:	1a f0       	brmi	.+6      	; 0x3a4a <__fixunssfsi+0x22>
    3a44:	ba 95       	dec	r27
    3a46:	c9 f7       	brne	.-14     	; 0x3a3a <__fixunssfsi+0x12>
    3a48:	12 c0       	rjmp	.+36     	; 0x3a6e <__fixunssfsi+0x46>
    3a4a:	b1 30       	cpi	r27, 0x01	; 1
    3a4c:	81 f0       	breq	.+32     	; 0x3a6e <__fixunssfsi+0x46>
    3a4e:	c3 d0       	rcall	.+390    	; 0x3bd6 <__fp_zero>
    3a50:	b1 e0       	ldi	r27, 0x01	; 1
    3a52:	08 95       	ret
    3a54:	c0 c0       	rjmp	.+384    	; 0x3bd6 <__fp_zero>
    3a56:	67 2f       	mov	r22, r23
    3a58:	78 2f       	mov	r23, r24
    3a5a:	88 27       	eor	r24, r24
    3a5c:	b8 5f       	subi	r27, 0xF8	; 248
    3a5e:	39 f0       	breq	.+14     	; 0x3a6e <__fixunssfsi+0x46>
    3a60:	b9 3f       	cpi	r27, 0xF9	; 249
    3a62:	cc f3       	brlt	.-14     	; 0x3a56 <__fixunssfsi+0x2e>
    3a64:	86 95       	lsr	r24
    3a66:	77 95       	ror	r23
    3a68:	67 95       	ror	r22
    3a6a:	b3 95       	inc	r27
    3a6c:	d9 f7       	brne	.-10     	; 0x3a64 <__fixunssfsi+0x3c>
    3a6e:	3e f4       	brtc	.+14     	; 0x3a7e <__fixunssfsi+0x56>
    3a70:	90 95       	com	r25
    3a72:	80 95       	com	r24
    3a74:	70 95       	com	r23
    3a76:	61 95       	neg	r22
    3a78:	7f 4f       	sbci	r23, 0xFF	; 255
    3a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a7e:	08 95       	ret

00003a80 <__floatunsisf>:
    3a80:	e8 94       	clt
    3a82:	09 c0       	rjmp	.+18     	; 0x3a96 <__floatsisf+0x12>

00003a84 <__floatsisf>:
    3a84:	97 fb       	bst	r25, 7
    3a86:	3e f4       	brtc	.+14     	; 0x3a96 <__floatsisf+0x12>
    3a88:	90 95       	com	r25
    3a8a:	80 95       	com	r24
    3a8c:	70 95       	com	r23
    3a8e:	61 95       	neg	r22
    3a90:	7f 4f       	sbci	r23, 0xFF	; 255
    3a92:	8f 4f       	sbci	r24, 0xFF	; 255
    3a94:	9f 4f       	sbci	r25, 0xFF	; 255
    3a96:	99 23       	and	r25, r25
    3a98:	a9 f0       	breq	.+42     	; 0x3ac4 <__floatsisf+0x40>
    3a9a:	f9 2f       	mov	r31, r25
    3a9c:	96 e9       	ldi	r25, 0x96	; 150
    3a9e:	bb 27       	eor	r27, r27
    3aa0:	93 95       	inc	r25
    3aa2:	f6 95       	lsr	r31
    3aa4:	87 95       	ror	r24
    3aa6:	77 95       	ror	r23
    3aa8:	67 95       	ror	r22
    3aaa:	b7 95       	ror	r27
    3aac:	f1 11       	cpse	r31, r1
    3aae:	f8 cf       	rjmp	.-16     	; 0x3aa0 <__floatsisf+0x1c>
    3ab0:	fa f4       	brpl	.+62     	; 0x3af0 <__floatsisf+0x6c>
    3ab2:	bb 0f       	add	r27, r27
    3ab4:	11 f4       	brne	.+4      	; 0x3aba <__floatsisf+0x36>
    3ab6:	60 ff       	sbrs	r22, 0
    3ab8:	1b c0       	rjmp	.+54     	; 0x3af0 <__floatsisf+0x6c>
    3aba:	6f 5f       	subi	r22, 0xFF	; 255
    3abc:	7f 4f       	sbci	r23, 0xFF	; 255
    3abe:	8f 4f       	sbci	r24, 0xFF	; 255
    3ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac2:	16 c0       	rjmp	.+44     	; 0x3af0 <__floatsisf+0x6c>
    3ac4:	88 23       	and	r24, r24
    3ac6:	11 f0       	breq	.+4      	; 0x3acc <__floatsisf+0x48>
    3ac8:	96 e9       	ldi	r25, 0x96	; 150
    3aca:	11 c0       	rjmp	.+34     	; 0x3aee <__floatsisf+0x6a>
    3acc:	77 23       	and	r23, r23
    3ace:	21 f0       	breq	.+8      	; 0x3ad8 <__floatsisf+0x54>
    3ad0:	9e e8       	ldi	r25, 0x8E	; 142
    3ad2:	87 2f       	mov	r24, r23
    3ad4:	76 2f       	mov	r23, r22
    3ad6:	05 c0       	rjmp	.+10     	; 0x3ae2 <__floatsisf+0x5e>
    3ad8:	66 23       	and	r22, r22
    3ada:	71 f0       	breq	.+28     	; 0x3af8 <__floatsisf+0x74>
    3adc:	96 e8       	ldi	r25, 0x86	; 134
    3ade:	86 2f       	mov	r24, r22
    3ae0:	70 e0       	ldi	r23, 0x00	; 0
    3ae2:	60 e0       	ldi	r22, 0x00	; 0
    3ae4:	2a f0       	brmi	.+10     	; 0x3af0 <__floatsisf+0x6c>
    3ae6:	9a 95       	dec	r25
    3ae8:	66 0f       	add	r22, r22
    3aea:	77 1f       	adc	r23, r23
    3aec:	88 1f       	adc	r24, r24
    3aee:	da f7       	brpl	.-10     	; 0x3ae6 <__floatsisf+0x62>
    3af0:	88 0f       	add	r24, r24
    3af2:	96 95       	lsr	r25
    3af4:	87 95       	ror	r24
    3af6:	97 f9       	bld	r25, 7
    3af8:	08 95       	ret

00003afa <__fp_cmp>:
    3afa:	99 0f       	add	r25, r25
    3afc:	00 08       	sbc	r0, r0
    3afe:	55 0f       	add	r21, r21
    3b00:	aa 0b       	sbc	r26, r26
    3b02:	e0 e8       	ldi	r30, 0x80	; 128
    3b04:	fe ef       	ldi	r31, 0xFE	; 254
    3b06:	16 16       	cp	r1, r22
    3b08:	17 06       	cpc	r1, r23
    3b0a:	e8 07       	cpc	r30, r24
    3b0c:	f9 07       	cpc	r31, r25
    3b0e:	c0 f0       	brcs	.+48     	; 0x3b40 <__fp_cmp+0x46>
    3b10:	12 16       	cp	r1, r18
    3b12:	13 06       	cpc	r1, r19
    3b14:	e4 07       	cpc	r30, r20
    3b16:	f5 07       	cpc	r31, r21
    3b18:	98 f0       	brcs	.+38     	; 0x3b40 <__fp_cmp+0x46>
    3b1a:	62 1b       	sub	r22, r18
    3b1c:	73 0b       	sbc	r23, r19
    3b1e:	84 0b       	sbc	r24, r20
    3b20:	95 0b       	sbc	r25, r21
    3b22:	39 f4       	brne	.+14     	; 0x3b32 <__fp_cmp+0x38>
    3b24:	0a 26       	eor	r0, r26
    3b26:	61 f0       	breq	.+24     	; 0x3b40 <__fp_cmp+0x46>
    3b28:	23 2b       	or	r18, r19
    3b2a:	24 2b       	or	r18, r20
    3b2c:	25 2b       	or	r18, r21
    3b2e:	21 f4       	brne	.+8      	; 0x3b38 <__fp_cmp+0x3e>
    3b30:	08 95       	ret
    3b32:	0a 26       	eor	r0, r26
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <__fp_cmp+0x3e>
    3b36:	a1 40       	sbci	r26, 0x01	; 1
    3b38:	a6 95       	lsr	r26
    3b3a:	8f ef       	ldi	r24, 0xFF	; 255
    3b3c:	81 1d       	adc	r24, r1
    3b3e:	81 1d       	adc	r24, r1
    3b40:	08 95       	ret

00003b42 <__fp_inf>:
    3b42:	97 f9       	bld	r25, 7
    3b44:	9f 67       	ori	r25, 0x7F	; 127
    3b46:	80 e8       	ldi	r24, 0x80	; 128
    3b48:	70 e0       	ldi	r23, 0x00	; 0
    3b4a:	60 e0       	ldi	r22, 0x00	; 0
    3b4c:	08 95       	ret

00003b4e <__fp_nan>:
    3b4e:	9f ef       	ldi	r25, 0xFF	; 255
    3b50:	80 ec       	ldi	r24, 0xC0	; 192
    3b52:	08 95       	ret

00003b54 <__fp_pscA>:
    3b54:	00 24       	eor	r0, r0
    3b56:	0a 94       	dec	r0
    3b58:	16 16       	cp	r1, r22
    3b5a:	17 06       	cpc	r1, r23
    3b5c:	18 06       	cpc	r1, r24
    3b5e:	09 06       	cpc	r0, r25
    3b60:	08 95       	ret

00003b62 <__fp_pscB>:
    3b62:	00 24       	eor	r0, r0
    3b64:	0a 94       	dec	r0
    3b66:	12 16       	cp	r1, r18
    3b68:	13 06       	cpc	r1, r19
    3b6a:	14 06       	cpc	r1, r20
    3b6c:	05 06       	cpc	r0, r21
    3b6e:	08 95       	ret

00003b70 <__fp_round>:
    3b70:	09 2e       	mov	r0, r25
    3b72:	03 94       	inc	r0
    3b74:	00 0c       	add	r0, r0
    3b76:	11 f4       	brne	.+4      	; 0x3b7c <__fp_round+0xc>
    3b78:	88 23       	and	r24, r24
    3b7a:	52 f0       	brmi	.+20     	; 0x3b90 <__fp_round+0x20>
    3b7c:	bb 0f       	add	r27, r27
    3b7e:	40 f4       	brcc	.+16     	; 0x3b90 <__fp_round+0x20>
    3b80:	bf 2b       	or	r27, r31
    3b82:	11 f4       	brne	.+4      	; 0x3b88 <__fp_round+0x18>
    3b84:	60 ff       	sbrs	r22, 0
    3b86:	04 c0       	rjmp	.+8      	; 0x3b90 <__fp_round+0x20>
    3b88:	6f 5f       	subi	r22, 0xFF	; 255
    3b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b90:	08 95       	ret

00003b92 <__fp_split3>:
    3b92:	57 fd       	sbrc	r21, 7
    3b94:	90 58       	subi	r25, 0x80	; 128
    3b96:	44 0f       	add	r20, r20
    3b98:	55 1f       	adc	r21, r21
    3b9a:	59 f0       	breq	.+22     	; 0x3bb2 <__fp_splitA+0x10>
    3b9c:	5f 3f       	cpi	r21, 0xFF	; 255
    3b9e:	71 f0       	breq	.+28     	; 0x3bbc <__fp_splitA+0x1a>
    3ba0:	47 95       	ror	r20

00003ba2 <__fp_splitA>:
    3ba2:	88 0f       	add	r24, r24
    3ba4:	97 fb       	bst	r25, 7
    3ba6:	99 1f       	adc	r25, r25
    3ba8:	61 f0       	breq	.+24     	; 0x3bc2 <__fp_splitA+0x20>
    3baa:	9f 3f       	cpi	r25, 0xFF	; 255
    3bac:	79 f0       	breq	.+30     	; 0x3bcc <__fp_splitA+0x2a>
    3bae:	87 95       	ror	r24
    3bb0:	08 95       	ret
    3bb2:	12 16       	cp	r1, r18
    3bb4:	13 06       	cpc	r1, r19
    3bb6:	14 06       	cpc	r1, r20
    3bb8:	55 1f       	adc	r21, r21
    3bba:	f2 cf       	rjmp	.-28     	; 0x3ba0 <__fp_split3+0xe>
    3bbc:	46 95       	lsr	r20
    3bbe:	f1 df       	rcall	.-30     	; 0x3ba2 <__fp_splitA>
    3bc0:	08 c0       	rjmp	.+16     	; 0x3bd2 <__fp_splitA+0x30>
    3bc2:	16 16       	cp	r1, r22
    3bc4:	17 06       	cpc	r1, r23
    3bc6:	18 06       	cpc	r1, r24
    3bc8:	99 1f       	adc	r25, r25
    3bca:	f1 cf       	rjmp	.-30     	; 0x3bae <__fp_splitA+0xc>
    3bcc:	86 95       	lsr	r24
    3bce:	71 05       	cpc	r23, r1
    3bd0:	61 05       	cpc	r22, r1
    3bd2:	08 94       	sec
    3bd4:	08 95       	ret

00003bd6 <__fp_zero>:
    3bd6:	e8 94       	clt

00003bd8 <__fp_szero>:
    3bd8:	bb 27       	eor	r27, r27
    3bda:	66 27       	eor	r22, r22
    3bdc:	77 27       	eor	r23, r23
    3bde:	cb 01       	movw	r24, r22
    3be0:	97 f9       	bld	r25, 7
    3be2:	08 95       	ret

00003be4 <__mulsf3>:
    3be4:	0b d0       	rcall	.+22     	; 0x3bfc <__mulsf3x>
    3be6:	c4 cf       	rjmp	.-120    	; 0x3b70 <__fp_round>
    3be8:	b5 df       	rcall	.-150    	; 0x3b54 <__fp_pscA>
    3bea:	28 f0       	brcs	.+10     	; 0x3bf6 <__mulsf3+0x12>
    3bec:	ba df       	rcall	.-140    	; 0x3b62 <__fp_pscB>
    3bee:	18 f0       	brcs	.+6      	; 0x3bf6 <__mulsf3+0x12>
    3bf0:	95 23       	and	r25, r21
    3bf2:	09 f0       	breq	.+2      	; 0x3bf6 <__mulsf3+0x12>
    3bf4:	a6 cf       	rjmp	.-180    	; 0x3b42 <__fp_inf>
    3bf6:	ab cf       	rjmp	.-170    	; 0x3b4e <__fp_nan>
    3bf8:	11 24       	eor	r1, r1
    3bfa:	ee cf       	rjmp	.-36     	; 0x3bd8 <__fp_szero>

00003bfc <__mulsf3x>:
    3bfc:	ca df       	rcall	.-108    	; 0x3b92 <__fp_split3>
    3bfe:	a0 f3       	brcs	.-24     	; 0x3be8 <__mulsf3+0x4>

00003c00 <__mulsf3_pse>:
    3c00:	95 9f       	mul	r25, r21
    3c02:	d1 f3       	breq	.-12     	; 0x3bf8 <__mulsf3+0x14>
    3c04:	95 0f       	add	r25, r21
    3c06:	50 e0       	ldi	r21, 0x00	; 0
    3c08:	55 1f       	adc	r21, r21
    3c0a:	62 9f       	mul	r22, r18
    3c0c:	f0 01       	movw	r30, r0
    3c0e:	72 9f       	mul	r23, r18
    3c10:	bb 27       	eor	r27, r27
    3c12:	f0 0d       	add	r31, r0
    3c14:	b1 1d       	adc	r27, r1
    3c16:	63 9f       	mul	r22, r19
    3c18:	aa 27       	eor	r26, r26
    3c1a:	f0 0d       	add	r31, r0
    3c1c:	b1 1d       	adc	r27, r1
    3c1e:	aa 1f       	adc	r26, r26
    3c20:	64 9f       	mul	r22, r20
    3c22:	66 27       	eor	r22, r22
    3c24:	b0 0d       	add	r27, r0
    3c26:	a1 1d       	adc	r26, r1
    3c28:	66 1f       	adc	r22, r22
    3c2a:	82 9f       	mul	r24, r18
    3c2c:	22 27       	eor	r18, r18
    3c2e:	b0 0d       	add	r27, r0
    3c30:	a1 1d       	adc	r26, r1
    3c32:	62 1f       	adc	r22, r18
    3c34:	73 9f       	mul	r23, r19
    3c36:	b0 0d       	add	r27, r0
    3c38:	a1 1d       	adc	r26, r1
    3c3a:	62 1f       	adc	r22, r18
    3c3c:	83 9f       	mul	r24, r19
    3c3e:	a0 0d       	add	r26, r0
    3c40:	61 1d       	adc	r22, r1
    3c42:	22 1f       	adc	r18, r18
    3c44:	74 9f       	mul	r23, r20
    3c46:	33 27       	eor	r19, r19
    3c48:	a0 0d       	add	r26, r0
    3c4a:	61 1d       	adc	r22, r1
    3c4c:	23 1f       	adc	r18, r19
    3c4e:	84 9f       	mul	r24, r20
    3c50:	60 0d       	add	r22, r0
    3c52:	21 1d       	adc	r18, r1
    3c54:	82 2f       	mov	r24, r18
    3c56:	76 2f       	mov	r23, r22
    3c58:	6a 2f       	mov	r22, r26
    3c5a:	11 24       	eor	r1, r1
    3c5c:	9f 57       	subi	r25, 0x7F	; 127
    3c5e:	50 40       	sbci	r21, 0x00	; 0
    3c60:	8a f0       	brmi	.+34     	; 0x3c84 <__mulsf3_pse+0x84>
    3c62:	e1 f0       	breq	.+56     	; 0x3c9c <__mulsf3_pse+0x9c>
    3c64:	88 23       	and	r24, r24
    3c66:	4a f0       	brmi	.+18     	; 0x3c7a <__mulsf3_pse+0x7a>
    3c68:	ee 0f       	add	r30, r30
    3c6a:	ff 1f       	adc	r31, r31
    3c6c:	bb 1f       	adc	r27, r27
    3c6e:	66 1f       	adc	r22, r22
    3c70:	77 1f       	adc	r23, r23
    3c72:	88 1f       	adc	r24, r24
    3c74:	91 50       	subi	r25, 0x01	; 1
    3c76:	50 40       	sbci	r21, 0x00	; 0
    3c78:	a9 f7       	brne	.-22     	; 0x3c64 <__mulsf3_pse+0x64>
    3c7a:	9e 3f       	cpi	r25, 0xFE	; 254
    3c7c:	51 05       	cpc	r21, r1
    3c7e:	70 f0       	brcs	.+28     	; 0x3c9c <__mulsf3_pse+0x9c>
    3c80:	60 cf       	rjmp	.-320    	; 0x3b42 <__fp_inf>
    3c82:	aa cf       	rjmp	.-172    	; 0x3bd8 <__fp_szero>
    3c84:	5f 3f       	cpi	r21, 0xFF	; 255
    3c86:	ec f3       	brlt	.-6      	; 0x3c82 <__mulsf3_pse+0x82>
    3c88:	98 3e       	cpi	r25, 0xE8	; 232
    3c8a:	dc f3       	brlt	.-10     	; 0x3c82 <__mulsf3_pse+0x82>
    3c8c:	86 95       	lsr	r24
    3c8e:	77 95       	ror	r23
    3c90:	67 95       	ror	r22
    3c92:	b7 95       	ror	r27
    3c94:	f7 95       	ror	r31
    3c96:	e7 95       	ror	r30
    3c98:	9f 5f       	subi	r25, 0xFF	; 255
    3c9a:	c1 f7       	brne	.-16     	; 0x3c8c <__mulsf3_pse+0x8c>
    3c9c:	fe 2b       	or	r31, r30
    3c9e:	88 0f       	add	r24, r24
    3ca0:	91 1d       	adc	r25, r1
    3ca2:	96 95       	lsr	r25
    3ca4:	87 95       	ror	r24
    3ca6:	97 f9       	bld	r25, 7
    3ca8:	08 95       	ret

00003caa <__mulsi3>:
    3caa:	62 9f       	mul	r22, r18
    3cac:	d0 01       	movw	r26, r0
    3cae:	73 9f       	mul	r23, r19
    3cb0:	f0 01       	movw	r30, r0
    3cb2:	82 9f       	mul	r24, r18
    3cb4:	e0 0d       	add	r30, r0
    3cb6:	f1 1d       	adc	r31, r1
    3cb8:	64 9f       	mul	r22, r20
    3cba:	e0 0d       	add	r30, r0
    3cbc:	f1 1d       	adc	r31, r1
    3cbe:	92 9f       	mul	r25, r18
    3cc0:	f0 0d       	add	r31, r0
    3cc2:	83 9f       	mul	r24, r19
    3cc4:	f0 0d       	add	r31, r0
    3cc6:	74 9f       	mul	r23, r20
    3cc8:	f0 0d       	add	r31, r0
    3cca:	65 9f       	mul	r22, r21
    3ccc:	f0 0d       	add	r31, r0
    3cce:	99 27       	eor	r25, r25
    3cd0:	72 9f       	mul	r23, r18
    3cd2:	b0 0d       	add	r27, r0
    3cd4:	e1 1d       	adc	r30, r1
    3cd6:	f9 1f       	adc	r31, r25
    3cd8:	63 9f       	mul	r22, r19
    3cda:	b0 0d       	add	r27, r0
    3cdc:	e1 1d       	adc	r30, r1
    3cde:	f9 1f       	adc	r31, r25
    3ce0:	bd 01       	movw	r22, r26
    3ce2:	cf 01       	movw	r24, r30
    3ce4:	11 24       	eor	r1, r1
    3ce6:	08 95       	ret

00003ce8 <__udivmodsi4>:
    3ce8:	a1 e2       	ldi	r26, 0x21	; 33
    3cea:	1a 2e       	mov	r1, r26
    3cec:	aa 1b       	sub	r26, r26
    3cee:	bb 1b       	sub	r27, r27
    3cf0:	fd 01       	movw	r30, r26
    3cf2:	0d c0       	rjmp	.+26     	; 0x3d0e <__udivmodsi4_ep>

00003cf4 <__udivmodsi4_loop>:
    3cf4:	aa 1f       	adc	r26, r26
    3cf6:	bb 1f       	adc	r27, r27
    3cf8:	ee 1f       	adc	r30, r30
    3cfa:	ff 1f       	adc	r31, r31
    3cfc:	a2 17       	cp	r26, r18
    3cfe:	b3 07       	cpc	r27, r19
    3d00:	e4 07       	cpc	r30, r20
    3d02:	f5 07       	cpc	r31, r21
    3d04:	20 f0       	brcs	.+8      	; 0x3d0e <__udivmodsi4_ep>
    3d06:	a2 1b       	sub	r26, r18
    3d08:	b3 0b       	sbc	r27, r19
    3d0a:	e4 0b       	sbc	r30, r20
    3d0c:	f5 0b       	sbc	r31, r21

00003d0e <__udivmodsi4_ep>:
    3d0e:	66 1f       	adc	r22, r22
    3d10:	77 1f       	adc	r23, r23
    3d12:	88 1f       	adc	r24, r24
    3d14:	99 1f       	adc	r25, r25
    3d16:	1a 94       	dec	r1
    3d18:	69 f7       	brne	.-38     	; 0x3cf4 <__udivmodsi4_loop>
    3d1a:	60 95       	com	r22
    3d1c:	70 95       	com	r23
    3d1e:	80 95       	com	r24
    3d20:	90 95       	com	r25
    3d22:	9b 01       	movw	r18, r22
    3d24:	ac 01       	movw	r20, r24
    3d26:	bd 01       	movw	r22, r26
    3d28:	cf 01       	movw	r24, r30
    3d2a:	08 95       	ret

00003d2c <__divmodsi4>:
    3d2c:	97 fb       	bst	r25, 7
    3d2e:	09 2e       	mov	r0, r25
    3d30:	05 26       	eor	r0, r21
    3d32:	0e d0       	rcall	.+28     	; 0x3d50 <__divmodsi4_neg1>
    3d34:	57 fd       	sbrc	r21, 7
    3d36:	04 d0       	rcall	.+8      	; 0x3d40 <__divmodsi4_neg2>
    3d38:	d7 df       	rcall	.-82     	; 0x3ce8 <__udivmodsi4>
    3d3a:	0a d0       	rcall	.+20     	; 0x3d50 <__divmodsi4_neg1>
    3d3c:	00 1c       	adc	r0, r0
    3d3e:	38 f4       	brcc	.+14     	; 0x3d4e <__divmodsi4_exit>

00003d40 <__divmodsi4_neg2>:
    3d40:	50 95       	com	r21
    3d42:	40 95       	com	r20
    3d44:	30 95       	com	r19
    3d46:	21 95       	neg	r18
    3d48:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4a:	4f 4f       	sbci	r20, 0xFF	; 255
    3d4c:	5f 4f       	sbci	r21, 0xFF	; 255

00003d4e <__divmodsi4_exit>:
    3d4e:	08 95       	ret

00003d50 <__divmodsi4_neg1>:
    3d50:	f6 f7       	brtc	.-4      	; 0x3d4e <__divmodsi4_exit>
    3d52:	90 95       	com	r25
    3d54:	80 95       	com	r24
    3d56:	70 95       	com	r23
    3d58:	61 95       	neg	r22
    3d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d60:	08 95       	ret

00003d62 <__tablejump2__>:
    3d62:	ee 0f       	add	r30, r30
    3d64:	ff 1f       	adc	r31, r31

00003d66 <__tablejump__>:
    3d66:	05 90       	lpm	r0, Z+
    3d68:	f4 91       	lpm	r31, Z
    3d6a:	e0 2d       	mov	r30, r0
    3d6c:	09 94       	ijmp

00003d6e <malloc>:
    3d6e:	cf 93       	push	r28
    3d70:	df 93       	push	r29
    3d72:	ac 01       	movw	r20, r24
    3d74:	82 30       	cpi	r24, 0x02	; 2
    3d76:	91 05       	cpc	r25, r1
    3d78:	10 f4       	brcc	.+4      	; 0x3d7e <malloc+0x10>
    3d7a:	42 e0       	ldi	r20, 0x02	; 2
    3d7c:	50 e0       	ldi	r21, 0x00	; 0
    3d7e:	e0 91 69 04 	lds	r30, 0x0469
    3d82:	f0 91 6a 04 	lds	r31, 0x046A
    3d86:	20 e0       	ldi	r18, 0x00	; 0
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	a0 e0       	ldi	r26, 0x00	; 0
    3d8c:	b0 e0       	ldi	r27, 0x00	; 0
    3d8e:	24 c0       	rjmp	.+72     	; 0x3dd8 <malloc+0x6a>
    3d90:	80 81       	ld	r24, Z
    3d92:	91 81       	ldd	r25, Z+1	; 0x01
    3d94:	84 17       	cp	r24, r20
    3d96:	95 07       	cpc	r25, r21
    3d98:	d0 f0       	brcs	.+52     	; 0x3dce <malloc+0x60>
    3d9a:	84 17       	cp	r24, r20
    3d9c:	95 07       	cpc	r25, r21
    3d9e:	71 f4       	brne	.+28     	; 0x3dbc <malloc+0x4e>
    3da0:	82 81       	ldd	r24, Z+2	; 0x02
    3da2:	93 81       	ldd	r25, Z+3	; 0x03
    3da4:	10 97       	sbiw	r26, 0x00	; 0
    3da6:	29 f0       	breq	.+10     	; 0x3db2 <malloc+0x44>
    3da8:	13 96       	adiw	r26, 0x03	; 3
    3daa:	9c 93       	st	X, r25
    3dac:	8e 93       	st	-X, r24
    3dae:	12 97       	sbiw	r26, 0x02	; 2
    3db0:	2c c0       	rjmp	.+88     	; 0x3e0a <malloc+0x9c>
    3db2:	90 93 6a 04 	sts	0x046A, r25
    3db6:	80 93 69 04 	sts	0x0469, r24
    3dba:	27 c0       	rjmp	.+78     	; 0x3e0a <malloc+0x9c>
    3dbc:	21 15       	cp	r18, r1
    3dbe:	31 05       	cpc	r19, r1
    3dc0:	19 f0       	breq	.+6      	; 0x3dc8 <malloc+0x5a>
    3dc2:	82 17       	cp	r24, r18
    3dc4:	93 07       	cpc	r25, r19
    3dc6:	18 f4       	brcc	.+6      	; 0x3dce <malloc+0x60>
    3dc8:	9c 01       	movw	r18, r24
    3dca:	bd 01       	movw	r22, r26
    3dcc:	ef 01       	movw	r28, r30
    3dce:	92 81       	ldd	r25, Z+2	; 0x02
    3dd0:	83 81       	ldd	r24, Z+3	; 0x03
    3dd2:	df 01       	movw	r26, r30
    3dd4:	e9 2f       	mov	r30, r25
    3dd6:	f8 2f       	mov	r31, r24
    3dd8:	30 97       	sbiw	r30, 0x00	; 0
    3dda:	d1 f6       	brne	.-76     	; 0x3d90 <malloc+0x22>
    3ddc:	21 15       	cp	r18, r1
    3dde:	31 05       	cpc	r19, r1
    3de0:	f9 f0       	breq	.+62     	; 0x3e20 <malloc+0xb2>
    3de2:	c9 01       	movw	r24, r18
    3de4:	84 1b       	sub	r24, r20
    3de6:	95 0b       	sbc	r25, r21
    3de8:	84 30       	cpi	r24, 0x04	; 4
    3dea:	91 05       	cpc	r25, r1
    3dec:	80 f4       	brcc	.+32     	; 0x3e0e <malloc+0xa0>
    3dee:	8a 81       	ldd	r24, Y+2	; 0x02
    3df0:	9b 81       	ldd	r25, Y+3	; 0x03
    3df2:	61 15       	cp	r22, r1
    3df4:	71 05       	cpc	r23, r1
    3df6:	21 f0       	breq	.+8      	; 0x3e00 <malloc+0x92>
    3df8:	fb 01       	movw	r30, r22
    3dfa:	93 83       	std	Z+3, r25	; 0x03
    3dfc:	82 83       	std	Z+2, r24	; 0x02
    3dfe:	04 c0       	rjmp	.+8      	; 0x3e08 <malloc+0x9a>
    3e00:	90 93 6a 04 	sts	0x046A, r25
    3e04:	80 93 69 04 	sts	0x0469, r24
    3e08:	fe 01       	movw	r30, r28
    3e0a:	32 96       	adiw	r30, 0x02	; 2
    3e0c:	42 c0       	rjmp	.+132    	; 0x3e92 <malloc+0x124>
    3e0e:	fe 01       	movw	r30, r28
    3e10:	e8 0f       	add	r30, r24
    3e12:	f9 1f       	adc	r31, r25
    3e14:	41 93       	st	Z+, r20
    3e16:	51 93       	st	Z+, r21
    3e18:	02 97       	sbiw	r24, 0x02	; 2
    3e1a:	99 83       	std	Y+1, r25	; 0x01
    3e1c:	88 83       	st	Y, r24
    3e1e:	39 c0       	rjmp	.+114    	; 0x3e92 <malloc+0x124>
    3e20:	80 91 67 04 	lds	r24, 0x0467
    3e24:	90 91 68 04 	lds	r25, 0x0468
    3e28:	00 97       	sbiw	r24, 0x00	; 0
    3e2a:	41 f4       	brne	.+16     	; 0x3e3c <malloc+0xce>
    3e2c:	80 91 47 01 	lds	r24, 0x0147
    3e30:	90 91 48 01 	lds	r25, 0x0148
    3e34:	90 93 68 04 	sts	0x0468, r25
    3e38:	80 93 67 04 	sts	0x0467, r24
    3e3c:	20 91 45 01 	lds	r18, 0x0145
    3e40:	30 91 46 01 	lds	r19, 0x0146
    3e44:	21 15       	cp	r18, r1
    3e46:	31 05       	cpc	r19, r1
    3e48:	41 f4       	brne	.+16     	; 0x3e5a <malloc+0xec>
    3e4a:	2d b7       	in	r18, 0x3d	; 61
    3e4c:	3e b7       	in	r19, 0x3e	; 62
    3e4e:	80 91 49 01 	lds	r24, 0x0149
    3e52:	90 91 4a 01 	lds	r25, 0x014A
    3e56:	28 1b       	sub	r18, r24
    3e58:	39 0b       	sbc	r19, r25
    3e5a:	e0 91 67 04 	lds	r30, 0x0467
    3e5e:	f0 91 68 04 	lds	r31, 0x0468
    3e62:	e2 17       	cp	r30, r18
    3e64:	f3 07       	cpc	r31, r19
    3e66:	98 f4       	brcc	.+38     	; 0x3e8e <malloc+0x120>
    3e68:	2e 1b       	sub	r18, r30
    3e6a:	3f 0b       	sbc	r19, r31
    3e6c:	24 17       	cp	r18, r20
    3e6e:	35 07       	cpc	r19, r21
    3e70:	70 f0       	brcs	.+28     	; 0x3e8e <malloc+0x120>
    3e72:	ca 01       	movw	r24, r20
    3e74:	02 96       	adiw	r24, 0x02	; 2
    3e76:	28 17       	cp	r18, r24
    3e78:	39 07       	cpc	r19, r25
    3e7a:	48 f0       	brcs	.+18     	; 0x3e8e <malloc+0x120>
    3e7c:	8e 0f       	add	r24, r30
    3e7e:	9f 1f       	adc	r25, r31
    3e80:	90 93 68 04 	sts	0x0468, r25
    3e84:	80 93 67 04 	sts	0x0467, r24
    3e88:	41 93       	st	Z+, r20
    3e8a:	51 93       	st	Z+, r21
    3e8c:	02 c0       	rjmp	.+4      	; 0x3e92 <malloc+0x124>
    3e8e:	e0 e0       	ldi	r30, 0x00	; 0
    3e90:	f0 e0       	ldi	r31, 0x00	; 0
    3e92:	cf 01       	movw	r24, r30
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	08 95       	ret

00003e9a <free>:
    3e9a:	0f 93       	push	r16
    3e9c:	1f 93       	push	r17
    3e9e:	cf 93       	push	r28
    3ea0:	df 93       	push	r29
    3ea2:	9c 01       	movw	r18, r24
    3ea4:	00 97       	sbiw	r24, 0x00	; 0
    3ea6:	09 f4       	brne	.+2      	; 0x3eaa <free+0x10>
    3ea8:	8c c0       	rjmp	.+280    	; 0x3fc2 <free+0x128>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	12 97       	sbiw	r26, 0x02	; 2
    3eae:	13 96       	adiw	r26, 0x03	; 3
    3eb0:	1c 92       	st	X, r1
    3eb2:	1e 92       	st	-X, r1
    3eb4:	12 97       	sbiw	r26, 0x02	; 2
    3eb6:	60 91 69 04 	lds	r22, 0x0469
    3eba:	70 91 6a 04 	lds	r23, 0x046A
    3ebe:	61 15       	cp	r22, r1
    3ec0:	71 05       	cpc	r23, r1
    3ec2:	89 f4       	brne	.+34     	; 0x3ee6 <free+0x4c>
    3ec4:	8d 91       	ld	r24, X+
    3ec6:	9c 91       	ld	r25, X
    3ec8:	11 97       	sbiw	r26, 0x01	; 1
    3eca:	82 0f       	add	r24, r18
    3ecc:	93 1f       	adc	r25, r19
    3ece:	20 91 67 04 	lds	r18, 0x0467
    3ed2:	30 91 68 04 	lds	r19, 0x0468
    3ed6:	28 17       	cp	r18, r24
    3ed8:	39 07       	cpc	r19, r25
    3eda:	69 f5       	brne	.+90     	; 0x3f36 <free+0x9c>
    3edc:	b0 93 68 04 	sts	0x0468, r27
    3ee0:	a0 93 67 04 	sts	0x0467, r26
    3ee4:	6e c0       	rjmp	.+220    	; 0x3fc2 <free+0x128>
    3ee6:	fb 01       	movw	r30, r22
    3ee8:	40 e0       	ldi	r20, 0x00	; 0
    3eea:	50 e0       	ldi	r21, 0x00	; 0
    3eec:	01 c0       	rjmp	.+2      	; 0x3ef0 <free+0x56>
    3eee:	fc 01       	movw	r30, r24
    3ef0:	ea 17       	cp	r30, r26
    3ef2:	fb 07       	cpc	r31, r27
    3ef4:	30 f4       	brcc	.+12     	; 0x3f02 <free+0x68>
    3ef6:	82 81       	ldd	r24, Z+2	; 0x02
    3ef8:	93 81       	ldd	r25, Z+3	; 0x03
    3efa:	af 01       	movw	r20, r30
    3efc:	00 97       	sbiw	r24, 0x00	; 0
    3efe:	b9 f7       	brne	.-18     	; 0x3eee <free+0x54>
    3f00:	1f c0       	rjmp	.+62     	; 0x3f40 <free+0xa6>
    3f02:	e9 01       	movw	r28, r18
    3f04:	22 97       	sbiw	r28, 0x02	; 2
    3f06:	fb 83       	std	Y+3, r31	; 0x03
    3f08:	ea 83       	std	Y+2, r30	; 0x02
    3f0a:	08 81       	ld	r16, Y
    3f0c:	19 81       	ldd	r17, Y+1	; 0x01
    3f0e:	c9 01       	movw	r24, r18
    3f10:	80 0f       	add	r24, r16
    3f12:	91 1f       	adc	r25, r17
    3f14:	8e 17       	cp	r24, r30
    3f16:	9f 07       	cpc	r25, r31
    3f18:	59 f4       	brne	.+22     	; 0x3f30 <free+0x96>
    3f1a:	80 81       	ld	r24, Z
    3f1c:	91 81       	ldd	r25, Z+1	; 0x01
    3f1e:	80 0f       	add	r24, r16
    3f20:	91 1f       	adc	r25, r17
    3f22:	02 96       	adiw	r24, 0x02	; 2
    3f24:	99 83       	std	Y+1, r25	; 0x01
    3f26:	88 83       	st	Y, r24
    3f28:	82 81       	ldd	r24, Z+2	; 0x02
    3f2a:	93 81       	ldd	r25, Z+3	; 0x03
    3f2c:	9b 83       	std	Y+3, r25	; 0x03
    3f2e:	8a 83       	std	Y+2, r24	; 0x02
    3f30:	41 15       	cp	r20, r1
    3f32:	51 05       	cpc	r21, r1
    3f34:	29 f4       	brne	.+10     	; 0x3f40 <free+0xa6>
    3f36:	b0 93 6a 04 	sts	0x046A, r27
    3f3a:	a0 93 69 04 	sts	0x0469, r26
    3f3e:	41 c0       	rjmp	.+130    	; 0x3fc2 <free+0x128>
    3f40:	fa 01       	movw	r30, r20
    3f42:	b3 83       	std	Z+3, r27	; 0x03
    3f44:	a2 83       	std	Z+2, r26	; 0x02
    3f46:	c1 91       	ld	r28, Z+
    3f48:	d1 91       	ld	r29, Z+
    3f4a:	ec 0f       	add	r30, r28
    3f4c:	fd 1f       	adc	r31, r29
    3f4e:	ae 17       	cp	r26, r30
    3f50:	bf 07       	cpc	r27, r31
    3f52:	81 f4       	brne	.+32     	; 0x3f74 <free+0xda>
    3f54:	f9 01       	movw	r30, r18
    3f56:	92 91       	ld	r25, -Z
    3f58:	82 91       	ld	r24, -Z
    3f5a:	8c 0f       	add	r24, r28
    3f5c:	9d 1f       	adc	r25, r29
    3f5e:	02 96       	adiw	r24, 0x02	; 2
    3f60:	da 01       	movw	r26, r20
    3f62:	11 96       	adiw	r26, 0x01	; 1
    3f64:	9c 93       	st	X, r25
    3f66:	8e 93       	st	-X, r24
    3f68:	82 81       	ldd	r24, Z+2	; 0x02
    3f6a:	93 81       	ldd	r25, Z+3	; 0x03
    3f6c:	13 96       	adiw	r26, 0x03	; 3
    3f6e:	9c 93       	st	X, r25
    3f70:	8e 93       	st	-X, r24
    3f72:	12 97       	sbiw	r26, 0x02	; 2
    3f74:	e0 e0       	ldi	r30, 0x00	; 0
    3f76:	f0 e0       	ldi	r31, 0x00	; 0
    3f78:	02 c0       	rjmp	.+4      	; 0x3f7e <free+0xe4>
    3f7a:	fb 01       	movw	r30, r22
    3f7c:	bc 01       	movw	r22, r24
    3f7e:	db 01       	movw	r26, r22
    3f80:	12 96       	adiw	r26, 0x02	; 2
    3f82:	8d 91       	ld	r24, X+
    3f84:	9c 91       	ld	r25, X
    3f86:	13 97       	sbiw	r26, 0x03	; 3
    3f88:	00 97       	sbiw	r24, 0x00	; 0
    3f8a:	b9 f7       	brne	.-18     	; 0x3f7a <free+0xe0>
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	02 96       	adiw	r24, 0x02	; 2
    3f90:	2d 91       	ld	r18, X+
    3f92:	3c 91       	ld	r19, X
    3f94:	11 97       	sbiw	r26, 0x01	; 1
    3f96:	82 0f       	add	r24, r18
    3f98:	93 1f       	adc	r25, r19
    3f9a:	20 91 67 04 	lds	r18, 0x0467
    3f9e:	30 91 68 04 	lds	r19, 0x0468
    3fa2:	28 17       	cp	r18, r24
    3fa4:	39 07       	cpc	r19, r25
    3fa6:	69 f4       	brne	.+26     	; 0x3fc2 <free+0x128>
    3fa8:	30 97       	sbiw	r30, 0x00	; 0
    3faa:	29 f4       	brne	.+10     	; 0x3fb6 <free+0x11c>
    3fac:	10 92 6a 04 	sts	0x046A, r1
    3fb0:	10 92 69 04 	sts	0x0469, r1
    3fb4:	02 c0       	rjmp	.+4      	; 0x3fba <free+0x120>
    3fb6:	13 82       	std	Z+3, r1	; 0x03
    3fb8:	12 82       	std	Z+2, r1	; 0x02
    3fba:	70 93 68 04 	sts	0x0468, r23
    3fbe:	60 93 67 04 	sts	0x0467, r22
    3fc2:	df 91       	pop	r29
    3fc4:	cf 91       	pop	r28
    3fc6:	1f 91       	pop	r17
    3fc8:	0f 91       	pop	r16
    3fca:	08 95       	ret

00003fcc <do_random>:
    3fcc:	a0 e0       	ldi	r26, 0x00	; 0
    3fce:	b0 e0       	ldi	r27, 0x00	; 0
    3fd0:	ec ee       	ldi	r30, 0xEC	; 236
    3fd2:	ff e1       	ldi	r31, 0x1F	; 31
    3fd4:	0c 94 7b 22 	jmp	0x44f6	; 0x44f6 <__prologue_saves__+0xc>
    3fd8:	ec 01       	movw	r28, r24
    3fda:	88 81       	ld	r24, Y
    3fdc:	99 81       	ldd	r25, Y+1	; 0x01
    3fde:	aa 81       	ldd	r26, Y+2	; 0x02
    3fe0:	bb 81       	ldd	r27, Y+3	; 0x03
    3fe2:	00 97       	sbiw	r24, 0x00	; 0
    3fe4:	a1 05       	cpc	r26, r1
    3fe6:	b1 05       	cpc	r27, r1
    3fe8:	21 f4       	brne	.+8      	; 0x3ff2 <do_random+0x26>
    3fea:	84 e2       	ldi	r24, 0x24	; 36
    3fec:	99 ed       	ldi	r25, 0xD9	; 217
    3fee:	ab e5       	ldi	r26, 0x5B	; 91
    3ff0:	b7 e0       	ldi	r27, 0x07	; 7
    3ff2:	bc 01       	movw	r22, r24
    3ff4:	cd 01       	movw	r24, r26
    3ff6:	2d e1       	ldi	r18, 0x1D	; 29
    3ff8:	33 ef       	ldi	r19, 0xF3	; 243
    3ffa:	41 e0       	ldi	r20, 0x01	; 1
    3ffc:	50 e0       	ldi	r21, 0x00	; 0
    3ffe:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodsi4>
    4002:	49 01       	movw	r8, r18
    4004:	5a 01       	movw	r10, r20
    4006:	27 ea       	ldi	r18, 0xA7	; 167
    4008:	31 e4       	ldi	r19, 0x41	; 65
    400a:	40 e0       	ldi	r20, 0x00	; 0
    400c:	50 e0       	ldi	r21, 0x00	; 0
    400e:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__mulsi3>
    4012:	6b 01       	movw	r12, r22
    4014:	7c 01       	movw	r14, r24
    4016:	c5 01       	movw	r24, r10
    4018:	b4 01       	movw	r22, r8
    401a:	2c ee       	ldi	r18, 0xEC	; 236
    401c:	34 ef       	ldi	r19, 0xF4	; 244
    401e:	4f ef       	ldi	r20, 0xFF	; 255
    4020:	5f ef       	ldi	r21, 0xFF	; 255
    4022:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__mulsi3>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	c8 0e       	add	r12, r24
    402c:	d9 1e       	adc	r13, r25
    402e:	ea 1e       	adc	r14, r26
    4030:	fb 1e       	adc	r15, r27
    4032:	f7 fe       	sbrs	r15, 7
    4034:	08 c0       	rjmp	.+16     	; 0x4046 <do_random+0x7a>
    4036:	8f ef       	ldi	r24, 0xFF	; 255
    4038:	9f ef       	ldi	r25, 0xFF	; 255
    403a:	af ef       	ldi	r26, 0xFF	; 255
    403c:	bf e7       	ldi	r27, 0x7F	; 127
    403e:	c8 0e       	add	r12, r24
    4040:	d9 1e       	adc	r13, r25
    4042:	ea 1e       	adc	r14, r26
    4044:	fb 1e       	adc	r15, r27
    4046:	c8 82       	st	Y, r12
    4048:	d9 82       	std	Y+1, r13	; 0x01
    404a:	ea 82       	std	Y+2, r14	; 0x02
    404c:	fb 82       	std	Y+3, r15	; 0x03
    404e:	97 01       	movw	r18, r14
    4050:	86 01       	movw	r16, r12
    4052:	3f 77       	andi	r19, 0x7F	; 127
    4054:	b8 01       	movw	r22, r16
    4056:	c9 01       	movw	r24, r18
    4058:	cd b7       	in	r28, 0x3d	; 61
    405a:	de b7       	in	r29, 0x3e	; 62
    405c:	ec e0       	ldi	r30, 0x0C	; 12
    405e:	0c 94 97 22 	jmp	0x452e	; 0x452e <__epilogue_restores__+0xc>

00004062 <random_r>:
    4062:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <do_random>
    4066:	08 95       	ret

00004068 <random>:
    4068:	8b e4       	ldi	r24, 0x4B	; 75
    406a:	91 e0       	ldi	r25, 0x01	; 1
    406c:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <do_random>
    4070:	08 95       	ret

00004072 <srandom>:
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	80 93 4b 01 	sts	0x014B, r24
    407a:	90 93 4c 01 	sts	0x014C, r25
    407e:	a0 93 4d 01 	sts	0x014D, r26
    4082:	b0 93 4e 01 	sts	0x014E, r27
    4086:	08 95       	ret

00004088 <realloc>:
    4088:	a2 e0       	ldi	r26, 0x02	; 2
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	ea e4       	ldi	r30, 0x4A	; 74
    408e:	f0 e2       	ldi	r31, 0x20	; 32
    4090:	0c 94 7b 22 	jmp	0x44f6	; 0x44f6 <__prologue_saves__+0xc>
    4094:	8c 01       	movw	r16, r24
    4096:	00 97       	sbiw	r24, 0x00	; 0
    4098:	29 f4       	brne	.+10     	; 0x40a4 <realloc+0x1c>
    409a:	cb 01       	movw	r24, r22
    409c:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <malloc>
    40a0:	8c 01       	movw	r16, r24
    40a2:	b8 c0       	rjmp	.+368    	; 0x4214 <realloc+0x18c>
    40a4:	dc 01       	movw	r26, r24
    40a6:	a6 0f       	add	r26, r22
    40a8:	b7 1f       	adc	r27, r23
    40aa:	fc 01       	movw	r30, r24
    40ac:	32 97       	sbiw	r30, 0x02	; 2
    40ae:	ae 17       	cp	r26, r30
    40b0:	bf 07       	cpc	r27, r31
    40b2:	08 f4       	brcc	.+2      	; 0x40b6 <realloc+0x2e>
    40b4:	ad c0       	rjmp	.+346    	; 0x4210 <realloc+0x188>
    40b6:	20 81       	ld	r18, Z
    40b8:	31 81       	ldd	r19, Z+1	; 0x01
    40ba:	26 17       	cp	r18, r22
    40bc:	37 07       	cpc	r19, r23
    40be:	b0 f0       	brcs	.+44     	; 0x40ec <realloc+0x64>
    40c0:	25 30       	cpi	r18, 0x05	; 5
    40c2:	31 05       	cpc	r19, r1
    40c4:	08 f4       	brcc	.+2      	; 0x40c8 <realloc+0x40>
    40c6:	a6 c0       	rjmp	.+332    	; 0x4214 <realloc+0x18c>
    40c8:	c9 01       	movw	r24, r18
    40ca:	04 97       	sbiw	r24, 0x04	; 4
    40cc:	86 17       	cp	r24, r22
    40ce:	97 07       	cpc	r25, r23
    40d0:	08 f4       	brcc	.+2      	; 0x40d4 <realloc+0x4c>
    40d2:	a0 c0       	rjmp	.+320    	; 0x4214 <realloc+0x18c>
    40d4:	22 50       	subi	r18, 0x02	; 2
    40d6:	30 40       	sbci	r19, 0x00	; 0
    40d8:	26 1b       	sub	r18, r22
    40da:	37 0b       	sbc	r19, r23
    40dc:	2d 93       	st	X+, r18
    40de:	3d 93       	st	X+, r19
    40e0:	cd 01       	movw	r24, r26
    40e2:	71 83       	std	Z+1, r23	; 0x01
    40e4:	60 83       	st	Z, r22
    40e6:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <free>
    40ea:	94 c0       	rjmp	.+296    	; 0x4214 <realloc+0x18c>
    40ec:	6b 01       	movw	r12, r22
    40ee:	c2 1a       	sub	r12, r18
    40f0:	d3 0a       	sbc	r13, r19
    40f2:	5c 01       	movw	r10, r24
    40f4:	a2 0e       	add	r10, r18
    40f6:	b3 1e       	adc	r11, r19
    40f8:	e0 91 69 04 	lds	r30, 0x0469
    40fc:	f0 91 6a 04 	lds	r31, 0x046A
    4100:	40 e0       	ldi	r20, 0x00	; 0
    4102:	50 e0       	ldi	r21, 0x00	; 0
    4104:	88 24       	eor	r8, r8
    4106:	99 24       	eor	r9, r9
    4108:	49 c0       	rjmp	.+146    	; 0x419c <realloc+0x114>
    410a:	ea 15       	cp	r30, r10
    410c:	fb 05       	cpc	r31, r11
    410e:	e1 f5       	brne	.+120    	; 0x4188 <realloc+0x100>
    4110:	e0 80       	ld	r14, Z
    4112:	f1 80       	ldd	r15, Z+1	; 0x01
    4114:	c7 01       	movw	r24, r14
    4116:	02 96       	adiw	r24, 0x02	; 2
    4118:	8c 15       	cp	r24, r12
    411a:	9d 05       	cpc	r25, r13
    411c:	a8 f1       	brcs	.+106    	; 0x4188 <realloc+0x100>
    411e:	a7 01       	movw	r20, r14
    4120:	4c 19       	sub	r20, r12
    4122:	5d 09       	sbc	r21, r13
    4124:	ca 01       	movw	r24, r20
    4126:	02 96       	adiw	r24, 0x02	; 2
    4128:	0f 2e       	mov	r0, r31
    412a:	fe ef       	ldi	r31, 0xFE	; 254
    412c:	cf 2e       	mov	r12, r31
    412e:	ff ef       	ldi	r31, 0xFF	; 255
    4130:	df 2e       	mov	r13, r31
    4132:	f0 2d       	mov	r31, r0
    4134:	c0 0e       	add	r12, r16
    4136:	d1 1e       	adc	r13, r17
    4138:	85 30       	cpi	r24, 0x05	; 5
    413a:	91 05       	cpc	r25, r1
    413c:	78 f0       	brcs	.+30     	; 0x415c <realloc+0xd4>
    413e:	82 81       	ldd	r24, Z+2	; 0x02
    4140:	93 81       	ldd	r25, Z+3	; 0x03
    4142:	13 96       	adiw	r26, 0x03	; 3
    4144:	9c 93       	st	X, r25
    4146:	8e 93       	st	-X, r24
    4148:	12 97       	sbiw	r26, 0x02	; 2
    414a:	11 96       	adiw	r26, 0x01	; 1
    414c:	5c 93       	st	X, r21
    414e:	4e 93       	st	-X, r20
    4150:	f6 01       	movw	r30, r12
    4152:	71 83       	std	Z+1, r23	; 0x01
    4154:	60 83       	st	Z, r22
    4156:	9a 2f       	mov	r25, r26
    4158:	8b 2f       	mov	r24, r27
    415a:	0a c0       	rjmp	.+20     	; 0x4170 <realloc+0xe8>
    415c:	c9 01       	movw	r24, r18
    415e:	02 96       	adiw	r24, 0x02	; 2
    4160:	8e 0d       	add	r24, r14
    4162:	9f 1d       	adc	r25, r15
    4164:	d6 01       	movw	r26, r12
    4166:	11 96       	adiw	r26, 0x01	; 1
    4168:	9c 93       	st	X, r25
    416a:	8e 93       	st	-X, r24
    416c:	92 81       	ldd	r25, Z+2	; 0x02
    416e:	83 81       	ldd	r24, Z+3	; 0x03
    4170:	81 14       	cp	r8, r1
    4172:	91 04       	cpc	r9, r1
    4174:	21 f0       	breq	.+8      	; 0x417e <realloc+0xf6>
    4176:	f4 01       	movw	r30, r8
    4178:	92 83       	std	Z+2, r25	; 0x02
    417a:	83 83       	std	Z+3, r24	; 0x03
    417c:	4b c0       	rjmp	.+150    	; 0x4214 <realloc+0x18c>
    417e:	90 93 69 04 	sts	0x0469, r25
    4182:	80 93 6a 04 	sts	0x046A, r24
    4186:	46 c0       	rjmp	.+140    	; 0x4214 <realloc+0x18c>
    4188:	80 81       	ld	r24, Z
    418a:	91 81       	ldd	r25, Z+1	; 0x01
    418c:	48 17       	cp	r20, r24
    418e:	59 07       	cpc	r21, r25
    4190:	08 f4       	brcc	.+2      	; 0x4194 <realloc+0x10c>
    4192:	ac 01       	movw	r20, r24
    4194:	82 81       	ldd	r24, Z+2	; 0x02
    4196:	93 81       	ldd	r25, Z+3	; 0x03
    4198:	4f 01       	movw	r8, r30
    419a:	fc 01       	movw	r30, r24
    419c:	30 97       	sbiw	r30, 0x00	; 0
    419e:	09 f0       	breq	.+2      	; 0x41a2 <realloc+0x11a>
    41a0:	b4 cf       	rjmp	.-152    	; 0x410a <realloc+0x82>
    41a2:	80 91 67 04 	lds	r24, 0x0467
    41a6:	90 91 68 04 	lds	r25, 0x0468
    41aa:	8a 15       	cp	r24, r10
    41ac:	9b 05       	cpc	r25, r11
    41ae:	e9 f4       	brne	.+58     	; 0x41ea <realloc+0x162>
    41b0:	46 17       	cp	r20, r22
    41b2:	57 07       	cpc	r21, r23
    41b4:	d0 f4       	brcc	.+52     	; 0x41ea <realloc+0x162>
    41b6:	80 91 45 01 	lds	r24, 0x0145
    41ba:	90 91 46 01 	lds	r25, 0x0146
    41be:	00 97       	sbiw	r24, 0x00	; 0
    41c0:	41 f4       	brne	.+16     	; 0x41d2 <realloc+0x14a>
    41c2:	8d b7       	in	r24, 0x3d	; 61
    41c4:	9e b7       	in	r25, 0x3e	; 62
    41c6:	20 91 49 01 	lds	r18, 0x0149
    41ca:	30 91 4a 01 	lds	r19, 0x014A
    41ce:	82 1b       	sub	r24, r18
    41d0:	93 0b       	sbc	r25, r19
    41d2:	a8 17       	cp	r26, r24
    41d4:	b9 07       	cpc	r27, r25
    41d6:	e0 f4       	brcc	.+56     	; 0x4210 <realloc+0x188>
    41d8:	b0 93 68 04 	sts	0x0468, r27
    41dc:	a0 93 67 04 	sts	0x0467, r26
    41e0:	f8 01       	movw	r30, r16
    41e2:	32 97       	sbiw	r30, 0x02	; 2
    41e4:	71 83       	std	Z+1, r23	; 0x01
    41e6:	60 83       	st	Z, r22
    41e8:	15 c0       	rjmp	.+42     	; 0x4214 <realloc+0x18c>
    41ea:	cb 01       	movw	r24, r22
    41ec:	29 83       	std	Y+1, r18	; 0x01
    41ee:	3a 83       	std	Y+2, r19	; 0x02
    41f0:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <malloc>
    41f4:	7c 01       	movw	r14, r24
    41f6:	29 81       	ldd	r18, Y+1	; 0x01
    41f8:	3a 81       	ldd	r19, Y+2	; 0x02
    41fa:	00 97       	sbiw	r24, 0x00	; 0
    41fc:	49 f0       	breq	.+18     	; 0x4210 <realloc+0x188>
    41fe:	b8 01       	movw	r22, r16
    4200:	a9 01       	movw	r20, r18
    4202:	0e 94 4e 21 	call	0x429c	; 0x429c <memcpy>
    4206:	c8 01       	movw	r24, r16
    4208:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <free>
    420c:	87 01       	movw	r16, r14
    420e:	02 c0       	rjmp	.+4      	; 0x4214 <realloc+0x18c>
    4210:	00 e0       	ldi	r16, 0x00	; 0
    4212:	10 e0       	ldi	r17, 0x00	; 0
    4214:	c8 01       	movw	r24, r16
    4216:	22 96       	adiw	r28, 0x02	; 2
    4218:	ec e0       	ldi	r30, 0x0C	; 12
    421a:	0c 94 97 22 	jmp	0x452e	; 0x452e <__epilogue_restores__+0xc>

0000421e <atol>:
    421e:	1f 93       	push	r17
    4220:	fc 01       	movw	r30, r24
    4222:	99 27       	eor	r25, r25
    4224:	88 27       	eor	r24, r24
    4226:	bc 01       	movw	r22, r24
    4228:	e8 94       	clt
    422a:	11 91       	ld	r17, Z+
    422c:	10 32       	cpi	r17, 0x20	; 32
    422e:	e9 f3       	breq	.-6      	; 0x422a <atol+0xc>
    4230:	19 30       	cpi	r17, 0x09	; 9
    4232:	10 f0       	brcs	.+4      	; 0x4238 <atol+0x1a>
    4234:	1e 30       	cpi	r17, 0x0E	; 14
    4236:	c8 f3       	brcs	.-14     	; 0x422a <atol+0xc>
    4238:	1b 32       	cpi	r17, 0x2B	; 43
    423a:	51 f0       	breq	.+20     	; 0x4250 <atol+0x32>
    423c:	1d 32       	cpi	r17, 0x2D	; 45
    423e:	49 f4       	brne	.+18     	; 0x4252 <atol+0x34>
    4240:	68 94       	set
    4242:	06 c0       	rjmp	.+12     	; 0x4250 <atol+0x32>
    4244:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsi_const_10>
    4248:	61 0f       	add	r22, r17
    424a:	71 1d       	adc	r23, r1
    424c:	81 1d       	adc	r24, r1
    424e:	91 1d       	adc	r25, r1
    4250:	11 91       	ld	r17, Z+
    4252:	10 53       	subi	r17, 0x30	; 48
    4254:	1a 30       	cpi	r17, 0x0A	; 10
    4256:	b0 f3       	brcs	.-20     	; 0x4244 <atol+0x26>
    4258:	3e f4       	brtc	.+14     	; 0x4268 <atol+0x4a>
    425a:	90 95       	com	r25
    425c:	80 95       	com	r24
    425e:	70 95       	com	r23
    4260:	61 95       	neg	r22
    4262:	7f 4f       	sbci	r23, 0xFF	; 255
    4264:	8f 4f       	sbci	r24, 0xFF	; 255
    4266:	9f 4f       	sbci	r25, 0xFF	; 255
    4268:	1f 91       	pop	r17
    426a:	08 95       	ret

0000426c <isspace>:
    426c:	91 11       	cpse	r25, r1
    426e:	16 c1       	rjmp	.+556    	; 0x449c <__ctype_isfalse>
    4270:	80 32       	cpi	r24, 0x20	; 32
    4272:	19 f0       	breq	.+6      	; 0x427a <isspace+0xe>
    4274:	89 50       	subi	r24, 0x09	; 9
    4276:	85 50       	subi	r24, 0x05	; 5
    4278:	d0 f7       	brcc	.-12     	; 0x426e <isspace+0x2>
    427a:	08 95       	ret

0000427c <tolower>:
    427c:	91 11       	cpse	r25, r1
    427e:	08 95       	ret
    4280:	81 54       	subi	r24, 0x41	; 65
    4282:	8a 51       	subi	r24, 0x1A	; 26
    4284:	08 f4       	brcc	.+2      	; 0x4288 <tolower+0xc>
    4286:	80 5e       	subi	r24, 0xE0	; 224
    4288:	85 5a       	subi	r24, 0xA5	; 165
    428a:	08 95       	ret

0000428c <toupper>:
    428c:	91 11       	cpse	r25, r1
    428e:	08 95       	ret
    4290:	81 56       	subi	r24, 0x61	; 97
    4292:	8a 51       	subi	r24, 0x1A	; 26
    4294:	08 f4       	brcc	.+2      	; 0x4298 <toupper+0xc>
    4296:	80 52       	subi	r24, 0x20	; 32
    4298:	85 58       	subi	r24, 0x85	; 133
    429a:	08 95       	ret

0000429c <memcpy>:
    429c:	fb 01       	movw	r30, r22
    429e:	dc 01       	movw	r26, r24
    42a0:	02 c0       	rjmp	.+4      	; 0x42a6 <memcpy+0xa>
    42a2:	01 90       	ld	r0, Z+
    42a4:	0d 92       	st	X+, r0
    42a6:	41 50       	subi	r20, 0x01	; 1
    42a8:	50 40       	sbci	r21, 0x00	; 0
    42aa:	d8 f7       	brcc	.-10     	; 0x42a2 <memcpy+0x6>
    42ac:	08 95       	ret

000042ae <strcat>:
    42ae:	fb 01       	movw	r30, r22
    42b0:	dc 01       	movw	r26, r24
    42b2:	0d 90       	ld	r0, X+
    42b4:	00 20       	and	r0, r0
    42b6:	e9 f7       	brne	.-6      	; 0x42b2 <strcat+0x4>
    42b8:	11 97       	sbiw	r26, 0x01	; 1
    42ba:	01 90       	ld	r0, Z+
    42bc:	0d 92       	st	X+, r0
    42be:	00 20       	and	r0, r0
    42c0:	e1 f7       	brne	.-8      	; 0x42ba <strcat+0xc>
    42c2:	08 95       	ret

000042c4 <strchr>:
    42c4:	fc 01       	movw	r30, r24
    42c6:	81 91       	ld	r24, Z+
    42c8:	86 17       	cp	r24, r22
    42ca:	21 f0       	breq	.+8      	; 0x42d4 <strchr+0x10>
    42cc:	88 23       	and	r24, r24
    42ce:	d9 f7       	brne	.-10     	; 0x42c6 <strchr+0x2>
    42d0:	99 27       	eor	r25, r25
    42d2:	08 95       	ret
    42d4:	31 97       	sbiw	r30, 0x01	; 1
    42d6:	cf 01       	movw	r24, r30
    42d8:	08 95       	ret

000042da <strcmp>:
    42da:	fb 01       	movw	r30, r22
    42dc:	dc 01       	movw	r26, r24
    42de:	8d 91       	ld	r24, X+
    42e0:	01 90       	ld	r0, Z+
    42e2:	80 19       	sub	r24, r0
    42e4:	01 10       	cpse	r0, r1
    42e6:	d9 f3       	breq	.-10     	; 0x42de <strcmp+0x4>
    42e8:	99 0b       	sbc	r25, r25
    42ea:	08 95       	ret

000042ec <strcpy>:
    42ec:	fb 01       	movw	r30, r22
    42ee:	dc 01       	movw	r26, r24
    42f0:	01 90       	ld	r0, Z+
    42f2:	0d 92       	st	X+, r0
    42f4:	00 20       	and	r0, r0
    42f6:	e1 f7       	brne	.-8      	; 0x42f0 <strcpy+0x4>
    42f8:	08 95       	ret

000042fa <strncmp>:
    42fa:	fb 01       	movw	r30, r22
    42fc:	dc 01       	movw	r26, r24
    42fe:	41 50       	subi	r20, 0x01	; 1
    4300:	50 40       	sbci	r21, 0x00	; 0
    4302:	30 f0       	brcs	.+12     	; 0x4310 <strncmp+0x16>
    4304:	8d 91       	ld	r24, X+
    4306:	01 90       	ld	r0, Z+
    4308:	80 19       	sub	r24, r0
    430a:	19 f4       	brne	.+6      	; 0x4312 <strncmp+0x18>
    430c:	00 20       	and	r0, r0
    430e:	b9 f7       	brne	.-18     	; 0x42fe <strncmp+0x4>
    4310:	88 1b       	sub	r24, r24
    4312:	99 0b       	sbc	r25, r25
    4314:	08 95       	ret

00004316 <strncpy>:
    4316:	fb 01       	movw	r30, r22
    4318:	dc 01       	movw	r26, r24
    431a:	41 50       	subi	r20, 0x01	; 1
    431c:	50 40       	sbci	r21, 0x00	; 0
    431e:	48 f0       	brcs	.+18     	; 0x4332 <strncpy+0x1c>
    4320:	01 90       	ld	r0, Z+
    4322:	0d 92       	st	X+, r0
    4324:	00 20       	and	r0, r0
    4326:	c9 f7       	brne	.-14     	; 0x431a <strncpy+0x4>
    4328:	01 c0       	rjmp	.+2      	; 0x432c <strncpy+0x16>
    432a:	1d 92       	st	X+, r1
    432c:	41 50       	subi	r20, 0x01	; 1
    432e:	50 40       	sbci	r21, 0x00	; 0
    4330:	e0 f7       	brcc	.-8      	; 0x432a <strncpy+0x14>
    4332:	08 95       	ret

00004334 <strrchr>:
    4334:	fc 01       	movw	r30, r24
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	01 90       	ld	r0, Z+
    433c:	06 16       	cp	r0, r22
    433e:	09 f4       	brne	.+2      	; 0x4342 <strrchr+0xe>
    4340:	cf 01       	movw	r24, r30
    4342:	00 20       	and	r0, r0
    4344:	d1 f7       	brne	.-12     	; 0x433a <strrchr+0x6>
    4346:	01 97       	sbiw	r24, 0x01	; 1
    4348:	08 95       	ret

0000434a <strstr>:
    434a:	fb 01       	movw	r30, r22
    434c:	51 91       	ld	r21, Z+
    434e:	55 23       	and	r21, r21
    4350:	a9 f0       	breq	.+42     	; 0x437c <strstr+0x32>
    4352:	bf 01       	movw	r22, r30
    4354:	dc 01       	movw	r26, r24
    4356:	4d 91       	ld	r20, X+
    4358:	45 17       	cp	r20, r21
    435a:	41 11       	cpse	r20, r1
    435c:	e1 f7       	brne	.-8      	; 0x4356 <strstr+0xc>
    435e:	59 f4       	brne	.+22     	; 0x4376 <strstr+0x2c>
    4360:	cd 01       	movw	r24, r26
    4362:	01 90       	ld	r0, Z+
    4364:	00 20       	and	r0, r0
    4366:	49 f0       	breq	.+18     	; 0x437a <strstr+0x30>
    4368:	4d 91       	ld	r20, X+
    436a:	40 15       	cp	r20, r0
    436c:	41 11       	cpse	r20, r1
    436e:	c9 f3       	breq	.-14     	; 0x4362 <strstr+0x18>
    4370:	fb 01       	movw	r30, r22
    4372:	41 11       	cpse	r20, r1
    4374:	ef cf       	rjmp	.-34     	; 0x4354 <strstr+0xa>
    4376:	81 e0       	ldi	r24, 0x01	; 1
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	01 97       	sbiw	r24, 0x01	; 1
    437c:	08 95       	ret

0000437e <itoa>:
    437e:	fb 01       	movw	r30, r22
    4380:	9f 01       	movw	r18, r30
    4382:	e8 94       	clt
    4384:	42 30       	cpi	r20, 0x02	; 2
    4386:	c4 f0       	brlt	.+48     	; 0x43b8 <itoa+0x3a>
    4388:	45 32       	cpi	r20, 0x25	; 37
    438a:	b4 f4       	brge	.+44     	; 0x43b8 <itoa+0x3a>
    438c:	4a 30       	cpi	r20, 0x0A	; 10
    438e:	29 f4       	brne	.+10     	; 0x439a <itoa+0x1c>
    4390:	97 fb       	bst	r25, 7
    4392:	1e f4       	brtc	.+6      	; 0x439a <itoa+0x1c>
    4394:	90 95       	com	r25
    4396:	81 95       	neg	r24
    4398:	9f 4f       	sbci	r25, 0xFF	; 255
    439a:	64 2f       	mov	r22, r20
    439c:	77 27       	eor	r23, r23
    439e:	0e 94 61 22 	call	0x44c2	; 0x44c2 <__udivmodhi4>
    43a2:	80 5d       	subi	r24, 0xD0	; 208
    43a4:	8a 33       	cpi	r24, 0x3A	; 58
    43a6:	0c f0       	brlt	.+2      	; 0x43aa <itoa+0x2c>
    43a8:	89 5d       	subi	r24, 0xD9	; 217
    43aa:	81 93       	st	Z+, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	00 97       	sbiw	r24, 0x00	; 0
    43b0:	a1 f7       	brne	.-24     	; 0x439a <itoa+0x1c>
    43b2:	16 f4       	brtc	.+4      	; 0x43b8 <itoa+0x3a>
    43b4:	5d e2       	ldi	r21, 0x2D	; 45
    43b6:	51 93       	st	Z+, r21
    43b8:	10 82       	st	Z, r1
    43ba:	c9 01       	movw	r24, r18
    43bc:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <strrev>

000043c0 <ltoa>:
    43c0:	fa 01       	movw	r30, r20
    43c2:	cf 93       	push	r28
    43c4:	ff 93       	push	r31
    43c6:	ef 93       	push	r30
    43c8:	22 30       	cpi	r18, 0x02	; 2
    43ca:	44 f1       	brlt	.+80     	; 0x441c <ltoa+0x5c>
    43cc:	25 32       	cpi	r18, 0x25	; 37
    43ce:	34 f5       	brge	.+76     	; 0x441c <ltoa+0x5c>
    43d0:	c2 2f       	mov	r28, r18
    43d2:	e8 94       	clt
    43d4:	ca 30       	cpi	r28, 0x0A	; 10
    43d6:	49 f4       	brne	.+18     	; 0x43ea <ltoa+0x2a>
    43d8:	97 fb       	bst	r25, 7
    43da:	3e f4       	brtc	.+14     	; 0x43ea <ltoa+0x2a>
    43dc:	90 95       	com	r25
    43de:	80 95       	com	r24
    43e0:	70 95       	com	r23
    43e2:	61 95       	neg	r22
    43e4:	7f 4f       	sbci	r23, 0xFF	; 255
    43e6:	8f 4f       	sbci	r24, 0xFF	; 255
    43e8:	9f 4f       	sbci	r25, 0xFF	; 255
    43ea:	2c 2f       	mov	r18, r28
    43ec:	33 27       	eor	r19, r19
    43ee:	44 27       	eor	r20, r20
    43f0:	55 27       	eor	r21, r21
    43f2:	ff 93       	push	r31
    43f4:	ef 93       	push	r30
    43f6:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <__udivmodsi4>
    43fa:	ef 91       	pop	r30
    43fc:	ff 91       	pop	r31
    43fe:	60 5d       	subi	r22, 0xD0	; 208
    4400:	6a 33       	cpi	r22, 0x3A	; 58
    4402:	0c f0       	brlt	.+2      	; 0x4406 <ltoa+0x46>
    4404:	69 5d       	subi	r22, 0xD9	; 217
    4406:	61 93       	st	Z+, r22
    4408:	b9 01       	movw	r22, r18
    440a:	ca 01       	movw	r24, r20
    440c:	60 50       	subi	r22, 0x00	; 0
    440e:	70 40       	sbci	r23, 0x00	; 0
    4410:	80 40       	sbci	r24, 0x00	; 0
    4412:	90 40       	sbci	r25, 0x00	; 0
    4414:	51 f7       	brne	.-44     	; 0x43ea <ltoa+0x2a>
    4416:	16 f4       	brtc	.+4      	; 0x441c <ltoa+0x5c>
    4418:	cd e2       	ldi	r28, 0x2D	; 45
    441a:	c1 93       	st	Z+, r28
    441c:	10 82       	st	Z, r1
    441e:	8f 91       	pop	r24
    4420:	9f 91       	pop	r25
    4422:	cf 91       	pop	r28
    4424:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <strrev>

00004428 <__mulsi_const_10>:
    4428:	59 2f       	mov	r21, r25
    442a:	48 2f       	mov	r20, r24
    442c:	37 2f       	mov	r19, r23
    442e:	26 2f       	mov	r18, r22
    4430:	66 0f       	add	r22, r22
    4432:	77 1f       	adc	r23, r23
    4434:	88 1f       	adc	r24, r24
    4436:	99 1f       	adc	r25, r25
    4438:	66 0f       	add	r22, r22
    443a:	77 1f       	adc	r23, r23
    443c:	88 1f       	adc	r24, r24
    443e:	99 1f       	adc	r25, r25
    4440:	62 0f       	add	r22, r18
    4442:	73 1f       	adc	r23, r19
    4444:	84 1f       	adc	r24, r20
    4446:	95 1f       	adc	r25, r21
    4448:	66 0f       	add	r22, r22
    444a:	77 1f       	adc	r23, r23
    444c:	88 1f       	adc	r24, r24
    444e:	99 1f       	adc	r25, r25
    4450:	08 95       	ret

00004452 <ultoa>:
    4452:	fa 01       	movw	r30, r20
    4454:	cf 93       	push	r28
    4456:	ff 93       	push	r31
    4458:	ef 93       	push	r30
    445a:	22 30       	cpi	r18, 0x02	; 2
    445c:	cc f0       	brlt	.+50     	; 0x4490 <ultoa+0x3e>
    445e:	25 32       	cpi	r18, 0x25	; 37
    4460:	bc f4       	brge	.+46     	; 0x4490 <ultoa+0x3e>
    4462:	c2 2f       	mov	r28, r18
    4464:	2c 2f       	mov	r18, r28
    4466:	33 27       	eor	r19, r19
    4468:	44 27       	eor	r20, r20
    446a:	55 27       	eor	r21, r21
    446c:	ff 93       	push	r31
    446e:	ef 93       	push	r30
    4470:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <__udivmodsi4>
    4474:	ef 91       	pop	r30
    4476:	ff 91       	pop	r31
    4478:	60 5d       	subi	r22, 0xD0	; 208
    447a:	6a 33       	cpi	r22, 0x3A	; 58
    447c:	0c f0       	brlt	.+2      	; 0x4480 <ultoa+0x2e>
    447e:	69 5d       	subi	r22, 0xD9	; 217
    4480:	61 93       	st	Z+, r22
    4482:	b9 01       	movw	r22, r18
    4484:	ca 01       	movw	r24, r20
    4486:	60 50       	subi	r22, 0x00	; 0
    4488:	70 40       	sbci	r23, 0x00	; 0
    448a:	80 40       	sbci	r24, 0x00	; 0
    448c:	90 40       	sbci	r25, 0x00	; 0
    448e:	51 f7       	brne	.-44     	; 0x4464 <ultoa+0x12>
    4490:	10 82       	st	Z, r1
    4492:	8f 91       	pop	r24
    4494:	9f 91       	pop	r25
    4496:	cf 91       	pop	r28
    4498:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <strrev>

0000449c <__ctype_isfalse>:
    449c:	99 27       	eor	r25, r25
    449e:	88 27       	eor	r24, r24

000044a0 <__ctype_istrue>:
    44a0:	08 95       	ret

000044a2 <strrev>:
    44a2:	dc 01       	movw	r26, r24
    44a4:	fc 01       	movw	r30, r24
    44a6:	67 2f       	mov	r22, r23
    44a8:	71 91       	ld	r23, Z+
    44aa:	77 23       	and	r23, r23
    44ac:	e1 f7       	brne	.-8      	; 0x44a6 <strrev+0x4>
    44ae:	32 97       	sbiw	r30, 0x02	; 2
    44b0:	04 c0       	rjmp	.+8      	; 0x44ba <strrev+0x18>
    44b2:	7c 91       	ld	r23, X
    44b4:	6d 93       	st	X+, r22
    44b6:	70 83       	st	Z, r23
    44b8:	62 91       	ld	r22, -Z
    44ba:	ae 17       	cp	r26, r30
    44bc:	bf 07       	cpc	r27, r31
    44be:	c8 f3       	brcs	.-14     	; 0x44b2 <strrev+0x10>
    44c0:	08 95       	ret

000044c2 <__udivmodhi4>:
    44c2:	aa 1b       	sub	r26, r26
    44c4:	bb 1b       	sub	r27, r27
    44c6:	51 e1       	ldi	r21, 0x11	; 17
    44c8:	07 c0       	rjmp	.+14     	; 0x44d8 <__udivmodhi4_ep>

000044ca <__udivmodhi4_loop>:
    44ca:	aa 1f       	adc	r26, r26
    44cc:	bb 1f       	adc	r27, r27
    44ce:	a6 17       	cp	r26, r22
    44d0:	b7 07       	cpc	r27, r23
    44d2:	10 f0       	brcs	.+4      	; 0x44d8 <__udivmodhi4_ep>
    44d4:	a6 1b       	sub	r26, r22
    44d6:	b7 0b       	sbc	r27, r23

000044d8 <__udivmodhi4_ep>:
    44d8:	88 1f       	adc	r24, r24
    44da:	99 1f       	adc	r25, r25
    44dc:	5a 95       	dec	r21
    44de:	a9 f7       	brne	.-22     	; 0x44ca <__udivmodhi4_loop>
    44e0:	80 95       	com	r24
    44e2:	90 95       	com	r25
    44e4:	bc 01       	movw	r22, r24
    44e6:	cd 01       	movw	r24, r26
    44e8:	08 95       	ret

000044ea <__prologue_saves__>:
    44ea:	2f 92       	push	r2
    44ec:	3f 92       	push	r3
    44ee:	4f 92       	push	r4
    44f0:	5f 92       	push	r5
    44f2:	6f 92       	push	r6
    44f4:	7f 92       	push	r7
    44f6:	8f 92       	push	r8
    44f8:	9f 92       	push	r9
    44fa:	af 92       	push	r10
    44fc:	bf 92       	push	r11
    44fe:	cf 92       	push	r12
    4500:	df 92       	push	r13
    4502:	ef 92       	push	r14
    4504:	ff 92       	push	r15
    4506:	0f 93       	push	r16
    4508:	1f 93       	push	r17
    450a:	cf 93       	push	r28
    450c:	df 93       	push	r29
    450e:	cd b7       	in	r28, 0x3d	; 61
    4510:	de b7       	in	r29, 0x3e	; 62
    4512:	ca 1b       	sub	r28, r26
    4514:	db 0b       	sbc	r29, r27
    4516:	0f b6       	in	r0, 0x3f	; 63
    4518:	f8 94       	cli
    451a:	de bf       	out	0x3e, r29	; 62
    451c:	0f be       	out	0x3f, r0	; 63
    451e:	cd bf       	out	0x3d, r28	; 61
    4520:	09 94       	ijmp

00004522 <__epilogue_restores__>:
    4522:	2a 88       	ldd	r2, Y+18	; 0x12
    4524:	39 88       	ldd	r3, Y+17	; 0x11
    4526:	48 88       	ldd	r4, Y+16	; 0x10
    4528:	5f 84       	ldd	r5, Y+15	; 0x0f
    452a:	6e 84       	ldd	r6, Y+14	; 0x0e
    452c:	7d 84       	ldd	r7, Y+13	; 0x0d
    452e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4530:	9b 84       	ldd	r9, Y+11	; 0x0b
    4532:	aa 84       	ldd	r10, Y+10	; 0x0a
    4534:	b9 84       	ldd	r11, Y+9	; 0x09
    4536:	c8 84       	ldd	r12, Y+8	; 0x08
    4538:	df 80       	ldd	r13, Y+7	; 0x07
    453a:	ee 80       	ldd	r14, Y+6	; 0x06
    453c:	fd 80       	ldd	r15, Y+5	; 0x05
    453e:	0c 81       	ldd	r16, Y+4	; 0x04
    4540:	1b 81       	ldd	r17, Y+3	; 0x03
    4542:	aa 81       	ldd	r26, Y+2	; 0x02
    4544:	b9 81       	ldd	r27, Y+1	; 0x01
    4546:	ce 0f       	add	r28, r30
    4548:	d1 1d       	adc	r29, r1
    454a:	0f b6       	in	r0, 0x3f	; 63
    454c:	f8 94       	cli
    454e:	de bf       	out	0x3e, r29	; 62
    4550:	0f be       	out	0x3f, r0	; 63
    4552:	cd bf       	out	0x3d, r28	; 61
    4554:	ed 01       	movw	r28, r26
    4556:	08 95       	ret

00004558 <_exit>:
    4558:	f8 94       	cli

0000455a <__stop_program>:
    455a:	ff cf       	rjmp	.-2      	; 0x455a <__stop_program>
